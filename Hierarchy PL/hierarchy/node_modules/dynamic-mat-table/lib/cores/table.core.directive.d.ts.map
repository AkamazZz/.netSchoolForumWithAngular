{"version":3,"file":"table.core.directive.d.ts","sources":["table.core.directive.d.ts"],"names":[],"mappingssourcesContent":["import { IRowEvent, TableRow, TableSelectionMode, ITableEvent } from '../models/table-row.model';\r\nimport { TableVirtualScrollDataSource } from './table-data-source';\r\nimport { EventEmitter, ChangeDetectorRef } from '@angular/core';\r\nimport { TableField } from '../models/table-field.model';\r\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { TableService } from '../dynamic-mat-table/dynamic-mat-table.service';\r\nimport { TablePagination, TablePaginationMode } from '../models/table-pagination.model';\r\nimport { PrintConfig } from '../models/print-config.model';\r\nimport { TableSetting, Direction } from '../models/table-setting.model';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatTable } from '@angular/material/table';\r\nimport { TableScrollStrategy } from './fixed-size-table-virtual-scroll-strategy';\r\nimport { ContextMenuItem } from '../models/context-menu.model';\r\nimport { BehaviorSubject } from 'rxjs';\r\nexport declare class TableCoreDirective<T extends TableRow> {\r\n    tableService: TableService;\r\n    cdr: ChangeDetectorRef;\r\n    sort: MatSort;\r\n    paginator: MatPaginator;\r\n    dataSource: BehaviorSubject<any[]>;\r\n    backgroundColor: string;\r\n    get direction(): Direction;\r\n    set direction(value: Direction);\r\n    contextMenuItems: ContextMenuItem[];\r\n    get ScrollStrategyType(): TableScrollStrategy;\r\n    set ScrollStrategyType(value: TableScrollStrategy);\r\n    get pagingMode(): TablePaginationMode;\r\n    set pagingMode(value: TablePaginationMode);\r\n    get pagination(): TablePagination;\r\n    set pagination(value: TablePagination);\r\n    get rowSelectionModel(): SelectionModel<T>;\r\n    set rowSelectionModel(value: SelectionModel<T>);\r\n    get rowSelectionMode(): TableSelectionMode;\r\n    set rowSelectionMode(selection: TableSelectionMode);\r\n    get tableName(): string;\r\n    set tableName(value: string);\r\n    get showProgress(): boolean;\r\n    set showProgress(value: boolean);\r\n    protected initSystemField(data: any[]): void;\r\n    expandColumn: any[];\r\n    private _expandComponent;\r\n    get expandComponent(): any;\r\n    set expandComponent(value: any);\r\n    rowContextMenuItems: ContextMenuItem[];\r\n    defaultWidth: number;\r\n    minWidth: number;\r\n    get columns(): TableField<T>[];\r\n    set columns(fields: TableField<T>[]);\r\n    updateColumn(): void;\r\n    /*************************************** I/O parameters *********************************/\r\n    printConfig: PrintConfig;\r\n    sticky: boolean;\r\n    pending: boolean;\r\n    rowHeight: number;\r\n    headerHeight: number;\r\n    footerHeight: number;\r\n    headerEnable: boolean;\r\n    footerEnable: boolean;\r\n    showNoData: boolean;\r\n    showReload: boolean;\r\n    onTableEvent: EventEmitter<ITableEvent>;\r\n    onRowEvent: EventEmitter<IRowEvent>;\r\n    settingChange: EventEmitter<any>;\r\n    paginationChange: EventEmitter<TablePagination>;\r\n    /*************************************** Expand Row *********************************/\r\n    expandedElement: TableRow | null;\r\n    constructor(tableService: TableService, cdr: ChangeDetectorRef);\r\n    progressColumn: string[];\r\n    displayedColumns: string[];\r\n    tableColumns: TableField<T>[];\r\n    tvsDataSource: TableVirtualScrollDataSource<T>;\r\n    private _rowSelectionMode;\r\n    private _rowSelectionModel;\r\n    private _tablePagination;\r\n    tablePagingMode: TablePaginationMode;\r\n    viewportClass: 'viewport' | 'viewport-with-pagination';\r\n    tableSetting: TableSetting;\r\n    /**************************************** Refrence Variables ***************************************/\r\n    table: MatTable<any>;\r\n    viewport: CdkVirtualScrollViewport;\r\n    /**************************************** Methods **********************************************/\r\n    refreshTableSetting(): void;\r\n    updatePagination(): void;\r\n    clear(): void;\r\n    setDisplayedColumns(): void;\r\n    /************************************ Drag & Drop Column *******************************************/\r\n    refreshGrid(): void;\r\n    moveRow(from: number, to: number): void;\r\n    moveColumn(from: number, to: number): void;\r\n    refreshColumn(columns: TableField<T>[]): void;\r\n    saveSetting(tableSetting: TableSetting, raiseEvent?: boolean): void;\r\n    /************************************ Selection Table Row *******************************************/\r\n    /** Whether the number of selected elements matches the total number of rows. */\r\n    isAllSelected(): boolean;\r\n    /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n    masterToggle(): void;\r\n    onRowSelectionChange(e: any, row: T): void;\r\n}\r\n"]}