import { OnInit, AfterViewInit, QueryList, ElementRef, TemplateRef, Renderer2, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { TableCoreDirective } from '../cores/table.core.directive';
import { TableService } from './dynamic-mat-table.service';
import { TableRow } from '../models/table-row.model';
import { TableField } from '../models/table-field.model';
import { AbstractFilter } from './extensions/filter/compare/abstract-filter';
import { TablePagination } from '../models/table-pagination.model';
import { HeaderFilterComponent } from './extensions/filter/header-filter.component';
import { MatDialog } from '@angular/material/dialog';
import { ResizeColumn } from '../models/resize-column.mode';
import { TableIntl } from '../international/table-Intl';
import { TableMenuActionChange } from './extensions/table-menu/table-menu.component';
import { CdkDragDrop, CdkDragStart } from '@angular/cdk/drag-drop';
import { TableSetting } from '../models/table-setting.model';
import { MatMenuTrigger } from '@angular/material/menu';
import { ContextMenuItem } from '../models/context-menu.model';
import { OverlayContainer } from '@angular/cdk/overlay';
import { MatTooltipDefaultOptions } from '@angular/material/tooltip';
export declare const tableAnimation: import("@angular/animations").AnimationTriggerMetadata;
export declare const expandAnimation: import("@angular/animations").AnimationTriggerMetadata;
export declare const cellTooltipDefaults: MatTooltipDefaultOptions;
export declare class DynamicMatTableComponent<T extends TableRow> extends TableCoreDirective<T> implements OnInit, AfterViewInit, OnDestroy {
    dialog: MatDialog;
    private renderer;
    languagePack: TableIntl;
    tableService: TableService;
    cdr: ChangeDetectorRef;
    private overlayContainer;
    tbl: any;
    get setting(): TableSetting;
    set setting(value: TableSetting);
    contextMenu: MatMenuTrigger;
    contextMenuPosition: {
        x: string;
        y: string;
    };
    printRef: TemplateRef<any>;
    printContentRef: ElementRef;
    headerFilterList: QueryList<HeaderFilterComponent>;
    private dragDropData;
    private eventsSubscription;
    printing: boolean;
    printTemplate: TemplateRef<any>;
    resizeColumn: ResizeColumn;
    resizableMousemove: () => void;
    resizableMouseup: () => void;
    constructor(dialog: MatDialog, renderer: Renderer2, languagePack: TableIntl, tableService: TableService, cdr: ChangeDetectorRef, overlayContainer: OverlayContainer);
    indexTrackFn: (index: number) => number;
    trackColumn(index: number, item: TableField<T>): string;
    ngOnDestroy(): void;
    refreshUI(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    get inverseOfTranslation(): number;
    ellipsis(cellRef: any): void;
    rowStyle(row: any): any;
    cellClass(option: any, column: any): any;
    cellStyle(option: any, column: any): any;
    cellIcon(option: any, cellName: any): any;
    filter_onChanged(column: TableField<T>, filter: AbstractFilter[]): void;
    currentContextMenuSender: any;
    onContextMenu(event: MouseEvent, column: TableField<T>, row: any): void;
    onContextMenuItemClick(data: ContextMenuItem): void;
    tableMenuActionChange(e: TableMenuActionChange): void;
    rowMenuActionChange(contextMenuItem: ContextMenuItem, row: any): void;
    doRendering(e: any): void;
    pagination_onChange(e: TablePagination): void;
    reload_onClick(): void;
    onResizeColumn(event: any, index: number, type: 'left' | 'right'): void;
    mouseMove(index: number): void;
    expandRow(rowIndex: number, mode?: boolean): void;
    onRowSelection(e: any, row: any, column: TableField<T>): void;
    onCellClick(e: any, row: any, column: TableField<T>): void;
    onRowDblClick(e: any, row: any): void;
    onRowClick(e: any, row: any): void;
    /************************************ Drag & Drop Column *******************************************/
    dragStarted(event: CdkDragStart): void;
    dropListDropped(event: CdkDragDrop<string[]>): void;
    drop(event: CdkDragDrop<string[]>): void;
    /************************************  *******************************************/
    copyProperty(from: any, to: any): void;
}
