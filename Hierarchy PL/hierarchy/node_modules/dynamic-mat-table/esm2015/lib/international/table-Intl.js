/**
 * @fileoverview added by tsickle
 * Generated from: lib/international/table-Intl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class TableIntl {
    constructor() {
        this.menuLabels = {
            saveData: 'Save Data',
            fullScreen: 'Full Screen',
            columnSetting: 'Column Setting',
            saveTableSetting: 'Save Table Setting',
            clearFilter: 'Clear Filter',
            jsonFile: 'Json File',
            csvFile: 'CSV File',
            printTable: 'Print Table',
            filterMode: 'Filter Mode:',
            filterLocalMode: 'Local',
            filterServerMode: 'Server',
            sortMode: 'Sort Mode:',
            sortLocalMode: 'Local',
            sortServerMode: 'Server',
            printMode: 'Print Mode',
            printYesMode: 'Yes',
            printNoMode: 'No',
            pinMode: 'Pin Mode:',
            pinNoneMode: 'None',
            pinStartMode: 'Start',
            pinEndMode: 'End',
            thereIsNoColumn: 'There is no column.'
        };
        this.paginatorLabels = {
            changes: new Subject(),
            itemsPerPageLabel: 'Items per page:',
            nextPageLabel: 'Next Page:',
            previousPageLabel: 'Previous Page:',
            firstPageLabel: 'First Page:',
            lastPageLabel: 'Last Page:',
            getRangeLabel: (/**
             * @param {?} page
             * @param {?} pageSize
             * @param {?} length
             * @return {?}
             */
            (page, pageSize, length) => {
                if (length === 0 || pageSize === 0) {
                    return `0 of ${length}`;
                }
                length = Math.max(length, 0);
                /** @type {?} */
                const startIndex = page * pageSize;
                /** @type {?} */
                const endIndex = startIndex < length ?
                    Math.min(startIndex + pageSize, length) :
                    startIndex + pageSize;
                return `${startIndex + 1} - ${endIndex} of ${length}`;
            })
        };
        this.tableLabels = {
            NoData: 'No records found.'
        };
        this.filterLabels = {
            Clear: 'Clear',
            Search: 'Search',
            And: 'And',
            Or: 'Or',
            /* Text Compare */
            Text: 'Text',
            TextContains: 'Contains',
            TextEmpty: 'Empty',
            TextStartsWith: 'Starts With',
            TextEndsWith: 'Ends With',
            TextEquals: 'Equals',
            TextNotEmpty: 'Not Empty',
            /* Number Compare */
            Number: 'Number',
            NumberEquals: 'Equals',
            NumberNotEquals: 'Not Equals',
            NumberGreaterThan: 'Greater Than',
            NumberLessThan: 'Less Than',
            NumberEmpty: 'Empty',
            NumberNotEmpty: 'Not Empty',
            /* Category List Compare */
            CategoryContains: 'Contains',
            CategoryNotContains: 'Not Contains',
        };
    }
}
TableIntl.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ TableIntl.ɵprov = i0.ɵɵdefineInjectable({ factory: function TableIntl_Factory() { return new TableIntl(); }, token: TableIntl, providedIn: "root" });
if (false) {
    /** @type {?} */
    TableIntl.prototype.menuLabels;
    /** @type {?} */
    TableIntl.prototype.paginatorLabels;
    /** @type {?} */
    TableIntl.prototype.tableLabels;
    /** @type {?} */
    TableIntl.prototype.filterLabels;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtSW50bC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2R5bmFtaWMtbWF0LXRhYmxlLyIsInNvdXJjZXMiOlsibGliL2ludGVybmF0aW9uYWwvdGFibGUtSW50bC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFNL0IsTUFBTSxPQUFPLFNBQVM7SUFIdEI7UUFJRSxlQUFVLEdBQWU7WUFDdkIsUUFBUSxFQUFFLFdBQVc7WUFDckIsVUFBVSxFQUFFLGFBQWE7WUFFekIsYUFBYSxFQUFFLGdCQUFnQjtZQUMvQixnQkFBZ0IsRUFBRSxvQkFBb0I7WUFDdEMsV0FBVyxFQUFFLGNBQWM7WUFDM0IsUUFBUSxFQUFFLFdBQVc7WUFDckIsT0FBTyxFQUFFLFVBQVU7WUFDbkIsVUFBVSxFQUFFLGFBQWE7WUFDekIsVUFBVSxFQUFFLGNBQWM7WUFDMUIsZUFBZSxFQUFFLE9BQU87WUFDeEIsZ0JBQWdCLEVBQUUsUUFBUTtZQUMxQixRQUFRLEVBQUUsWUFBWTtZQUN0QixhQUFhLEVBQUUsT0FBTztZQUN0QixjQUFjLEVBQUUsUUFBUTtZQUN4QixTQUFTLEVBQUUsWUFBWTtZQUN2QixZQUFZLEVBQUUsS0FBSztZQUNuQixXQUFXLEVBQUUsSUFBSTtZQUNqQixPQUFPLEVBQUUsV0FBVztZQUNwQixXQUFXLEVBQUUsTUFBTTtZQUNuQixZQUFZLEVBQUUsT0FBTztZQUNyQixVQUFVLEVBQUUsS0FBSztZQUNqQixlQUFlLEVBQUUscUJBQXFCO1NBQ3ZDLENBQUM7UUFFRixvQkFBZSxHQUFxQjtZQUNsQyxPQUFPLEVBQUcsSUFBSSxPQUFPLEVBQVE7WUFDN0IsaUJBQWlCLEVBQUUsaUJBQWlCO1lBQ3BDLGFBQWEsRUFBRSxZQUFZO1lBQzNCLGlCQUFpQixFQUFFLGdCQUFnQjtZQUNuQyxjQUFjLEVBQUUsYUFBYTtZQUM3QixhQUFhLEVBQUUsWUFBWTtZQUMzQixhQUFhOzs7Ozs7WUFBRyxDQUFDLElBQVksRUFBRSxRQUFnQixFQUFFLE1BQWMsRUFBRSxFQUFFO2dCQUNqRSxJQUFJLE1BQU0sS0FBSyxDQUFDLElBQUksUUFBUSxLQUFLLENBQUMsRUFBRTtvQkFBRSxPQUFPLFFBQVEsTUFBTSxFQUFFLENBQUM7aUJBQUU7Z0JBQ2hFLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQzs7c0JBQ3ZCLFVBQVUsR0FBRyxJQUFJLEdBQUcsUUFBUTs7c0JBQzVCLFFBQVEsR0FBRyxVQUFVLEdBQUcsTUFBTSxDQUFDLENBQUM7b0JBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUN6QyxVQUFVLEdBQUcsUUFBUTtnQkFDekIsT0FBTyxHQUFHLFVBQVUsR0FBRyxDQUFDLE1BQU0sUUFBUSxPQUFPLE1BQU0sRUFBRSxDQUFDO1lBQ3hELENBQUMsQ0FBQTtTQUNGLENBQUM7UUFFRixnQkFBVyxHQUNYO1lBQ0UsTUFBTSxFQUFFLG1CQUFtQjtTQUM1QixDQUFDO1FBRUYsaUJBQVksR0FBaUI7WUFDM0IsS0FBSyxFQUFFLE9BQU87WUFDZCxNQUFNLEVBQUUsUUFBUTtZQUNoQixHQUFHLEVBQUUsS0FBSztZQUNWLEVBQUUsRUFBRSxJQUFJOztZQUVSLElBQUksRUFBRSxNQUFNO1lBQ1osWUFBWSxFQUFFLFVBQVU7WUFDeEIsU0FBUyxFQUFFLE9BQU87WUFDbEIsY0FBYyxFQUFFLGFBQWE7WUFDN0IsWUFBWSxFQUFFLFdBQVc7WUFDekIsVUFBVSxFQUFFLFFBQVE7WUFDcEIsWUFBWSxFQUFFLFdBQVc7O1lBRXpCLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLFlBQVksRUFBRSxRQUFRO1lBQ3RCLGVBQWUsRUFBRSxZQUFZO1lBQzdCLGlCQUFpQixFQUFFLGNBQWM7WUFDakMsY0FBYyxFQUFFLFdBQVc7WUFDM0IsV0FBVyxFQUFFLE9BQU87WUFDcEIsY0FBYyxFQUFFLFdBQVc7O1lBRTNCLGdCQUFnQixFQUFFLFVBQVU7WUFDNUIsbUJBQW1CLEVBQUUsY0FBYztTQUdwQyxDQUFDO0tBRUg7OztZQWpGQSxVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7O0lBRUMsK0JBd0JFOztJQUVGLG9DQWdCRTs7SUFFRixnQ0FHRTs7SUFFRixpQ0EwQkUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMYW5ndWFnZVBhY2ssIFRhYmxlTGFiZWxzLCBGaWx0ZXJMYWJlbHMsIE1lbnVMYWJlbHMgfSBmcm9tICcuLi9tb2RlbHMvbGFuZ3VhZ2UtcGFjay5tb2RlbCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWF0UGFnaW5hdG9ySW50bCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3BhZ2luYXRvcic7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUYWJsZUludGwgaW1wbGVtZW50cyBMYW5ndWFnZVBhY2sge1xyXG4gIG1lbnVMYWJlbHM6IE1lbnVMYWJlbHMgPSB7XHJcbiAgICBzYXZlRGF0YTogJ1NhdmUgRGF0YScsXHJcbiAgICBmdWxsU2NyZWVuOiAnRnVsbCBTY3JlZW4nLFxyXG4gICAgXHJcbiAgICBjb2x1bW5TZXR0aW5nOiAnQ29sdW1uIFNldHRpbmcnLFxyXG4gICAgc2F2ZVRhYmxlU2V0dGluZzogJ1NhdmUgVGFibGUgU2V0dGluZycsXHJcbiAgICBjbGVhckZpbHRlcjogJ0NsZWFyIEZpbHRlcicsXHJcbiAgICBqc29uRmlsZTogJ0pzb24gRmlsZScsXHJcbiAgICBjc3ZGaWxlOiAnQ1NWIEZpbGUnLFxyXG4gICAgcHJpbnRUYWJsZTogJ1ByaW50IFRhYmxlJyxcclxuICAgIGZpbHRlck1vZGU6ICdGaWx0ZXIgTW9kZTonLFxyXG4gICAgZmlsdGVyTG9jYWxNb2RlOiAnTG9jYWwnLFxyXG4gICAgZmlsdGVyU2VydmVyTW9kZTogJ1NlcnZlcicsXHJcbiAgICBzb3J0TW9kZTogJ1NvcnQgTW9kZTonLFxyXG4gICAgc29ydExvY2FsTW9kZTogJ0xvY2FsJyxcclxuICAgIHNvcnRTZXJ2ZXJNb2RlOiAnU2VydmVyJyxcclxuICAgIHByaW50TW9kZTogJ1ByaW50IE1vZGUnLFxyXG4gICAgcHJpbnRZZXNNb2RlOiAnWWVzJyxcclxuICAgIHByaW50Tm9Nb2RlOiAnTm8nLFxyXG4gICAgcGluTW9kZTogJ1BpbiBNb2RlOicsXHJcbiAgICBwaW5Ob25lTW9kZTogJ05vbmUnLFxyXG4gICAgcGluU3RhcnRNb2RlOiAnU3RhcnQnLFxyXG4gICAgcGluRW5kTW9kZTogJ0VuZCcsXHJcbiAgICB0aGVyZUlzTm9Db2x1bW46ICdUaGVyZSBpcyBubyBjb2x1bW4uJ1xyXG4gIH07XHJcblxyXG4gIHBhZ2luYXRvckxhYmVsczogTWF0UGFnaW5hdG9ySW50bCA9IHtcclxuICAgIGNoYW5nZXM6ICBuZXcgU3ViamVjdDx2b2lkPigpLFxyXG4gICAgaXRlbXNQZXJQYWdlTGFiZWw6ICdJdGVtcyBwZXIgcGFnZTonLFxyXG4gICAgbmV4dFBhZ2VMYWJlbDogJ05leHQgUGFnZTonLFxyXG4gICAgcHJldmlvdXNQYWdlTGFiZWw6ICdQcmV2aW91cyBQYWdlOicsXHJcbiAgICBmaXJzdFBhZ2VMYWJlbDogJ0ZpcnN0IFBhZ2U6JyxcclxuICAgIGxhc3RQYWdlTGFiZWw6ICdMYXN0IFBhZ2U6JyxcclxuICAgIGdldFJhbmdlTGFiZWwgOiAocGFnZTogbnVtYmVyLCBwYWdlU2l6ZTogbnVtYmVyLCBsZW5ndGg6IG51bWJlcikgPT4ge1xyXG4gICAgICBpZiAobGVuZ3RoID09PSAwIHx8IHBhZ2VTaXplID09PSAwKSB7IHJldHVybiBgMCBvZiAke2xlbmd0aH1gOyB9XHJcbiAgICAgIGxlbmd0aCA9IE1hdGgubWF4KGxlbmd0aCwgMCk7XHJcbiAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBwYWdlICogcGFnZVNpemU7XHJcbiAgICAgIGNvbnN0IGVuZEluZGV4ID0gc3RhcnRJbmRleCA8IGxlbmd0aCA/XHJcbiAgICAgICAgICBNYXRoLm1pbihzdGFydEluZGV4ICsgcGFnZVNpemUsIGxlbmd0aCkgOlxyXG4gICAgICAgICAgc3RhcnRJbmRleCArIHBhZ2VTaXplO1xyXG4gICAgICByZXR1cm4gYCR7c3RhcnRJbmRleCArIDF9IC0gJHtlbmRJbmRleH0gb2YgJHtsZW5ndGh9YDtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0YWJsZUxhYmVsczogVGFibGVMYWJlbHMgPVxyXG4gIHtcclxuICAgIE5vRGF0YTogJ05vIHJlY29yZHMgZm91bmQuJ1xyXG4gIH07XHJcblxyXG4gIGZpbHRlckxhYmVsczogRmlsdGVyTGFiZWxzID0ge1xyXG4gICAgQ2xlYXI6ICdDbGVhcicsXHJcbiAgICBTZWFyY2g6ICdTZWFyY2gnLFxyXG4gICAgQW5kOiAnQW5kJyxcclxuICAgIE9yOiAnT3InLFxyXG4gICAgLyogVGV4dCBDb21wYXJlICovXHJcbiAgICBUZXh0OiAnVGV4dCcsXHJcbiAgICBUZXh0Q29udGFpbnM6ICdDb250YWlucycsXHJcbiAgICBUZXh0RW1wdHk6ICdFbXB0eScsXHJcbiAgICBUZXh0U3RhcnRzV2l0aDogJ1N0YXJ0cyBXaXRoJyxcclxuICAgIFRleHRFbmRzV2l0aDogJ0VuZHMgV2l0aCcsXHJcbiAgICBUZXh0RXF1YWxzOiAnRXF1YWxzJyxcclxuICAgIFRleHROb3RFbXB0eTogJ05vdCBFbXB0eScsXHJcbiAgICAvKiBOdW1iZXIgQ29tcGFyZSAqL1xyXG4gICAgTnVtYmVyOiAnTnVtYmVyJyxcclxuICAgIE51bWJlckVxdWFsczogJ0VxdWFscycsXHJcbiAgICBOdW1iZXJOb3RFcXVhbHM6ICdOb3QgRXF1YWxzJyxcclxuICAgIE51bWJlckdyZWF0ZXJUaGFuOiAnR3JlYXRlciBUaGFuJyxcclxuICAgIE51bWJlckxlc3NUaGFuOiAnTGVzcyBUaGFuJyxcclxuICAgIE51bWJlckVtcHR5OiAnRW1wdHknLFxyXG4gICAgTnVtYmVyTm90RW1wdHk6ICdOb3QgRW1wdHknLFxyXG4gICAgLyogQ2F0ZWdvcnkgTGlzdCBDb21wYXJlICovXHJcbiAgICBDYXRlZ29yeUNvbnRhaW5zOiAnQ29udGFpbnMnLFxyXG4gICAgQ2F0ZWdvcnlOb3RDb250YWluczogJ05vdCBDb250YWlucycsXHJcbiAgICAvKiBCb29sZWFuIENvbXBhcmUgKi9cclxuICAgIC8qIERhdGUgQ29tcGFyZSAqL1xyXG4gIH07XHJcblxyXG59XHJcblxyXG5cclxuXHJcblxyXG4iXX0=