/**
 * @fileoverview added by tsickle
 * Generated from: lib/cores/type.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// |||||||||||||||||||||||||||||||||||||| Utils ||||||||||||||||||||||||||||||||||||||||||||||||||
/**
 * check object is null or undefined
 * @param {?} value
 * @return {?}
 */
export function isNullorUndefined(value) {
    if (value === null || value === undefined) {
        return true;
    }
    else {
        return false;
    }
}
/**
 * clone object but refrence variable not change
 * @template T
 * @param {?} obj
 * @return {?}
 */
export function clone(obj) {
    if (obj === null || obj === undefined) {
        return obj;
    }
    else if (Array.isArray(obj)) {
        /** @type {?} */
        const array = [];
        obj.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => array.push(Object.assign({}, item))));
        return array;
    }
    else {
        return Object.assign({}, obj);
    }
}
/**
 * clone object and all refrence variable but may be there is a circle loop.
 * @template T
 * @param {?} obj
 * @return {?}
 */
export function deepClone(obj) {
    if (obj === null || obj === undefined) {
        return obj;
    }
    else if (Array.isArray(obj)) {
        /** @type {?} */
        const array = [];
        obj.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => array.push(deepClone(item))));
        return (/** @type {?} */ (array));
    }
    else {
        /** @type {?} */
        const c = Object.assign((/** @type {?} */ ({})), obj);
        /** @type {?} */
        const fields = Object.getOwnPropertyNames(obj);
        fields.forEach((/**
         * @param {?} f
         * @return {?}
         */
        f => {
            /** @type {?} */
            const field = obj[f];
            if (field !== null && typeof field === 'object') {
                c[f] = deepClone(field);
            }
        }));
        return c;
    }
}
/**
 * @param {?} fieldName
 * @param {?} defaultValue
 * @param {...?} variable
 * @return {?}
 */
export function getObjectProp(fieldName, defaultValue, ...variable) {
    for (const v in variable) {
        if (variable[v] && !isNullorUndefined(variable[v][fieldName])) {
            return variable[v][fieldName];
        }
    }
    return defaultValue;
}
/**
 * @param {?} from
 * @param {?} to
 * @param {?=} forced
 * @param {?=} nullSkip
 * @param {?=} undefinedSkip
 * @return {?}
 */
export function copy(from, to, forced = false, nullSkip = true, undefinedSkip = true) {
    if (from === null || from === undefined) {
        return;
    }
    if (to === null || to === undefined) {
        to = {};
    }
    /** @type {?} */
    const f = Object.keys(from);
    /** @type {?} */
    const t = Object.keys(to);
    f.forEach((/**
     * @param {?} fi
     * @return {?}
     */
    fi => {
        if (forced === true || t.includes(fi) === true) {
            if (!(from[fi] === null && nullSkip === true) && !(from[fi] === undefined && undefinedSkip === true)) {
                to[fi] = from[fi];
            }
        }
    }));
}
// |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// |||||||||||||||||||||||||||||||||||| Text Utils |||||||||||||||||||||||||||||||||||||||||||||||
/**
 * Transforms a camelCase string into a readable text format
 * \@example textify('helloWorld!')
 * // Hello world!
 * @param {?} text
 * @return {?}
 */
export function textify(text) {
    return text
        .replace(/([A-Z])/g, (/**
     * @param {?} char
     * @return {?}
     */
    char => ` ${char.toLowerCase()}`))
        .replace(/^([a-z])/, (/**
     * @param {?} char
     * @return {?}
     */
    char => char.toUpperCase()));
}
/**
 * Transforms a text string into a title case text format
 * \@example titleCase('hello world!')
 * // Hello Workd!
 * @param {?} value
 * @return {?}
 */
export function titleCase(value) {
    /** @type {?} */
    const sentence = value.toLowerCase().split(' ');
    for (let i = 0; i < sentence.length; i++) {
        sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);
    }
    return sentence.join(' ');
}
/**
 * @record
 * @template T
 */
export function Dictionary() { }
//# sourceMappingURL=data:application/json;base64,