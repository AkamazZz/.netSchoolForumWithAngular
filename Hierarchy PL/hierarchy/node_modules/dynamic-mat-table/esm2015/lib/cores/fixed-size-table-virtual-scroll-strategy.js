/**
 * @fileoverview added by tsickle
 * Generated from: lib/cores/fixed-size-table-virtual-scroll-strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { distinctUntilChanged } from 'rxjs/operators';
import { BehaviorSubject, Subject } from 'rxjs';
/**
 * @record
 */
export function TSVStrategyConfigs() { }
if (false) {
    /** @type {?} */
    TSVStrategyConfigs.prototype.rowHeight;
    /** @type {?} */
    TSVStrategyConfigs.prototype.headerHeight;
    /** @type {?} */
    TSVStrategyConfigs.prototype.footerHeight;
    /** @type {?} */
    TSVStrategyConfigs.prototype.bufferMultiplier;
}
export class FixedSizeTableVirtualScrollStrategy {
    constructor() {
        this.length = 0;
        this.indexChange = new Subject();
        this.stickyChange = new Subject();
        this.scrollStrategyMode = 'fixed-size';
        this.renderedRangeStream = new BehaviorSubject({ start: 0, end: 0 });
        this.offsetChange = new BehaviorSubject(0);
        this.scrolledIndexChange = this.indexChange.pipe(distinctUntilChanged());
    }
    /**
     * @return {?}
     */
    get dataLength() {
        return this.length;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dataLength(value) {
        this.length = value;
        this.onDataLengthChanged();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.eventsSubscription.unsubscribe();
    }
    /**
     * @param {?} viewport
     * @return {?}
     */
    attach(viewport) {
        this.viewport = viewport;
        this.eventsSubscription = this.viewport.renderedRangeStream.subscribe(this.renderedRangeStream);
        this.onDataLengthChanged();
    }
    /**
     * @return {?}
     */
    detach() {
        this.indexChange.complete();
        this.stickyChange.complete();
        this.renderedRangeStream.complete();
    }
    /**
     * @return {?}
     */
    onContentScrolled() {
        this.updateContent();
    }
    /**
     * @return {?}
     */
    onDataLengthChanged() {
        if (this.viewport) {
            this.viewport.setTotalContentSize(this.dataLength * this.rowHeight + this.headerHeight + this.footerHeight);
        }
        this.updateContent();
    }
    /**
     * @return {?}
     */
    onContentRendered() {
        // no-op
    }
    /**
     * @return {?}
     */
    onRenderedOffsetChanged() {
        // no-op
    }
    /**
     * @param {?} index
     * @param {?} behavior
     * @return {?}
     */
    scrollToIndex(index, behavior) {
        // if (this.viewport) {
        //   this.viewport.scrollToOffset( this.rowHeight * index , behavior);
        // }    
        if (!this.viewport || !this.rowHeight) {
            return;
        }
        this.viewport.scrollToOffset((index - 1) * this.rowHeight + this.headerHeight);
    }
    /**
     * @param {?} configs
     * @return {?}
     */
    setConfig(configs) {
        const { rowHeight, headerHeight, footerHeight, bufferMultiplier } = configs;
        if (this.rowHeight === rowHeight
            && this.headerHeight === headerHeight
            && this.footerHeight === footerHeight
            && this.bufferMultiplier === bufferMultiplier) {
            return;
        }
        this.rowHeight = rowHeight;
        this.headerHeight = headerHeight;
        this.footerHeight = footerHeight;
        this.bufferMultiplier = bufferMultiplier;
        this.onDataLengthChanged();
    }
    // bug fixed some time viewport is zero height (i dont know why!)
    /**
     * @return {?}
     */
    getViewportSize() {
        if (this.viewport.getViewportSize() === 0) {
            return this.viewport.elementRef.nativeElement.clientHeight + 52;
        }
        else {
            return this.viewport.getViewportSize();
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateContent() {
        if (!this.viewport || !this.rowHeight) {
            return;
        }
        /** @type {?} */
        let start = 0;
        /** @type {?} */
        let end = this.dataLength;
        if (this.scrollStrategyMode === 'none' && this.viewport.getRenderedRange().start === start && this.viewport.getRenderedRange().end === end) {
            return;
        }
        /** @type {?} */
        const scrollOffset = this.viewport.measureScrollOffset();
        /** @type {?} */
        const amount = Math.ceil(this.getViewportSize() / this.rowHeight);
        /** @type {?} */
        const offset = Math.max(scrollOffset - this.headerHeight, 0);
        /** @type {?} */
        const buffer = Math.ceil(amount * this.bufferMultiplier);
        /** @type {?} */
        const skip = Math.round(offset / this.rowHeight);
        /** @type {?} */
        const index = Math.max(0, skip);
        if (this.scrollStrategyMode === 'fixed-size') {
            start = Math.max(0, index - buffer);
            end = Math.min(this.dataLength, index + amount + buffer);
        }
        /** @type {?} */
        const renderedOffset = start * this.rowHeight;
        this.viewport.setRenderedContentOffset(renderedOffset);
        this.viewport.setRenderedRange({ start, end });
        this.indexChange.next(index);
        this.stickyChange.next(renderedOffset);
        this.offsetChange.next(offset);
    }
}
FixedSizeTableVirtualScrollStrategy.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FixedSizeTableVirtualScrollStrategy.prototype.eventsSubscription;
    /**
     * @type {?}
     * @private
     */
    FixedSizeTableVirtualScrollStrategy.prototype.length;
    /**
     * @type {?}
     * @private
     */
    FixedSizeTableVirtualScrollStrategy.prototype.rowHeight;
    /**
     * @type {?}
     * @private
     */
    FixedSizeTableVirtualScrollStrategy.prototype.headerHeight;
    /**
     * @type {?}
     * @private
     */
    FixedSizeTableVirtualScrollStrategy.prototype.footerHeight;
    /**
     * @type {?}
     * @private
     */
    FixedSizeTableVirtualScrollStrategy.prototype.bufferMultiplier;
    /**
     * @type {?}
     * @private
     */
    FixedSizeTableVirtualScrollStrategy.prototype.indexChange;
    /** @type {?} */
    FixedSizeTableVirtualScrollStrategy.prototype.stickyChange;
    /** @type {?} */
    FixedSizeTableVirtualScrollStrategy.prototype.scrollStrategyMode;
    /** @type {?} */
    FixedSizeTableVirtualScrollStrategy.prototype.viewport;
    /** @type {?} */
    FixedSizeTableVirtualScrollStrategy.prototype.renderedRangeStream;
    /** @type {?} */
    FixedSizeTableVirtualScrollStrategy.prototype.offsetChange;
    /** @type {?} */
    FixedSizeTableVirtualScrollStrategy.prototype.scrolledIndexChange;
}
//# sourceMappingURL=data:application/json;base64,