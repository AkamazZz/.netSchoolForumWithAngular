/**
 * @fileoverview added by tsickle
 * Generated from: lib/cores/dynamic-cell/dynamic-cell.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Compiler, ComponentFactoryResolver, Directive, EventEmitter, Input, ViewContainerRef } from '@angular/core';
import { DynamicMatTableComponent } from '../../dynamic-mat-table/dynamic-mat-table.component';
export class DynamicCellDirective {
    /**
     * @param {?} compiler
     * @param {?} cfr
     * @param {?} vc
     * @param {?} parent
     */
    constructor(compiler, cfr, vc, parent) {
        this.compiler = compiler;
        this.cfr = cfr;
        this.vc = vc;
        this.parent = parent;
        this.componentRef = null;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.componentRef === null || this.componentRef === undefined) {
            this.initComponent();
        }
        // pass input parameters
        if (changes.column && changes.column.currentValue) {
            this.componentRef.instance.column = this.column;
        }
        if (changes.row && changes.row.currentValue) {
            ((/** @type {?} */ (this.componentRef.instance))).row = this.row;
        }
        if (changes.onRowEvent && changes.onRowEvent.currentValue) {
            ((/** @type {?} */ (this.componentRef.instance))).onRowEvent = this.onRowEvent;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    }
    /**
     * @return {?}
     */
    initComponent() {
        try {
            /** @type {?} */
            const componentFactory = this.cfr.resolveComponentFactory(this.component);
            this.componentRef = this.vc.createComponent(componentFactory);
            this.updateInput();
        }
        catch (e) {
            // console.log(e);
        }
    }
    /**
     * @return {?}
     */
    updateInput() {
        if (this.parent) {
            ((/** @type {?} */ (this.componentRef.instance))).parent = this.parent;
        }
        if (this.column) {
            this.componentRef.instance.column = this.column;
        }
        if (this.row) {
            ((/** @type {?} */ (this.componentRef.instance))).row = this.row;
        }
        if (this.onRowEvent) {
            ((/** @type {?} */ (this.componentRef.instance))).onRowEvent = this.onRowEvent;
        }
    }
}
DynamicCellDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dynamicCell]'
            },] }
];
/** @nocollapse */
DynamicCellDirective.ctorParameters = () => [
    { type: Compiler },
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: DynamicMatTableComponent }
];
DynamicCellDirective.propDecorators = {
    component: [{ type: Input }],
    column: [{ type: Input }],
    row: [{ type: Input }],
    onRowEvent: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DynamicCellDirective.prototype.component;
    /** @type {?} */
    DynamicCellDirective.prototype.column;
    /** @type {?} */
    DynamicCellDirective.prototype.row;
    /** @type {?} */
    DynamicCellDirective.prototype.onRowEvent;
    /** @type {?} */
    DynamicCellDirective.prototype.componentRef;
    /** @type {?} */
    DynamicCellDirective.prototype.compiler;
    /**
     * @type {?}
     * @private
     */
    DynamicCellDirective.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    DynamicCellDirective.prototype.vc;
    /**
     * @type {?}
     * @private
     */
    DynamicCellDirective.prototype.parent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jZWxsLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2R5bmFtaWMtbWF0LXRhYmxlLyIsInNvdXJjZXMiOlsibGliL2NvcmVzL2R5bmFtaWMtY2VsbC9keW5hbWljLWNlbGwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBZ0IsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQStDLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWhMLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBUS9GLE1BQU0sT0FBTyxvQkFBb0I7Ozs7Ozs7SUFPL0IsWUFDUyxRQUFrQixFQUNqQixHQUE2QixFQUM3QixFQUFvQixFQUNwQixNQUFxQztRQUh0QyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2pCLFFBQUcsR0FBSCxHQUFHLENBQTBCO1FBQzdCLE9BQUUsR0FBRixFQUFFLENBQWtCO1FBQ3BCLFdBQU0sR0FBTixNQUFNLENBQStCO1FBTi9DLGlCQUFZLEdBQStCLElBQUksQ0FBQztJQU8zQyxDQUFDOzs7OztJQUVOLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssU0FBUyxFQUFFO1lBQ2pFLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN0QjtRQUNELHdCQUF3QjtRQUN4QixJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUU7WUFDakQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDakQ7UUFDRCxJQUFJLE9BQU8sQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUU7WUFDM0MsQ0FBQyxtQkFBQSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBTyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDcEQ7UUFDRCxJQUFJLE9BQU8sQ0FBQyxVQUFVLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUU7WUFDekQsQ0FBQyxtQkFBQSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBTyxDQUFDLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7U0FDbEU7SUFDSCxDQUFDOzs7O0lBRUQsUUFBUSxLQUFJLENBQUM7Ozs7SUFFYixXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDN0I7SUFDSCxDQUFDOzs7O0lBRUQsYUFBYTtRQUNYLElBQUc7O2tCQUNLLGdCQUFnQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQWUsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUN2RixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFlLGdCQUFnQixDQUFDLENBQUM7WUFDNUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3BCO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixrQkFBa0I7U0FDbkI7SUFDSCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLENBQUMsbUJBQUEsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQWdCLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNuRTtRQUNELElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQ2pEO1FBQ0QsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1osQ0FBQyxtQkFBQSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBZ0IsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1NBQzdEO1FBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLENBQUMsbUJBQUEsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQWdCLENBQUMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUMzRTtJQUNILENBQUM7OztZQWhFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGVBQWU7YUFDMUI7Ozs7WUFUUSxRQUFRO1lBQUUsd0JBQXdCO1lBQTZGLGdCQUFnQjtZQUUvSSx3QkFBd0I7Ozt3QkFTOUIsS0FBSztxQkFDTCxLQUFLO2tCQUNMLEtBQUs7eUJBQ0wsS0FBSzs7OztJQUhOLHlDQUF3Qjs7SUFDeEIsc0NBQWlDOztJQUNqQyxtQ0FBa0I7O0lBQ2xCLDBDQUE2Qzs7SUFDN0MsNENBQWdEOztJQUc5Qyx3Q0FBeUI7Ozs7O0lBQ3pCLG1DQUFxQzs7Ozs7SUFDckMsa0NBQTRCOzs7OztJQUM1QixzQ0FBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21waWxlciwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBDb21wb25lbnRSZWYsIERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcywgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgRHluYW1pY01hdFRhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZHluYW1pYy1tYXQtdGFibGUvZHluYW1pYy1tYXQtdGFibGUuY29tcG9uZW50JztcclxuaW1wb3J0IHsgVGFibGVGaWVsZCB9IGZyb20gJy4uLy4uL21vZGVscy90YWJsZS1maWVsZC5tb2RlbCc7XHJcbmltcG9ydCB7IElSb3dFdmVudCB9IGZyb20gJy4uLy4uL21vZGVscy90YWJsZS1yb3cubW9kZWwnO1xyXG5pbXBvcnQgeyBJRHluYW1pY0NlbGwgfSBmcm9tICcuL0lEeW5hbWljQ2VsbCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tkeW5hbWljQ2VsbF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEeW5hbWljQ2VsbERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kgIHtcclxuICBASW5wdXQoKSBjb21wb25lbnQ6IGFueTtcclxuICBASW5wdXQoKSBjb2x1bW46IFRhYmxlRmllbGQ8YW55PjtcclxuICBASW5wdXQoKSByb3c6IGFueTtcclxuICBASW5wdXQoKSBvblJvd0V2ZW50OiBFdmVudEVtaXR0ZXI8SVJvd0V2ZW50PjsgIFxyXG4gIGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPElEeW5hbWljQ2VsbD4gPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBjb21waWxlcjogQ29tcGlsZXIsXHJcbiAgICBwcml2YXRlIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgcHJpdmF0ZSB2YzogVmlld0NvbnRhaW5lclJlZixcclxuICAgIHByaXZhdGUgcGFyZW50OiBEeW5hbWljTWF0VGFibGVDb21wb25lbnQ8YW55PlxyXG4gICAgKSB7fSAgICBcclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuY29tcG9uZW50UmVmID09PSBudWxsIHx8IHRoaXMuY29tcG9uZW50UmVmID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5pbml0Q29tcG9uZW50KCk7XHJcbiAgICB9ICAgIFxyXG4gICAgLy8gcGFzcyBpbnB1dCBwYXJhbWV0ZXJzXHJcbiAgICBpZiAoY2hhbmdlcy5jb2x1bW4gJiYgY2hhbmdlcy5jb2x1bW4uY3VycmVudFZhbHVlKSB7XHJcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmNvbHVtbiA9IHRoaXMuY29sdW1uO1xyXG4gICAgfSAgICBcclxuICAgIGlmIChjaGFuZ2VzLnJvdyAmJiBjaGFuZ2VzLnJvdy5jdXJyZW50VmFsdWUpIHtcclxuICAgICAgKHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlIGFzIGFueSkucm93ID0gdGhpcy5yb3c7XHJcbiAgICB9XHJcbiAgICBpZiAoY2hhbmdlcy5vblJvd0V2ZW50ICYmIGNoYW5nZXMub25Sb3dFdmVudC5jdXJyZW50VmFsdWUpIHtcclxuICAgICAgKHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlIGFzIGFueSkub25Sb3dFdmVudCA9IHRoaXMub25Sb3dFdmVudDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge31cclxuXHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5jb21wb25lbnRSZWYpIHtcclxuICAgICAgdGhpcy5jb21wb25lbnRSZWYuZGVzdHJveSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaW5pdENvbXBvbmVudCgpIHtcclxuICAgIHRyeXtcclxuICAgICAgY29uc3QgY29tcG9uZW50RmFjdG9yeSA9IHRoaXMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5PElEeW5hbWljQ2VsbD4odGhpcy5jb21wb25lbnQpO1xyXG4gICAgICB0aGlzLmNvbXBvbmVudFJlZiA9IHRoaXMudmMuY3JlYXRlQ29tcG9uZW50PElEeW5hbWljQ2VsbD4oY29tcG9uZW50RmFjdG9yeSk7ICAgICAgXHJcbiAgICAgIHRoaXMudXBkYXRlSW5wdXQoKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coZSk7XHJcbiAgICB9IFxyXG4gIH1cclxuXHJcbiAgdXBkYXRlSW5wdXQoKSB7XHJcbiAgICBpZiAodGhpcy5wYXJlbnQpIHtcclxuICAgICAgKHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlIGFzIElEeW5hbWljQ2VsbCkucGFyZW50ID0gdGhpcy5wYXJlbnQ7XHJcbiAgICB9ICAgIFxyXG4gICAgaWYgKHRoaXMuY29sdW1uKSB7XHJcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmNvbHVtbiA9IHRoaXMuY29sdW1uO1xyXG4gICAgfSAgIFxyXG4gICAgaWYgKHRoaXMucm93KSB7XHJcbiAgICAgICh0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZSBhcyBJRHluYW1pY0NlbGwpLnJvdyA9IHRoaXMucm93O1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMub25Sb3dFdmVudCkge1xyXG4gICAgICAodGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UgYXMgSUR5bmFtaWNDZWxsKS5vblJvd0V2ZW50ID0gdGhpcy5vblJvd0V2ZW50O1xyXG4gICAgfSAgICBcclxuICB9XHJcbn1cclxuIl19