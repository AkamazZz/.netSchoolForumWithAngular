/**
 * @fileoverview added by tsickle
 * Generated from: lib/cores/table-data-source.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { combineLatest, merge, Observable, of, ReplaySubject, Subscription } from 'rxjs';
import { map } from 'rxjs/operators';
import { MatTableDataSource } from '@angular/material/table';
import { titleCase } from '../utilies/text.utils';
/**
 * @template T
 */
export class TableVirtualScrollDataSource extends MatTableDataSource {
    constructor() {
        super(...arguments);
        this.filterMap = {};
    }
    /**
     * @return {?}
     */
    get allData() {
        return this.data;
    }
    /**
     * @return {?}
     */
    toTranslate() {
        /** @type {?} */
        const tranList = [];
        /** @type {?} */
        const keys = Object.keys(this.filterMap);
        for (const k of keys) {
            /** @type {?} */
            let fieldTotalTran = '';
            for (const f of this.filterMap[k]) {
                fieldTotalTran += f.toPrint();
            }
            if (fieldTotalTran !== '') {
                tranList.push({ key: titleCase(k), value: fieldTotalTran });
            }
        }
        return tranList;
    }
    /**
     * @param {?} fieldName
     * @return {?}
     */
    getFilter(fieldName) {
        return this.filterMap[fieldName];
    }
    /**
     * @param {?} fieldName
     * @param {?} filters
     * @return {?}
     */
    setFilter(fieldName, filters) {
        this.filterMap[fieldName] = filters;
        return new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        subscriber => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.refreshFilterPredicate();
                subscriber.next();
                subscriber.complete();
            }), 200); // for show progress
        }));
    }
    /**
     * @param {?=} fieldName
     * @return {?}
     */
    clearFilter(fieldName = null) {
        if (fieldName != null) {
            delete this.filterMap[fieldName];
        }
        else {
            this.filterMap = {};
        }
        this.refreshFilterPredicate();
    }
    /**
     * @return {?}
     */
    clearData() {
        this.data = [];
    }
    /**
     * @return {?}
     */
    refreshFilterPredicate() {
        /** @type {?} */
        let conditionsString = '';
        Object.keys(this.filterMap).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            let fieldCondition = '';
            this.filterMap[key].forEach((/**
             * @param {?} fieldFilter
             * @param {?} row
             * @param {?} array
             * @return {?}
             */
            (fieldFilter, row, array) => {
                if (row < array.length - 1) {
                    fieldCondition += fieldFilter.toString(key) + (fieldFilter.type === 'and' ? ' && ' : ' || ');
                }
                else {
                    fieldCondition += fieldFilter.toString(key);
                }
            }));
            if (fieldCondition !== '') {
                conditionsString += ` ${conditionsString === '' ? '' : ' && '} ( ${fieldCondition} )`;
            }
        }));
        if (conditionsString !== '') {
            /** @type {?} */
            const filterFunction = new Function('_a$', 'return ' + conditionsString);
            this.filterPredicate = (/**
             * @param {?} data
             * @param {?} filter
             * @return {?}
             */
            (data, filter) => (/** @type {?} */ (filterFunction(data))));
        }
        else {
            this.filterPredicate = (/**
             * @param {?} data
             * @param {?} filter
             * @return {?}
             */
            (data, filter) => true);
        }
        this.filter = conditionsString;
    }
    // When client paging active use for reterive paging data
    /**
     * @param {?} data
     * @return {?}
     */
    pagingData(data) {
        /** @type {?} */
        const p = ((/** @type {?} */ (this)))._paginator;
        if (p && p !== null) {
            /** @type {?} */
            const end = (p.pageIndex + 1) * p.pageSize;
            /** @type {?} */
            const start = p.pageIndex * p.pageSize;
            return data.slice(start, end);
        }
        return data;
    }
    /**
     * @return {?}
     */
    _updateChangeSubscription() {
        var _a;
        this.initStreams();
        /** @type {?} */
        const sort = ((/** @type {?} */ (this)))._sort;
        /** @type {?} */
        const paginator = ((/** @type {?} */ (this)))._paginator;
        /** @type {?} */
        const internalPageChanges = ((/** @type {?} */ (this)))._internalPageChanges;
        /** @type {?} */
        const filter = ((/** @type {?} */ (this)))._filter;
        /** @type {?} */
        const renderData = ((/** @type {?} */ (this)))._renderData;
        /** @type {?} */
        const dataStream = ((/** @type {?} */ (this)))._data;
        /** @type {?} */
        const sortChange = sort ?
            (/** @type {?} */ (merge(sort.sortChange, sort.initialized))) : of(null);
        /** @type {?} */
        const pageChange = paginator ?
            (/** @type {?} */ (merge(paginator.page, internalPageChanges, paginator.initialized))) : of(null);
        // First Filter
        /** @type {?} */
        const filteredData = combineLatest([dataStream, filter]).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([data]) => this._filterData(data))));
        // Second Order
        /** @type {?} */
        const orderedData = combineLatest([filteredData, sortChange]).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([data]) => this._orderData(data))));
        // Last Paging
        /** @type {?} */
        const paginatedData = combineLatest([orderedData, pageChange]).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([data]) => this.pagingData(data))));
        (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        this._renderChangesSubscription = new Subscription();
        this._renderChangesSubscription.add(paginatedData.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => this.dataToRender$.next(data))));
        this._renderChangesSubscription.add(this.dataOfRange$.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => renderData.next(data))));
    }
    /**
     * @private
     * @return {?}
     */
    initStreams() {
        if (!this.streamsReady) {
            this.dataToRender$ = new ReplaySubject(1);
            this.dataOfRange$ = new ReplaySubject(1);
            this.streamsReady = true;
        }
    }
}
if (false) {
    /** @type {?} */
    TableVirtualScrollDataSource.prototype.dataToRender$;
    /** @type {?} */
    TableVirtualScrollDataSource.prototype.dataOfRange$;
    /**
     * @type {?}
     * @private
     */
    TableVirtualScrollDataSource.prototype.streamsReady;
    /**
     * @type {?}
     * @private
     */
    TableVirtualScrollDataSource.prototype.filterMap;
}
/**
 * @record
 * @template T
 */
export function HashMap() { }
//# sourceMappingURL=data:application/json;base64,