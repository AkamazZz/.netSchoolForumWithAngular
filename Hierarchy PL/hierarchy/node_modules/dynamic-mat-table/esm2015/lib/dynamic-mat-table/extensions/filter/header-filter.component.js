/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/filter/header-filter.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, HostBinding, Output, ViewChild, Input, EventEmitter, ChangeDetectorRef, QueryList, ContentChildren } from '@angular/core';
import { TableService } from '../../dynamic-mat-table.service';
import { TextFilter } from './compare/text-filter';
import { NumberFilter } from './compare/number-filter';
import { transition, trigger, query, style, stagger, animate } from '@angular/animations';
import { TableIntl } from '../../../international/table-Intl';
import { MatMenuTrigger } from '@angular/material/menu';
import { isNullorUndefined } from '../../../cores/type';
/** @type {?} */
const listAnimation = trigger('listAnimation', [
    transition('* <=> *', [
        query(':enter', [style({ opacity: 0 }), stagger('10ms', animate('400ms ease-out', style({ opacity: 1 })))], { optional: true }),
    ])
]);
export class HeaderFilterComponent {
    /**
     * @param {?} languagePack
     * @param {?} service
     * @param {?} cdr
     */
    constructor(languagePack, service, cdr) {
        this.languagePack = languagePack;
        this.service = service;
        this.cdr = cdr;
        this.filterChanged = new EventEmitter();
        this.filterList = [];
    }
    /**
     * @return {?}
     */
    get filters() {
        if (isNullorUndefined(this.filterList) === true || this.filterList.length === 0) {
            this.filterList = [];
            this.addNewFilter(this.field.type || 'text');
        }
        return this.filterList;
    }
    /**
     * @param {?} values
     * @return {?}
     */
    set filters(values) {
        this.filterList = values;
    }
    /**
     * @return {?}
     */
    get hasValue() {
        return this.filters && this.filters.filter((/**
         * @param {?} f
         * @return {?}
         */
        f => f.hasValue() === true)).length > 0;
    }
    /**
     * @return {?}
     */
    get showTrigger() {
        if (this.menu === undefined) {
            return false;
        }
        else {
            return this.menu.menuOpen || this.hasValue;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.eventsSubscription) {
            this.eventsSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (isNullorUndefined(this.filters)) {
            this.filters = [];
            this.addNewFilter(this.field.type);
        }
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    addNewFilter(type = 'text') {
        switch (type || 'text') {
            case 'text': {
                this.filterList.push(new TextFilter(this.languagePack));
                break;
            }
            case 'number': {
                this.filterList.push(new NumberFilter(this.languagePack));
                break;
            }
            case 'date': {
                // this.compare = new DateCompare(service);
                break;
            }
            case 'boolean': {
                // this.compare = new BooleanCompare(service);
                break;
            }
            default: this.filterList.push(new TextFilter(this.languagePack));
        }
        this.filters[this.filters.length - 1].selectedIndex = 0;
        return this.filters[this.filters.length - 1];
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.menu) {
            this.eventsSubscription = this.menu.menuOpened.subscribe((/**
             * @return {?}
             */
            () => this.focusToLastInput()));
        }
    }
    /**
     * @return {?}
     */
    focusToLastInput() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.filterInputList.length > 0) {
                this.filterInputList.last.focus();
            }
        }));
    }
    /**
     * @param {?} index
     * @param {?} action
     * @return {?}
     */
    filterAction_OnClick(index, action) {
        if (action === 0 || action === 1) { // and or
            this.filters[index].type = action === 0 ? 'and' : 'or';
            if (this.filters.length === index + 1) {
                this.addNewFilter(this.field.type);
                this.focusToLastInput();
            }
        }
        else if (action === 2 && this.filters.length > 1) { // delete
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.filters.splice(index, 1);
                this.cdr.detectChanges();
                this.focusToLastInput();
            })); // bug for delete filter item(unwanted reaction close menu)
        }
    }
    /**
     * @return {?}
     */
    clearColumn_OnClick() {
        this.filterList = [];
        this.filterChanged.emit(this.filterList);
    }
    /**
     * @return {?}
     */
    applyFilter_OnClick() {
        this.filterChanged.emit(this.filterList);
    }
}
HeaderFilterComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'header-filter',
                template: "<ng-content></ng-content>\r\n\r\n<mat-menu filter-event #filterMenu=\"matMenu\" class=\"menu\" >\r\n  <ng-template matMenuContent>\r\n\r\n  <div filter-event class=\"menu-title\">\r\n    {{field?.header}}\r\n  </div>\r\n  <div [@listAnimation]=\"filters.length\" filter-event *ngFor=\"let filter of filters; let index = index\" class=\"filter-panel\">\r\n\r\n    <mat-form-field>\r\n      <mat-select [value]=\"filter.selectedIndex\" [panelClass]=\"'mat-elevation-z10'\" (selectionChange)=\"filter.selectedIndex = $event.value;\" placeholder='Conditions' (keyup.enter)=\"applyFilter_OnClick()\">\r\n        <mat-option *ngFor=\"let op of filter.getOperations(); let selectedIndex=index\" [value]=\"selectedIndex\">\r\n          {{ op.text }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <div *ngFor=\"let ctrl of filter?.parameters\">\r\n      <mat-form-field class=\"input-field\">\r\n        <mat-label>{{ctrl.text}}</mat-label>\r\n        <input matInput #filterInput=\"matInput\" [(ngModel)]=\"ctrl.value\" [placeholder]=\"\" (keyup.enter)=\"applyFilter_OnClick()\" autocomplete=\"off\"/>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div class=\"or-and\">\r\n      <span *ngIf=\"filters?.length !== index+1\" class=\"selected-filter-type\">{{ filter?.type === 'and' ? languagePack.filterLabels.And : languagePack.filterLabels.Or}}</span>\r\n      <span class=\"svg\">\r\n        <mat-icon (click)=\"filterAction_OnClick(index,0)\">add</mat-icon>\r\n      </span>\r\n      <span class=\"svg\">\r\n        <mat-icon (click)=\"filterAction_OnClick(index,1)\" style=\"transform: rotate(90deg);\">drag_handle</mat-icon>\r\n      </span>\r\n      <span class=\"svg\">\r\n        <mat-icon (click)=\"filterAction_OnClick(index,2)\">clear</mat-icon>\r\n      </span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div filter-event class=\"menu-action\">\r\n    <button mat-raised-button (click)=\"clearColumn_OnClick()\">{{ languagePack.filterLabels.Clear }}</button>\r\n    <button mat-raised-button color=\"primary\" (click)=\"applyFilter_OnClick()\">{{ languagePack.filterLabels.Search}}</button>\r\n  </div>\r\n</ng-template>\r\n</mat-menu>\r\n\r\n<span class=\"trigger\" [matMenuTriggerFor]=\"filterMenu\" *ngIf=\"field.filterable !== false\">\r\n  <mat-icon>filter_list</mat-icon>\r\n</span>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [listAnimation],
                styles: ["@media print{.printpreview{background-color:#fff;position:fixed;width:100%;height:auto;z-index:99999999;margin:0;padding:0;top:0;left:0;overflow:visible;display:block}}.disable-backdrop-click .cdk-overlay-backdrop.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing{pointer-events:none}:host{display:flex;align-items:center;width:100%;align-self:stretch}.trigger{color:rgba(0,0,0,.3);display:flex;opacity:0;transform:translateY(-5px);cursor:pointer;transition-duration:.4s;transition-property:opacity,transform;position:sticky;right:0;z-index:1;padding-left:0 8px}:host.has-value .trigger{color:rgba(0,0,0,.54)}:host.show-trigger .trigger,:host:hover .trigger{opacity:1;transform:translateY(-1px)}::ng-deep.mat-menu-content:not(:empty){padding:0!important}.mat-menu-item-highlighted:not([disabled]),.mat-menu-item.cdk-keyboard-focused:not([disabled]),.mat-menu-item.cdk-program-focused:not([disabled]),.mat-menu-item:hover:not([disabled]){background-color:inherit}.input-field{margin-top:-15px}.menu-title{font-weight:bolder;top:-8px;position:sticky;background-color:#fff;z-index:1}.menu-action{position:sticky;bottom:-8px;padding-top:10px;padding-bottom:0;background-color:#fff}.menu-action button{width:calc(50% - 10px);margin:5px;border-radius:10px}.filter-panel{border-radius:5px;background-color:#fdfbfb;border:1px solid #efefef;transition:.5s;padding:5px;overflow:hidden;font-size:14px;margin-top:10px;display:flex;flex-direction:column}.filter-panel:nth-child(2){margin-top:0!important}.filter-panel:hover{border:1px solid #d1d1d1}.filter-panel:hover .svg{opacity:1;transform:translateY(-1px)}.or-and{display:inherit!important;text-align:right;margin:-12px 0;height:35px;cursor:inherit;font-size:12px}.svg{opacity:0;transform:translateY(-5px);transition-duration:.4s;transition-property:opacity,transform;margin-left:5px;padding:2px;border-radius:5px;color:#4c4c4c;cursor:pointer;display:inline-block!important;height:24px}.svg mat-icon{margin:0;vertical-align:top;border-radius:5px}.svg mat-icon:hover{color:#fff;background-color:#89898a}.svg:hover{background-color:#f8f8f8}.selected-filter-type{float:left;color:#fff;background-color:#89898a;border-radius:5px;padding:0 4px;line-height:24px}::ng-deep .menu{padding:8px;-webkit-user-select:none;-moz-user-select:none;user-select:none}"]
            }] }
];
/** @nocollapse */
HeaderFilterComponent.ctorParameters = () => [
    { type: TableIntl },
    { type: TableService },
    { type: ChangeDetectorRef }
];
HeaderFilterComponent.propDecorators = {
    field: [{ type: Input }],
    filterChanged: [{ type: Output }],
    filterInputList: [{ type: ContentChildren, args: ['filterInput',] }],
    menu: [{ type: ViewChild, args: [MatMenuTrigger, { static: true },] }],
    filters: [{ type: Input }],
    hasValue: [{ type: HostBinding, args: ['class.has-value',] }],
    showTrigger: [{ type: HostBinding, args: ['class.show-trigger',] }]
};
if (false) {
    /** @type {?} */
    HeaderFilterComponent.prototype.field;
    /** @type {?} */
    HeaderFilterComponent.prototype.filterChanged;
    /** @type {?} */
    HeaderFilterComponent.prototype.filterInputList;
    /** @type {?} */
    HeaderFilterComponent.prototype.menu;
    /**
     * @type {?}
     * @private
     */
    HeaderFilterComponent.prototype.filterList;
    /**
     * @type {?}
     * @private
     */
    HeaderFilterComponent.prototype.eventsSubscription;
    /** @type {?} */
    HeaderFilterComponent.prototype.languagePack;
    /** @type {?} */
    HeaderFilterComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    HeaderFilterComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLWZpbHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9keW5hbWljLW1hdC10YWJsZS8iLCJzb3VyY2VzIjpbImxpYi9keW5hbWljLW1hdC10YWJsZS9leHRlbnNpb25zL2ZpbHRlci9oZWFkZXItZmlsdGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBaUIsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUNqRixLQUFLLEVBQUUsWUFBWSxFQUFVLGlCQUFpQixFQUFFLFNBQVMsRUFBMkIsZUFBZSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBJLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXZELE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzFGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUU5RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7O01BR2xELGFBQWEsR0FBRyxPQUFPLENBQUMsZUFBZSxFQUFFO0lBQzdDLFVBQVUsQ0FBQyxTQUFTLEVBQUU7UUFDcEIsS0FBSyxDQUFDLFFBQVEsRUFDWixDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVB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SUFDMUMsbURBQXlDOztJQTJCN0IsNkNBQThCOztJQUFFLHdDQUE0Qjs7Ozs7SUFBRSxvQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBIb3N0QmluZGluZywgT3V0cHV0LCBWaWV3Q2hpbGQsXHJcbiAgICAgICAgIElucHV0LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIFF1ZXJ5TGlzdCwgVmlld0NoaWxkcmVuLCBPbkRlc3Ryb3ksIENvbnRlbnRDaGlsZHJlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUYWJsZUZpZWxkIH0gZnJvbSAnLi8uLi8uLi8uLi9tb2RlbHMvdGFibGUtZmllbGQubW9kZWwnO1xyXG5pbXBvcnQgeyBUYWJsZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9keW5hbWljLW1hdC10YWJsZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVGV4dEZpbHRlciB9IGZyb20gJy4vY29tcGFyZS90ZXh0LWZpbHRlcic7XHJcbmltcG9ydCB7IE51bWJlckZpbHRlciB9IGZyb20gJy4vY29tcGFyZS9udW1iZXItZmlsdGVyJztcclxuaW1wb3J0IHsgQWJzdHJhY3RGaWx0ZXIgfSBmcm9tICcuL2NvbXBhcmUvYWJzdHJhY3QtZmlsdGVyJztcclxuaW1wb3J0IHsgdHJhbnNpdGlvbiwgdHJpZ2dlciwgcXVlcnksIHN0eWxlLCBzdGFnZ2VyLCBhbmltYXRlIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XHJcbmltcG9ydCB7IFRhYmxlSW50bCB9IGZyb20gJy4uLy4uLy4uL2ludGVybmF0aW9uYWwvdGFibGUtSW50bCc7XHJcbmltcG9ydCB7IE1hdElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvaW5wdXQnO1xyXG5pbXBvcnQgeyBNYXRNZW51VHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL21lbnUnO1xyXG5pbXBvcnQgeyBpc051bGxvclVuZGVmaW5lZCB9IGZyb20gJy4uLy4uLy4uL2NvcmVzL3R5cGUnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuXHJcbmNvbnN0IGxpc3RBbmltYXRpb24gPSB0cmlnZ2VyKCdsaXN0QW5pbWF0aW9uJywgW1xyXG4gIHRyYW5zaXRpb24oJyogPD0+IConLCBbXHJcbiAgICBxdWVyeSgnOmVudGVyJyxcclxuICAgICAgW3N0eWxlKHsgb3BhY2l0eTogMCB9KSwgc3RhZ2dlcignMTBtcycsIGFuaW1hdGUoJzQwMG1zIGVhc2Utb3V0Jywgc3R5bGUoeyBvcGFjaXR5OiAxIH0pKSldLFxyXG4gICAgICB7IG9wdGlvbmFsOiB0cnVlIH1cclxuICAgICksXHJcbiAgXSlcclxuXSk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXHJcbiAgc2VsZWN0b3I6ICdoZWFkZXItZmlsdGVyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vaGVhZGVyLWZpbHRlci5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vaGVhZGVyLWZpbHRlci5jb21wb25lbnQuc2NzcyddLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIGFuaW1hdGlvbnM6IFtsaXN0QW5pbWF0aW9uXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgSGVhZGVyRmlsdGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xyXG4gIEBJbnB1dCgpIGZpZWxkPzogVGFibGVGaWVsZDxhbnk+O1xyXG4gIEBPdXRwdXQoKSBmaWx0ZXJDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8QWJzdHJhY3RGaWx0ZXJbXT4gPSBuZXcgRXZlbnRFbWl0dGVyPEFic3RyYWN0RmlsdGVyW10+KCk7XHJcblxyXG4gIEBDb250ZW50Q2hpbGRyZW4oJ2ZpbHRlcklucHV0JykgZmlsdGVySW5wdXRMaXN0ICE6IFF1ZXJ5TGlzdDxNYXRJbnB1dD47XHJcbiAgQFZpZXdDaGlsZChNYXRNZW51VHJpZ2dlciwgeyBzdGF0aWM6IHRydWUgfSkgbWVudSAhOiBNYXRNZW51VHJpZ2dlcjtcclxuXHJcbiAgcHJpdmF0ZSBmaWx0ZXJMaXN0OiBBYnN0cmFjdEZpbHRlcltdID0gW107XHJcbiAgcHJpdmF0ZSBldmVudHNTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuICBASW5wdXQoKVxyXG4gIGdldCBmaWx0ZXJzKCk6IEFic3RyYWN0RmlsdGVyW10ge1xyXG4gICAgaWYgKCBpc051bGxvclVuZGVmaW5lZCh0aGlzLmZpbHRlckxpc3QpID09PSB0cnVlIHx8IHRoaXMuZmlsdGVyTGlzdC5sZW5ndGggPT09IDApIHtcclxuICAgICAgdGhpcy5maWx0ZXJMaXN0ID0gW107XHJcbiAgICAgIHRoaXMuYWRkTmV3RmlsdGVyKHRoaXMuZmllbGQudHlwZSB8fCAndGV4dCcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyTGlzdDtcclxuICB9XHJcbiAgc2V0IGZpbHRlcnModmFsdWVzOiBBYnN0cmFjdEZpbHRlcltdKSB7XHJcbiAgICB0aGlzLmZpbHRlckxpc3QgPSB2YWx1ZXM7XHJcbiAgfVxyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmhhcy12YWx1ZScpXHJcbiAgZ2V0IGhhc1ZhbHVlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZmlsdGVycyAmJiB0aGlzLmZpbHRlcnMuZmlsdGVyKCBmID0+IGYuaGFzVmFsdWUoKSA9PT0gdHJ1ZSkubGVuZ3RoID4gMDtcclxuICB9XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3Muc2hvdy10cmlnZ2VyJylcclxuICBnZXQgc2hvd1RyaWdnZXIoKTogYm9vbGVhbiB7XHJcbiAgICBpZih0aGlzLm1lbnUgPT09IHVuZGVmaW5lZCkgeyBcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMubWVudS5tZW51T3BlbiB8fCB0aGlzLmhhc1ZhbHVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIGxhbmd1YWdlUGFjazogVGFibGVJbnRsLCBwdWJsaWMgc2VydmljZTogVGFibGVTZXJ2aWNlLCBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQgeyAgICBcclxuICAgIGlmICh0aGlzLmV2ZW50c1N1YnNjcmlwdGlvbikge1xyXG4gICAgICB0aGlzLmV2ZW50c1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICBpZiAoaXNOdWxsb3JVbmRlZmluZWQodGhpcy5maWx0ZXJzKSkge1xyXG4gICAgICB0aGlzLmZpbHRlcnMgPSBbXTtcclxuICAgICAgdGhpcy5hZGROZXdGaWx0ZXIodGhpcy5maWVsZC50eXBlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFkZE5ld0ZpbHRlcih0eXBlOiBzdHJpbmcgPSAndGV4dCcpIHtcclxuICAgIHN3aXRjaCAodHlwZSB8fCAndGV4dCcpIHtcclxuICAgICAgY2FzZSAndGV4dCc6IHtcclxuICAgICAgICB0aGlzLmZpbHRlckxpc3QucHVzaChuZXcgVGV4dEZpbHRlcih0aGlzLmxhbmd1YWdlUGFjaykpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ251bWJlcic6IHtcclxuICAgICAgICB0aGlzLmZpbHRlckxpc3QucHVzaChuZXcgTnVtYmVyRmlsdGVyKHRoaXMubGFuZ3VhZ2VQYWNrKSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnZGF0ZSc6IHtcclxuICAgICAgICAvLyB0aGlzLmNvbXBhcmUgPSBuZXcgRGF0ZUNvbXBhcmUoc2VydmljZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnYm9vbGVhbic6IHtcclxuICAgICAgICAvLyB0aGlzLmNvbXBhcmUgPSBuZXcgQm9vbGVhbkNvbXBhcmUoc2VydmljZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgZGVmYXVsdDogdGhpcy5maWx0ZXJMaXN0LnB1c2gobmV3IFRleHRGaWx0ZXIodGhpcy5sYW5ndWFnZVBhY2spKTtcclxuICAgIH1cclxuICAgIHRoaXMuZmlsdGVyc1t0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMV0uc2VsZWN0ZWRJbmRleCA9IDA7XHJcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJzW3RoaXMuZmlsdGVycy5sZW5ndGggLSAxXTtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIGlmICh0aGlzLm1lbnUpIHtcclxuICAgICAgdGhpcy5ldmVudHNTdWJzY3JpcHRpb24gPSB0aGlzLm1lbnUubWVudU9wZW5lZC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5mb2N1c1RvTGFzdElucHV0KCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZm9jdXNUb0xhc3RJbnB1dCgpIHtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5maWx0ZXJJbnB1dExpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHRoaXMuZmlsdGVySW5wdXRMaXN0Lmxhc3QuZm9jdXMoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmaWx0ZXJBY3Rpb25fT25DbGljayhpbmRleCwgYWN0aW9uKSB7XHJcbiAgICBpZiAoYWN0aW9uID09PSAwIHx8IGFjdGlvbiA9PT0gMSkgeyAvLyBhbmQgb3JcclxuICAgICAgdGhpcy5maWx0ZXJzW2luZGV4XS50eXBlID0gYWN0aW9uID09PSAwID8gJ2FuZCcgOiAnb3InO1xyXG4gICAgICBpZiAodGhpcy5maWx0ZXJzLmxlbmd0aCA9PT0gaW5kZXggKyAxKSB7XHJcbiAgICAgICAgdGhpcy5hZGROZXdGaWx0ZXIodGhpcy5maWVsZC50eXBlKTtcclxuICAgICAgICB0aGlzLmZvY3VzVG9MYXN0SW5wdXQoKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IDIgJiYgdGhpcy5maWx0ZXJzLmxlbmd0aCA+IDEpIHsgLy8gZGVsZXRlXHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZmlsdGVycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB0aGlzLmZvY3VzVG9MYXN0SW5wdXQoKTtcclxuICAgICAgfSk7IC8vIGJ1ZyBmb3IgZGVsZXRlIGZpbHRlciBpdGVtKHVud2FudGVkIHJlYWN0aW9uIGNsb3NlIG1lbnUpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbGVhckNvbHVtbl9PbkNsaWNrKCkge1xyXG4gICAgdGhpcy5maWx0ZXJMaXN0ID0gW107XHJcbiAgICB0aGlzLmZpbHRlckNoYW5nZWQuZW1pdCh0aGlzLmZpbHRlckxpc3QpO1xyXG4gIH1cclxuXHJcbiAgYXBwbHlGaWx0ZXJfT25DbGljaygpIHtcclxuICAgIHRoaXMuZmlsdGVyQ2hhbmdlZC5lbWl0KHRoaXMuZmlsdGVyTGlzdCk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuIl19