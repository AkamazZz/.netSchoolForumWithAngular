/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/filter/compare/text-filter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AbstractFilter } from './abstract-filter';
/** @type {?} */
const contains = 'a.toString().includes(b)';
/** @type {?} */
const equals = 'a.toString() === b.toString()';
/** @type {?} */
const startsWith = 'a.toString().startsWith(b)';
/** @type {?} */
const endsWith = 'a.toString().endsWith(b.toString())';
/** @type {?} */
const empty = '!a';
/** @type {?} */
const notEmpty = '!!a';
/** @type {?} */
const operations = [contains, equals, startsWith, endsWith, empty, notEmpty];
export class TextFilter extends AbstractFilter {
    /**
     * @param {?} languagePack
     */
    constructor(languagePack) {
        super();
        this.languagePack = languagePack;
        // tslint:disable-next-line:variable-name
        this._selectedIndex = null;
        this._selectedIndex = 0;
        if (TextFilter.operationList.length === 0) { // init for first time
            operations.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            fn => {
                TextFilter.operationList.push({ predicate: fn, text: null });
            }));
        }
        TextFilter.operationList[0].text = languagePack.filterLabels.TextContains; // contains //
        TextFilter.operationList[1].text = languagePack.filterLabels.TextEquals; // equals //
        TextFilter.operationList[2].text = languagePack.filterLabels.TextStartsWith; // startsWith //
        TextFilter.operationList[3].text = languagePack.filterLabels.TextEndsWith; // endsWith //
        TextFilter.operationList[4].text = languagePack.filterLabels.TextEmpty; // empty //
        TextFilter.operationList[5].text = languagePack.filterLabels.TextNotEmpty; // notEmpty //
    }
    /**
     * @return {?}
     */
    get selectedIndex() {
        return this._selectedIndex;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectedIndex(value) {
        this._selectedIndex = value;
        // init filter parameters
        if (value === 0 || value === 1 || value === 2 || value === 3) { // contains equals startsWith endsWith
            this.parameters = [{ value: '', text: this.languagePack.filterLabels.Text }];
        }
        else { // empty notEmpty
            this.parameters = null;
        }
    }
    /**
     * @return {?}
     */
    get selectedValue() {
        if (this._selectedIndex !== null) {
            return TextFilter.operationList[this._selectedIndex];
        }
        else {
            return null;
        }
    }
    /**
     * @return {?}
     */
    getOperations() {
        return TextFilter.operationList;
    }
    /**
     * @param {?} dynamicVariable
     * @return {?}
     */
    toString(dynamicVariable) {
        /** @type {?} */
        const a = '_a$';
        /** @type {?} */
        const b = '_b$';
        /** @type {?} */
        const predicate = this.selectedValue.predicate.replace('a', a).replace('b', b);
        /** @type {?} */
        const statement = predicate.replace(a, `${a}['${dynamicVariable}']?.toString()?.toLowerCase()`);
        // one static parameters equals  notEquals greaterThan lessThan //
        if (this._selectedIndex === 0 ||
            this._selectedIndex === 1 ||
            this._selectedIndex === 2 ||
            this._selectedIndex === 3) {
            /** @type {?} */
            const value = '\'' + (this.parameters[0].value !== null ? this.parameters[0].value.toLowerCase() : ' null ') + '\'';
            return statement.replace('_b$', value);
        }
        else { // without static parameters
            return statement;
        }
    }
    /**
     * @return {?}
     */
    toPrint() {
        return TextFilter.operationList[this._selectedIndex].text + ' ' + this.parameters[0].value + ' ' + (this.type || '') + ' ';
    }
    /**
     * @return {?}
     */
    toSql() {
        return TextFilter.sql[this._selectedIndex].replace('[*]', (this.parameters[0].value || '')) + (this.type || '') + ' ';
    }
}
TextFilter.sql = ['LIKE "%[*]%"', '= "[*]"', 'LIKE "%[*]"', 'LIKE "[*]%"', 'IS NULL', 'IS NOT NULL'];
TextFilter.operationList = [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    TextFilter.sql;
    /**
     * @type {?}
     * @private
     */
    TextFilter.operationList;
    /**
     * @type {?}
     * @private
     */
    TextFilter.prototype._selectedIndex;
    /** @type {?} */
    TextFilter.prototype.languagePack;
}
//# sourceMappingURL=data:application/json;base64,