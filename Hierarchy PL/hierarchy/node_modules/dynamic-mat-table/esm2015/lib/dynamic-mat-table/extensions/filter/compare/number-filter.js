/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/filter/compare/number-filter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AbstractFilter } from './abstract-filter';
/** @type {?} */
const equals = 'a === b';
/** @type {?} */
const notEquals = 'a !== b';
/** @type {?} */
const greaterThan = 'a > b';
/** @type {?} */
const lessThan = 'a < b';
/** @type {?} */
const empty = '!a';
/** @type {?} */
const notEmpty = '!!a';
/** @type {?} */
const operations = [equals, notEquals, greaterThan, lessThan, empty, notEmpty];
export class NumberFilter extends AbstractFilter {
    // private languageText: LanguagePack;
    /**
     * @param {?} languagePack
     */
    constructor(languagePack) {
        super();
        this.languagePack = languagePack;
        // tslint:disable-next-line:variable-name
        this._selectedIndex = null;
        if (NumberFilter.operationList.length === 0) {
            operations.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            fn => {
                NumberFilter.operationList.push({ predicate: fn, text: null });
            }));
        }
        NumberFilter.operationList[0].text = languagePack.filterLabels.NumberEquals; // equals //
        NumberFilter.operationList[1].text = languagePack.filterLabels.NumberNotEquals; // notEquals //
        NumberFilter.operationList[2].text = languagePack.filterLabels.NumberGreaterThan; // greaterThan //
        NumberFilter.operationList[3].text = languagePack.filterLabels.NumberLessThan; // lessThan //
        NumberFilter.operationList[4].text = languagePack.filterLabels.NumberEmpty; // empty //
        NumberFilter.operationList[5].text = languagePack.filterLabels.NumberNotEmpty; // notEmpty //
    }
    /**
     * @return {?}
     */
    get selectedIndex() {
        return this._selectedIndex;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectedIndex(value) {
        this._selectedIndex = value;
        // init filter parameters
        if (value === 0 || value === 1 || value === 2 || value === 3) { // equals notEquals greaterThan lessThan
            this.parameters = [{ value: null, text: this.languagePack.filterLabels.Number }];
        }
        else { // empty notEmpty
            this.parameters = null;
        }
    }
    /**
     * @return {?}
     */
    get selectedValue() {
        if (this._selectedIndex !== null) {
            return NumberFilter.operationList[this._selectedIndex];
        }
        else {
            return null;
        }
    }
    /**
     * @return {?}
     */
    getOperations() {
        return NumberFilter.operationList;
    }
    /**
     * @param {?} dynamicVariable
     * @return {?}
     */
    toString(dynamicVariable) {
        /** @type {?} */
        const a = '_a$';
        /** @type {?} */
        const b = '_b$';
        /** @type {?} */
        const predicate = this.selectedValue.predicate.replace('a', a).replace('b', b);
        /** @type {?} */
        const statement = predicate.replace(a, `${a}['${dynamicVariable}']`);
        // one static variable (equals, notEquals,greaterThan,lessThan)
        if (this._selectedIndex === 0 ||
            this._selectedIndex === 1 ||
            this._selectedIndex === 2 ||
            this._selectedIndex === 3) {
            /** @type {?} */
            const value = this.parameters[0].value ? this.parameters[0].value.toString() : ' null ';
            return statement.replace(b, value);
        }
        else { // none static variable (empty, notEmpty)
            return statement;
        }
    }
    /**
     * @return {?}
     */
    toPrint() {
        return NumberFilter.operationList[this._selectedIndex].text + ' ' + this.parameters[0].value + ' ' + (this.type || '') + ' ';
    }
    /**
     * @return {?}
     */
    toSql() {
        return NumberFilter.sql[this._selectedIndex] + ' ' + (this.parameters[0].value || '') + ' ' + (this.type || '') + ' ';
    }
}
NumberFilter.sql = ['=', '<>', '>', '<', 'IS NULL', 'IS NOT NULL'];
NumberFilter.operationList = [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NumberFilter.sql;
    /**
     * @type {?}
     * @private
     */
    NumberFilter.operationList;
    /**
     * @type {?}
     * @private
     */
    NumberFilter.prototype._selectedIndex;
    /** @type {?} */
    NumberFilter.prototype.languagePack;
}
//# sourceMappingURL=data:application/json;base64,