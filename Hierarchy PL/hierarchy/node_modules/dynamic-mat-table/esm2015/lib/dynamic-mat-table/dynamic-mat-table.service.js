/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/dynamic-mat-table.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class TableService {
    constructor() { }
    /**
     * ********************************** Local Export ****************************************
     * @return {?}
     */
    static getFormattedTime() {
        /** @type {?} */
        const today = new Date();
        /** @type {?} */
        const y = today.getFullYear();
        /** @type {?} */
        const m = today.getMonth() + 1;
        /** @type {?} */
        const d = today.getDate();
        /** @type {?} */
        const h = today.getHours();
        /** @type {?} */
        const mi = today.getMinutes();
        /** @type {?} */
        const s = today.getSeconds();
        return y + "-" + m + "-" + d + "-" + h + "-" + mi + "-" + s;
    }
    // private downloadBlob(blob: any, filename: string) {
    //   if (navigator.msSaveBlob) { // IE 10+
    //     navigator.msSaveBlob(blob, filename);
    //   } else {
    //     const link = document.createElement('a');
    //     if (link.download !== undefined) {
    //       // Browsers that support HTML5 download attribute
    //       const link = window.document.createElement('a');
    //       const date = new Date();
    //       link.className = 'download' + date.getUTCFullYear() + date.getUTCMonth() + date.getUTCSeconds();
    //       link.setAttribute('href', blob);
    //       link.setAttribute('download', filename);
    //       link.style.visibility = 'hidden';
    //       link.click();
    //       // setTimeout(() => {
    //       //   const g = document.body.getElementsByClassName(link.className);
    //       //   document.body.removeChild(link);
    //       // });
    //     }
    //   }
    // }
    /**
     * @private
     * @param {?} blob
     * @param {?} filename
     * @return {?}
     */
    downloadBlob(blob, filename) {
        if (navigator.msSaveBlob) {
            // IE 10+
            navigator.msSaveBlob(blob, filename);
        }
        else {
            /** @type {?} */
            const link = document.createElement("a");
            if (link.download !== undefined) {
                // Browsers that support HTML5 download attribute
                /** @type {?} */
                const url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", filename);
                link.style.visibility = "hidden";
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }
    }
    /**
     * @template T
     * @param {?} columns
     * @param {?} rows
     * @param {?} selectionModel
     * @param {?=} filename
     * @return {?}
     */
    exportToCsv(columns, rows, selectionModel, filename = "") {
        filename = filename === "" ? this.tableName + TableService.getFormattedTime() + ".csv" : filename;
        if (!rows || !rows.length) {
            return;
        }
        /** @type {?} */
        const fields = columns.filter((/**
         * @param {?} c
         * @return {?}
         */
        (c) => c.exportable !== false && c.display !== 'hiden'));
        /** @type {?} */
        const separator = ",";
        /** @type {?} */
        const CR_LF = "\n";
        //'\u0D0A';
        /** @type {?} */
        const keys = fields.map((/**
         * @param {?} f
         * @return {?}
         */
        f => f.name));
        /** @type {?} */
        const headers = fields.map((/**
         * @param {?} f
         * @return {?}
         */
        f => f.header));
        /** @type {?} */
        const csvContent = headers.join(separator) + CR_LF +
            rows
                .map((/**
             * @param {?} row
             * @return {?}
             */
            (row) => {
                return fields.map((/**
                 * @param {?} f
                 * @return {?}
                 */
                (f) => {
                    /** @type {?} */
                    let cell = f.toExport(row, "csv") || "";
                    cell = cell instanceof Date ? cell.toLocaleString() : cell.toString().replace(/"/g, '""');
                    if (cell.search(/("|,|\n)/g) >= 0) {
                        cell = `"${cell}"`;
                    }
                    return cell;
                })).join(separator);
            })).join(CR_LF);
        /** @type {?} */
        const blob = new Blob([
            new Uint8Array([0xEF, 0xBB, 0xBF]),
            csvContent
        ], { type: 'text/csv;charset=utf-8' });
        this.downloadBlob(blob, filename);
    }
    /**
     * @param {?} rows
     * @param {?=} filename
     * @return {?}
     */
    exportToJson(rows, filename = "") {
        filename =
            filename === ""
                ? this.tableName + TableService.getFormattedTime() + ".json"
                : filename;
        /** @type {?} */
        const blob = new Blob([JSON.stringify(rows)], {
            type: "text/csv;charset=utf-8;",
        });
        this.downloadBlob(blob, filename);
    }
    /**
     * ********************************** Save Setting into storage ****************************************
     * @param {?} columnInfo
     * @param {?=} saveName
     * @return {?}
     */
    loadSavedColumnInfo(columnInfo, saveName) {
        // Only load if a save name is passed in
        if (saveName) {
            if (!localStorage) {
                return;
            }
            /** @type {?} */
            const loadedInfo = localStorage.getItem(`${saveName}-columns`);
            if (loadedInfo) {
                return JSON.parse(loadedInfo);
            }
            this.saveColumnInfo(columnInfo);
            return columnInfo;
        }
    }
    /**
     * @param {?} columnInfo
     * @param {?=} saveName
     * @return {?}
     */
    saveColumnInfo(columnInfo, saveName = this.tableName) {
        // console.log(saveName);
        if (saveName) {
            if (!localStorage) {
                return;
            }
            localStorage.setItem(`${saveName}-columns`, JSON.stringify(columnInfo));
        }
    }
}
TableService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root",
            },] }
];
/** @nocollapse */
TableService.ctorParameters = () => [];
/** @nocollapse */ TableService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TableService_Factory() { return new TableService(); }, token: TableService, providedIn: "root" });
if (false) {
    /** @type {?} */
    TableService.prototype.tableName;
}
//# sourceMappingURL=data:application/json;base64,