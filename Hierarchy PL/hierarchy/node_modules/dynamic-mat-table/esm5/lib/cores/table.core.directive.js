/**
 * @fileoverview added by tsickle
 * Generated from: lib/cores/table.core.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { TableVirtualScrollDataSource } from './table-data-source';
import { ViewChild, Input, Output, EventEmitter, HostBinding, ChangeDetectorRef } from '@angular/core';
import { titleCase } from '../utilies/text.utils';
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { moveItemInArray } from '@angular/cdk/drag-drop';
import { SelectionModel } from '@angular/cdk/collections';
import { TableService } from '../dynamic-mat-table/dynamic-mat-table.service';
import { MatSort } from '@angular/material/sort';
import { MatPaginator } from '@angular/material/paginator';
import { MatTable } from '@angular/material/table';
import { Directive } from '@angular/core';
import { clone, getObjectProp, isNullorUndefined } from './type';
import { BehaviorSubject } from 'rxjs';
/**
 * @template T
 */
var TableCoreDirective = /** @class */ (function () {
    function TableCoreDirective(tableService, cdr) {
        this.tableService = tableService;
        this.cdr = cdr;
        this.backgroundColor = null;
        this.contextMenuItems = [];
        this.expandColumn = [];
        this.defaultWidth = null;
        this.minWidth = 120;
        /**
         * ************************************ I/O parameters ********************************
         */
        this.printConfig = {};
        this.rowHeight = 48;
        this.headerHeight = 56;
        this.footerHeight = 48;
        this.headerEnable = true;
        this.footerEnable = false;
        // tslint:disable-next-line: no-output-on-prefix
        this.onTableEvent = new EventEmitter();
        this.onRowEvent = new EventEmitter();
        this.settingChange = new EventEmitter();
        this.paginationChange = new EventEmitter();
        // Variables //
        this.progressColumn = [];
        this.displayedColumns = [];
        this.tvsDataSource = new TableVirtualScrollDataSource([]);
        this._rowSelectionModel = new SelectionModel(true, []);
        this._tablePagination = {};
        this.tablePagingMode = 'none';
        this.viewportClass = 'viewport-with-pagination';
        this.showProgress = true;
        this.tableSetting = {
            direction: 'ltr',
            columnSetting: null,
            visibaleActionMenu: null
        };
    }
    Object.defineProperty(TableCoreDirective.prototype, "direction", {
        get: /**
         * @return {?}
         */
        function () {
            var _a;
            return (_a = this.tableSetting) === null || _a === void 0 ? void 0 : _a.direction;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.tableSetting.direction = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableCoreDirective.prototype, "ScrollStrategyType", {
        get: /**
         * @return {?}
         */
        function () {
            return this.tableSetting.scrollStrategy;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.viewport['_scrollStrategy'].scrollStrategyMode = value;
            this.tableSetting.scrollStrategy = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableCoreDirective.prototype, "pagingMode", {
        get: /**
         * @return {?}
         */
        function () {
            return this.tablePagingMode;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.tablePagingMode = value;
            this.updatePagination();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableCoreDirective.prototype, "pagination", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tablePagination;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value !== null) {
                this._tablePagination = value;
                if (isNullorUndefined(this._tablePagination.pageSizeOptions)) {
                    this._tablePagination.pageSizeOptions = [5, 10, 25, 100];
                }
                if (isNullorUndefined(this._tablePagination.pageSizeOptions)) {
                    this._tablePagination.pageSize = this._tablePagination.pageSizeOptions[0];
                }
                this.updatePagination();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableCoreDirective.prototype, "rowSelectionModel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rowSelectionModel;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!isNullorUndefined(value)) {
                if (this._rowSelectionMode && value && this._rowSelectionMode !== 'none') {
                    this._rowSelectionMode = (value.isMultipleSelection() === true ? 'multi' : 'single');
                }
                this._rowSelectionModel = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableCoreDirective.prototype, "rowSelectionMode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rowSelectionMode;
        },
        set: /**
         * @param {?} selection
         * @return {?}
         */
        function (selection) {
            selection = selection || 'none';
            this._rowSelectionModel = selection === 'none' ? null : new SelectionModel(selection === 'multi', []);
            if (selection === 'none' && this._rowSelectionMode !== 'none' && this.displayedColumns[0] === 'row-checkbox') {
                this.displayedColumns.shift();
                this.saveSetting(this.tableSetting, false);
            }
            else if (selection !== 'none' && this._rowSelectionMode === 'none') {
                this.displayedColumns.unshift('row-checkbox');
                this.saveSetting(this.tableSetting, false);
            }
            this._rowSelectionMode = selection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableCoreDirective.prototype, "tableName", {
        get: /**
         * @return {?}
         */
        function () {
            return this.tableService.tableName;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.tableService.tableName = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableCoreDirective.prototype, "showProgress", {
        get: /**
         * @return {?}
         */
        function () {
            return this.progressColumn.length > 0;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.progressColumn = [];
            if (value === true) {
                this.progressColumn.push('progress');
            }
        },
        enumerable: true,
        configurable: true
    });
    // private totalRecord = 0;
    // @Input() 
    // get dataSource() {    
    //   if(isNullorUndefined(this.tvsDataSource)) {      
    //     return null;
    //   }    
    //   if (this.totalRecord !== this.tvsDataSource.allData.length) {      
    //     this.initSystemField(this.tvsDataSource.allData);
    //   }
    //   return this.tvsDataSource;
    // } 
    // set dataSource(value: TableVirtualScrollDataSource<T>) {           
    //   this.clear();    
    //   if (!isNullorUndefined(value)) {      
    //     this.initSystemField(value.data);
    //     this.tvsDataSource = value;
    //     this.tvsDataSource.sort = this.sort;
    //     (this.tvsDataSource as any)._paginator = value;      
    //   } 
    // }
    // private totalRecord = 0;
    // @Input() 
    // get dataSource() {    
    //   if(isNullorUndefined(this.tvsDataSource)) {      
    //     return null;
    //   }    
    //   if (this.totalRecord !== this.tvsDataSource.allData.length) {      
    //     this.initSystemField(this.tvsDataSource.allData);
    //   }
    //   return this.tvsDataSource;
    // } 
    // set dataSource(value: TableVirtualScrollDataSource<T>) {           
    //   this.clear();    
    //   if (!isNullorUndefined(value)) {      
    //     this.initSystemField(value.data);
    //     this.tvsDataSource = value;
    //     this.tvsDataSource.sort = this.sort;
    //     (this.tvsDataSource as any)._paginator = value;      
    //   } 
    // }
    /**
     * @protected
     * @param {?} data
     * @return {?}
     */
    TableCoreDirective.prototype.initSystemField = 
    // private totalRecord = 0;
    // @Input() 
    // get dataSource() {    
    //   if(isNullorUndefined(this.tvsDataSource)) {      
    //     return null;
    //   }    
    //   if (this.totalRecord !== this.tvsDataSource.allData.length) {      
    //     this.initSystemField(this.tvsDataSource.allData);
    //   }
    //   return this.tvsDataSource;
    // } 
    // set dataSource(value: TableVirtualScrollDataSource<T>) {           
    //   this.clear();    
    //   if (!isNullorUndefined(value)) {      
    //     this.initSystemField(value.data);
    //     this.tvsDataSource = value;
    //     this.tvsDataSource.sort = this.sort;
    //     (this.tvsDataSource as any)._paginator = value;      
    //   } 
    // }
    /**
     * @protected
     * @param {?} data
     * @return {?}
     */
    function (data) {
        data = data.map((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            item.id = index;
            item.option = item.option || {};
            return item;
        }));
    };
    Object.defineProperty(TableCoreDirective.prototype, "expandComponent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._expandComponent;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._expandComponent = value;
            if (this._expandComponent !== null && this._expandComponent !== undefined) {
                this.expandColumn = ['expandedDetail'];
            }
            else {
                this.expandColumn = [];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableCoreDirective.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this.tableColumns;
        },
        set: /**
         * @param {?} fields
         * @return {?}
         */
        function (fields) {
            var _this = this;
            (fields || []).forEach((/**
             * @param {?} f
             * @param {?} i
             * @return {?}
             */
            function (f, i) {
                // key name error //
                if (f.name.toLowerCase() === 'id') {
                    throw 'Field name is reserved.["id"]';
                }
                /** @type {?} */
                var settingFields = (_this.tableSetting.columnSetting || []).filter((/**
                 * @param {?} s
                 * @return {?}
                 */
                function (s) { return s.name === f.name; }));
                /** @type {?} */
                var settingField = settingFields.length > 0 ? settingFields[0] : null;
                // default value for fields
                f.printable = f.printable || true;
                f.exportable = f.exportable || true;
                f.toExport = f.toExport || ((/**
                 * @param {?} value
                 * @param {?} type
                 * @return {?}
                 */
                function (value, type) { return typeof value === 'object' ? null : value || ''; }));
                f.toPrint = (/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) { return typeof value === 'object' ? null : value || ''; });
                f.enableContextMenu = f.enableContextMenu || true;
                f.header = f.header || titleCase(f.name);
                f.display = getObjectProp('display', 'visible', settingField, f);
                f.filter = getObjectProp('filter', 'client-side', settingField, f);
                f.sort = getObjectProp('sort', 'client-side', settingField, f);
                f.sticky = getObjectProp('sticky', 'none', settingField, f);
                f.width = getObjectProp('width', _this.defaultWidth, settingField, f);
            }));
            this.tableColumns = fields;
            this.updateColumn();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TableCoreDirective.prototype.updateColumn = /**
     * @return {?}
     */
    function () {
        if (isNullorUndefined(this.tableSetting.columnSetting)) {
            this.tableSetting.columnSetting = clone(this.tableColumns);
            this.refreshTableSetting();
        }
        this.setDisplayedColumns();
    };
    /**************************************** Methods **********************************************/
    /**
     * ************************************* Methods *********************************************
     * @return {?}
     */
    TableCoreDirective.prototype.refreshTableSetting = /**
     * ************************************* Methods *********************************************
     * @return {?}
     */
    function () {
        // this.tableSetting = clone(this.tableSetting);
    };
    /**
     * @return {?}
     */
    TableCoreDirective.prototype.updatePagination = /**
     * @return {?}
     */
    function () {
        if (isNullorUndefined(this.tvsDataSource)) {
            return;
        }
        if (this.tablePagingMode === 'client-side' || this.tablePagingMode === 'server-side') {
            this.viewportClass = 'viewport-with-pagination';
            if (!isNullorUndefined(this.tvsDataSource.paginator)) {
                /** @type {?} */
                var dataLen = this.tvsDataSource.paginator.length;
                if (!isNullorUndefined(this._tablePagination.length) && this._tablePagination.length > dataLen) {
                    dataLen = this._tablePagination.length;
                }
                this.tvsDataSource.paginator.length = dataLen;
            }
        }
        else {
            this.viewportClass = 'viewport';
            if (((/** @type {?} */ (this.tvsDataSource)))._paginator !== undefined) {
                delete ((/** @type {?} */ (this.tvsDataSource)))._paginator;
            }
        }
        this.tvsDataSource.refreshFilterPredicate();
    };
    /**
     * @return {?}
     */
    TableCoreDirective.prototype.clear = /**
     * @return {?}
     */
    function () {
        if (!isNullorUndefined(this.tvsDataSource)) {
            if (this.viewport) {
                this.viewport.scrollTo({ top: 0, behavior: 'auto' });
            }
            this.tvsDataSource.clearData();
            this.expandedElement = null;
        }
        if (this._rowSelectionModel) {
            this._rowSelectionModel.clear();
        }
        this.cdr.detectChanges();
    };
    /**
     * @return {?}
     */
    TableCoreDirective.prototype.setDisplayedColumns = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.columns) {
            this.displayedColumns = [];
            this.columns.forEach((/**
             * @param {?} colunm
             * @param {?} index
             * @return {?}
             */
            function (colunm, index) {
                colunm.index = index;
                if (colunm.display === undefined || colunm.display === 'visible' || colunm.display === 'prevent-hidden') {
                    _this.displayedColumns.push(colunm.name);
                }
            }));
            //bugfixed because of double header show
            // if ((this._rowSelectionMode === 'multi' || this._rowSelectionMode === 'single') && this.displayedColumns.indexOf('row-checkbox') === -1) {
            //   this.displayedColumns.unshift('row-checkbox');
            // } 
            setTimeout((/**
             * @return {?}
             */
            function () {
                if ((_this._rowSelectionMode === 'multi' || _this._rowSelectionMode === 'single') && _this.displayedColumns.indexOf('row-checkbox') === -1) {
                    _this.displayedColumns.unshift('row-checkbox');
                }
            }), 0);
            if (this.tableSetting.visibleTableMenu !== false) {
                this.displayedColumns.push('table-menu');
            }
        }
        // this.updatePagination();
    };
    /************************************ Drag & Drop Column *******************************************/
    /**
     * ********************************* Drag & Drop Column ******************************************
     * @return {?}
     */
    TableCoreDirective.prototype.refreshGrid = /**
     * ********************************* Drag & Drop Column ******************************************
     * @return {?}
     */
    function () {
        this.cdr.detectChanges();
        this.table.renderRows();
    };
    /**
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    TableCoreDirective.prototype.moveRow = /**
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    function (from, to) {
        if (from >= 0 && from < this.tvsDataSource.data.length && to >= 0 && to < this.tvsDataSource.data.length) {
            this.tvsDataSource.data[from].id = to;
            this.tvsDataSource.data[to].id = from;
            moveItemInArray(this.tvsDataSource.data, from, to);
            this.tvsDataSource.data = Object.assign([], this.tvsDataSource.data);
        }
    };
    /**
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    TableCoreDirective.prototype.moveColumn = /**
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    function (from, to) {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            moveItemInArray(_this.columns, from, to);
            _this.refreshColumn(_this.columns);
        }));
    };
    /**
     * @param {?} columns
     * @return {?}
     */
    TableCoreDirective.prototype.refreshColumn = /**
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        var _this = this;
        if (this.viewport) {
            /** @type {?} */
            var currentOffset_1 = this.viewport.measureScrollOffset();
            this.columns = columns;
            this.setDisplayedColumns();
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.viewport.scrollTo({ top: currentOffset_1, behavior: 'auto' }); }), 0);
        }
    };
    /**
     * @param {?} tableSetting
     * @param {?=} raiseEvent
     * @return {?}
     */
    TableCoreDirective.prototype.saveSetting = /**
     * @param {?} tableSetting
     * @param {?=} raiseEvent
     * @return {?}
     */
    function (tableSetting, raiseEvent) {
        if (raiseEvent === void 0) { raiseEvent = false; }
        if (tableSetting !== null) {
            this.tableSetting = tableSetting;
            this.refreshColumn(tableSetting.columnSetting);
        }
        if (raiseEvent === true) {
            this.settingChange.emit(this.tableSetting);
        }
    };
    /************************************ Selection Table Row *******************************************/
    /** Whether the number of selected elements matches the total number of rows. */
    /************************************ Selection Table Row *******************************************/
    /**
     * Whether the number of selected elements matches the total number of rows.
     * @return {?}
     */
    TableCoreDirective.prototype.isAllSelected = /************************************ Selection Table Row *******************************************/
    /**
     * Whether the number of selected elements matches the total number of rows.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var numSelected = this._rowSelectionModel.selected.length;
        /** @type {?} */
        var numRows = this.tvsDataSource.data.length;
        return numSelected === numRows;
    };
    /** Selects all rows if they are not all selected; otherwise clear selection. */
    /**
     * Selects all rows if they are not all selected; otherwise clear selection.
     * @return {?}
     */
    TableCoreDirective.prototype.masterToggle = /**
     * Selects all rows if they are not all selected; otherwise clear selection.
     * @return {?}
     */
    function () {
        var _this = this;
        this.isAllSelected() ?
            this._rowSelectionModel.clear() :
            this.tvsDataSource.data.forEach((/**
             * @param {?} row
             * @return {?}
             */
            function (row) { return _this._rowSelectionModel.select(row); }));
        this.onRowEvent.emit({ event: 'MasterSelectionChange', sender: this._rowSelectionModel });
    };
    /**
     * @param {?} e
     * @param {?} row
     * @return {?}
     */
    TableCoreDirective.prototype.onRowSelectionChange = /**
     * @param {?} e
     * @param {?} row
     * @return {?}
     */
    function (e, row) {
        if (e) {
            this._rowSelectionModel.toggle(row);
            this.onRowEvent.emit({ event: 'RowSelectionChange', sender: this._rowSelectionModel });
        }
    };
    TableCoreDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[core]'
                },] }
    ];
    /** @nocollapse */
    TableCoreDirective.ctorParameters = function () { return [
        { type: TableService },
        { type: ChangeDetectorRef }
    ]; };
    TableCoreDirective.propDecorators = {
        sort: [{ type: ViewChild, args: [MatSort, { static: true },] }],
        paginator: [{ type: ViewChild, args: [MatPaginator, { static: true },] }],
        dataSource: [{ type: Input }],
        backgroundColor: [{ type: Input }],
        direction: [{ type: Input }, { type: HostBinding, args: ['style.direction',] }],
        contextMenuItems: [{ type: Input }],
        ScrollStrategyType: [{ type: Input }],
        pagingMode: [{ type: Input }],
        pagination: [{ type: Input }],
        rowSelectionModel: [{ type: Input }],
        rowSelectionMode: [{ type: Input }],
        tableName: [{ type: Input }],
        showProgress: [{ type: Input }],
        expandComponent: [{ type: Input }],
        rowContextMenuItems: [{ type: Input }],
        defaultWidth: [{ type: Input }],
        minWidth: [{ type: Input }],
        columns: [{ type: Input }],
        printConfig: [{ type: Input }],
        sticky: [{ type: Input }],
        pending: [{ type: Input }],
        rowHeight: [{ type: Input }],
        headerHeight: [{ type: Input }],
        footerHeight: [{ type: Input }],
        headerEnable: [{ type: Input }],
        footerEnable: [{ type: Input }],
        showNoData: [{ type: Input }],
        showReload: [{ type: Input }],
        onTableEvent: [{ type: Output }],
        onRowEvent: [{ type: Output }],
        settingChange: [{ type: Output }],
        paginationChange: [{ type: Output }],
        table: [{ type: ViewChild, args: [MatTable, { static: true },] }],
        viewport: [{ type: ViewChild, args: [CdkVirtualScrollViewport, { static: true },] }]
    };
    return TableCoreDirective;
}());
export { TableCoreDirective };
if (false) {
    /** @type {?} */
    TableCoreDirective.prototype.sort;
    /** @type {?} */
    TableCoreDirective.prototype.paginator;
    /** @type {?} */
    TableCoreDirective.prototype.dataSource;
    /** @type {?} */
    TableCoreDirective.prototype.backgroundColor;
    /** @type {?} */
    TableCoreDirective.prototype.contextMenuItems;
    /** @type {?} */
    TableCoreDirective.prototype.expandColumn;
    /**
     * @type {?}
     * @private
     */
    TableCoreDirective.prototype._expandComponent;
    /** @type {?} */
    TableCoreDirective.prototype.rowContextMenuItems;
    /** @type {?} */
    TableCoreDirective.prototype.defaultWidth;
    /** @type {?} */
    TableCoreDirective.prototype.minWidth;
    /**
     * ************************************ I/O parameters ********************************
     * @type {?}
     */
    TableCoreDirective.prototype.printConfig;
    /** @type {?} */
    TableCoreDirective.prototype.sticky;
    /** @type {?} */
    TableCoreDirective.prototype.pending;
    /** @type {?} */
    TableCoreDirective.prototype.rowHeight;
    /** @type {?} */
    TableCoreDirective.prototype.headerHeight;
    /** @type {?} */
    TableCoreDirective.prototype.footerHeight;
    /** @type {?} */
    TableCoreDirective.prototype.headerEnable;
    /** @type {?} */
    TableCoreDirective.prototype.footerEnable;
    /** @type {?} */
    TableCoreDirective.prototype.showNoData;
    /** @type {?} */
    TableCoreDirective.prototype.showReload;
    /** @type {?} */
    TableCoreDirective.prototype.onTableEvent;
    /** @type {?} */
    TableCoreDirective.prototype.onRowEvent;
    /** @type {?} */
    TableCoreDirective.prototype.settingChange;
    /** @type {?} */
    TableCoreDirective.prototype.paginationChange;
    /**
     * ************************************ Expand Row ********************************
     * @type {?}
     */
    TableCoreDirective.prototype.expandedElement;
    /** @type {?} */
    TableCoreDirective.prototype.progressColumn;
    /** @type {?} */
    TableCoreDirective.prototype.displayedColumns;
    /** @type {?} */
    TableCoreDirective.prototype.tableColumns;
    /** @type {?} */
    TableCoreDirective.prototype.tvsDataSource;
    /**
     * @type {?}
     * @private
     */
    TableCoreDirective.prototype._rowSelectionMode;
    /**
     * @type {?}
     * @private
     */
    TableCoreDirective.prototype._rowSelectionModel;
    /**
     * @type {?}
     * @private
     */
    TableCoreDirective.prototype._tablePagination;
    /** @type {?} */
    TableCoreDirective.prototype.tablePagingMode;
    /** @type {?} */
    TableCoreDirective.prototype.viewportClass;
    /** @type {?} */
    TableCoreDirective.prototype.tableSetting;
    /**
     * ************************************* Refrence Variables **************************************
     * @type {?}
     */
    TableCoreDirective.prototype.table;
    /** @type {?} */
    TableCoreDirective.prototype.viewport;
    /** @type {?} */
    TableCoreDirective.prototype.tableService;
    /** @type {?} */
    TableCoreDirective.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,