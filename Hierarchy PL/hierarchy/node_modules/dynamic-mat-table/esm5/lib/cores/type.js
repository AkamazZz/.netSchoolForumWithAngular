/**
 * @fileoverview added by tsickle
 * Generated from: lib/cores/type.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// |||||||||||||||||||||||||||||||||||||| Utils ||||||||||||||||||||||||||||||||||||||||||||||||||
/**
 * check object is null or undefined
 * @param {?} value
 * @return {?}
 */
export function isNullorUndefined(value) {
    if (value === null || value === undefined) {
        return true;
    }
    else {
        return false;
    }
}
/**
 * clone object but refrence variable not change
 * @template T
 * @param {?} obj
 * @return {?}
 */
export function clone(obj) {
    if (obj === null || obj === undefined) {
        return obj;
    }
    else if (Array.isArray(obj)) {
        /** @type {?} */
        var array_1 = [];
        obj.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return array_1.push(Object.assign({}, item)); }));
        return array_1;
    }
    else {
        return Object.assign({}, obj);
    }
}
/**
 * clone object and all refrence variable but may be there is a circle loop.
 * @template T
 * @param {?} obj
 * @return {?}
 */
export function deepClone(obj) {
    if (obj === null || obj === undefined) {
        return obj;
    }
    else if (Array.isArray(obj)) {
        /** @type {?} */
        var array_2 = [];
        obj.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return array_2.push(deepClone(item)); }));
        return (/** @type {?} */ (array_2));
    }
    else {
        /** @type {?} */
        var c_1 = Object.assign((/** @type {?} */ ({})), obj);
        /** @type {?} */
        var fields = Object.getOwnPropertyNames(obj);
        fields.forEach((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            /** @type {?} */
            var field = obj[f];
            if (field !== null && typeof field === 'object') {
                c_1[f] = deepClone(field);
            }
        }));
        return c_1;
    }
}
/**
 * @param {?} fieldName
 * @param {?} defaultValue
 * @param {...?} variable
 * @return {?}
 */
export function getObjectProp(fieldName, defaultValue) {
    var variable = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        variable[_i - 2] = arguments[_i];
    }
    for (var v in variable) {
        if (variable[v] && !isNullorUndefined(variable[v][fieldName])) {
            return variable[v][fieldName];
        }
    }
    return defaultValue;
}
/**
 * @param {?} from
 * @param {?} to
 * @param {?=} forced
 * @param {?=} nullSkip
 * @param {?=} undefinedSkip
 * @return {?}
 */
export function copy(from, to, forced, nullSkip, undefinedSkip) {
    if (forced === void 0) { forced = false; }
    if (nullSkip === void 0) { nullSkip = true; }
    if (undefinedSkip === void 0) { undefinedSkip = true; }
    if (from === null || from === undefined) {
        return;
    }
    if (to === null || to === undefined) {
        to = {};
    }
    /** @type {?} */
    var f = Object.keys(from);
    /** @type {?} */
    var t = Object.keys(to);
    f.forEach((/**
     * @param {?} fi
     * @return {?}
     */
    function (fi) {
        if (forced === true || t.includes(fi) === true) {
            if (!(from[fi] === null && nullSkip === true) && !(from[fi] === undefined && undefinedSkip === true)) {
                to[fi] = from[fi];
            }
        }
    }));
}
// |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// |||||||||||||||||||||||||||||||||||| Text Utils |||||||||||||||||||||||||||||||||||||||||||||||
/**
 * Transforms a camelCase string into a readable text format
 * \@example textify('helloWorld!')
 * // Hello world!
 * @param {?} text
 * @return {?}
 */
export function textify(text) {
    return text
        .replace(/([A-Z])/g, (/**
     * @param {?} char
     * @return {?}
     */
    function (char) { return " " + char.toLowerCase(); }))
        .replace(/^([a-z])/, (/**
     * @param {?} char
     * @return {?}
     */
    function (char) { return char.toUpperCase(); }));
}
/**
 * Transforms a text string into a title case text format
 * \@example titleCase('hello world!')
 * // Hello Workd!
 * @param {?} value
 * @return {?}
 */
export function titleCase(value) {
    /** @type {?} */
    var sentence = value.toLowerCase().split(' ');
    for (var i = 0; i < sentence.length; i++) {
        sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);
    }
    return sentence.join(' ');
}
/**
 * @record
 * @template T
 */
export function Dictionary() { }
//# sourceMappingURL=data:application/json;base64,