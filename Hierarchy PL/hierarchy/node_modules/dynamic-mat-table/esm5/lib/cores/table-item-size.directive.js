/**
 * @fileoverview added by tsickle
 * Generated from: lib/cores/table-item-size.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChild, Directive, forwardRef, Input, NgZone } from '@angular/core';
import { VIRTUAL_SCROLL_STRATEGY } from '@angular/cdk/scrolling';
import { distinctUntilChanged, filter, map, switchMap, takeUntil, takeWhile, tap } from 'rxjs/operators';
import { TableVirtualScrollDataSource } from './table-data-source';
import { MatTable } from '@angular/material/table';
import { FixedSizeTableVirtualScrollStrategy } from './fixed-size-table-virtual-scroll-strategy';
import { Subject } from 'rxjs';
/**
 * @param {?} tableDir
 * @return {?}
 */
export function _tableVirtualScrollDirectiveStrategyFactory(tableDir) {
    return tableDir.scrollStrategy;
}
/** @type {?} */
var stickyHeaderSelector = '.mat-header-row .mat-table-sticky';
/** @type {?} */
var stickyFooterSelector = '.mat-footer-row .mat-table-sticky';
/** @type {?} */
var defaults = {
    rowHeight: 48,
    headerHeight: 56,
    headerEnabled: true,
    footerHeight: 48,
    footerEnabled: false,
    bufferMultiplier: 0.7
};
var TableItemSizeDirective = /** @class */ (function () {
    function TableItemSizeDirective(zone) {
        this.zone = zone;
        this.alive = true;
        // tslint:disable-next-line:no-input-rename
        this.rowHeight = defaults.rowHeight;
        this.headerEnabled = defaults.headerEnabled;
        this.headerHeight = defaults.headerHeight;
        this.footerEnabled = defaults.footerEnabled;
        this.footerHeight = defaults.footerHeight;
        this.bufferMultiplier = defaults.bufferMultiplier;
        // @Output() requestRendering: EventEmitter<any> = new EventEmitter();
        this.scrollStrategy = new FixedSizeTableVirtualScrollStrategy();
        this.dataSourceChanges = new Subject();
    }
    /**
     * @return {?}
     */
    TableItemSizeDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.alive = false;
        this.dataSourceChanges.complete();
    };
    /**
     * @private
     * @return {?}
     */
    TableItemSizeDirective.prototype.isAlive = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return (/**
         * @return {?}
         */
        function () { return _this.alive; });
    };
    /**
     * @private
     * @return {?}
     */
    TableItemSizeDirective.prototype.isStickyEnabled = /**
     * @private
     * @return {?}
     */
    function () {
        return !!this.scrollStrategy.viewport && ((/** @type {?} */ (((/** @type {?} */ (this.table)))._headerRowDefs)))
            .map((/**
         * @param {?} def
         * @return {?}
         */
        function (def) { return def.sticky; }))
            .reduce((/**
         * @param {?} prevState
         * @param {?} state
         * @return {?}
         */
        function (prevState, state) { return prevState && state; }), true);
    };
    /**
     * @return {?}
     */
    TableItemSizeDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var switchDataSourceOrigin = ((/** @type {?} */ (this.table)))._switchDataSource;
        ((/** @type {?} */ (this.table)))._switchDataSource = (/**
         * @param {?} dataSource
         * @return {?}
         */
        function (dataSource) {
            switchDataSourceOrigin.call(_this.table, dataSource);
            _this.connectDataSource(dataSource);
        });
        this.connectDataSource(this.table.dataSource);
        this.scrollStrategy.stickyChange
            .pipe(filter((/**
         * @return {?}
         */
        function () { return _this.isStickyEnabled(); })), tap((/**
         * @return {?}
         */
        function () {
            if (!_this.stickyPositions) {
                _this.initStickyPositions();
            }
        })), takeWhile(this.isAlive()))
            .subscribe((/**
         * @param {?} stickyOffset
         * @return {?}
         */
        function (stickyOffset) {
            _this.setSticky(stickyOffset);
        }));
    };
    /**
     * @param {?} dataSource
     * @return {?}
     */
    TableItemSizeDirective.prototype.connectDataSource = /**
     * @param {?} dataSource
     * @return {?}
     */
    function (dataSource) {
        var _this = this;
        this.dataSourceChanges.next();
        if (dataSource instanceof TableVirtualScrollDataSource) {
            dataSource
                .dataToRender$
                .pipe(distinctUntilChanged(), takeUntil(this.dataSourceChanges), takeWhile(this.isAlive()), tap((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return _this.scrollStrategy.dataLength = data.length; })), switchMap((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                return _this.scrollStrategy
                    .renderedRangeStream
                    .pipe(map((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var start = _a.start, end = _a.end;
                    // this.requestRendering.emit({from: start, to: end});
                    return typeof start !== 'number' || typeof end !== 'number' ? data : data.slice(start, end);
                })));
            })))
                .subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.zone.run((/**
                 * @return {?}
                 */
                function () {
                    dataSource.dataOfRange$.next(data);
                }));
            }));
        }
        else {
            throw new Error('[tvsItemSize] requires TableVirtualScrollDataSource be set as [dataSource] of [mat-table]');
        }
    };
    /**
     * @return {?}
     */
    TableItemSizeDirective.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var config = {
            rowHeight: +this.rowHeight || defaults.rowHeight,
            headerHeight: this.headerEnabled ? +this.headerHeight || defaults.headerHeight : 0,
            footerHeight: this.footerEnabled ? +this.footerHeight || defaults.footerHeight : 0,
            bufferMultiplier: +this.bufferMultiplier || defaults.bufferMultiplier
        };
        this.scrollStrategy.setConfig(config);
    };
    // setSticky(offset) {
    //   // fixed bug when sticky true for header and one column. column scroll front of header. becuse of z-index
    //   let topOffset = -offset;
    //   this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll('mat-header-row.mat-table-sticky')
    //     .forEach((el: HTMLElement) => {
    //       el.style.top = `${topOffset}px`;
    //       topOffset += el.offsetHeight;
    //       if (el.style.zIndex !== null ) {
    //         el.style.zIndex = '1000';
    //       }
    //     });
    // }
    // setSticky(offset) {
    //   // fixed bug when sticky true for header and one column. column scroll front of header. becuse of z-index
    //   let topOffset = -offset;
    //   this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll('mat-header-row.mat-table-sticky')
    //     .forEach((el: HTMLElement) => {
    //       el.style.top = `${topOffset}px`;
    //       topOffset += el.offsetHeight;
    //       if (el.style.zIndex !== null ) {
    //         el.style.zIndex = '1000';
    //       }
    //     });
    // }
    /**
     * @param {?} offset
     * @return {?}
     */
    TableItemSizeDirective.prototype.setSticky = 
    // setSticky(offset) {
    //   // fixed bug when sticky true for header and one column. column scroll front of header. becuse of z-index
    //   let topOffset = -offset;
    //   this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll('mat-header-row.mat-table-sticky')
    //     .forEach((el: HTMLElement) => {
    //       el.style.top = `${topOffset}px`;
    //       topOffset += el.offsetHeight;
    //       if (el.style.zIndex !== null ) {
    //         el.style.zIndex = '1000';
    //       }
    //     });
    // }
    /**
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        var _this = this;
        this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll(stickyHeaderSelector)
            .forEach((/**
         * @param {?} el
         * @return {?}
         */
        function (el) {
            /** @type {?} */
            var parent = el.parentElement;
            /** @type {?} */
            var baseOffset = 0;
            if (_this.stickyPositions.has(parent)) {
                baseOffset = _this.stickyPositions.get(parent);
            }
            el.style.top = baseOffset - offset + "px";
        }));
        this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll(stickyFooterSelector)
            .forEach((/**
         * @param {?} el
         * @return {?}
         */
        function (el) {
            /** @type {?} */
            var parent = el.parentElement;
            /** @type {?} */
            var baseOffset = 0;
            if (_this.stickyPositions.has(parent)) {
                baseOffset = _this.stickyPositions.get(parent);
            }
            el.style.bottom = -baseOffset + offset + "px";
        }));
    };
    /**
     * @private
     * @return {?}
     */
    TableItemSizeDirective.prototype.initStickyPositions = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.stickyPositions = new Map();
        this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll(stickyHeaderSelector)
            .forEach((/**
         * @param {?} el
         * @return {?}
         */
        function (el) {
            /** @type {?} */
            var parent = el.parentElement;
            if (!_this.stickyPositions.has(parent)) {
                _this.stickyPositions.set(parent, parent.offsetTop);
            }
        }));
    };
    TableItemSizeDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: 'cdk-virtual-scroll-viewport[tvsItemSize]',
                    providers: [{
                            provide: VIRTUAL_SCROLL_STRATEGY,
                            useFactory: _tableVirtualScrollDirectiveStrategyFactory,
                            deps: [forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return TableItemSizeDirective; }))]
                        }]
                },] }
    ];
    /** @nocollapse */
    TableItemSizeDirective.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    TableItemSizeDirective.propDecorators = {
        rowHeight: [{ type: Input, args: ['tvsItemSize',] }],
        headerEnabled: [{ type: Input }],
        headerHeight: [{ type: Input }],
        footerEnabled: [{ type: Input }],
        footerHeight: [{ type: Input }],
        bufferMultiplier: [{ type: Input }],
        table: [{ type: ContentChild, args: [MatTable, { static: true },] }]
    };
    return TableItemSizeDirective;
}());
export { TableItemSizeDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TableItemSizeDirective.prototype.alive;
    /** @type {?} */
    TableItemSizeDirective.prototype.rowHeight;
    /** @type {?} */
    TableItemSizeDirective.prototype.headerEnabled;
    /** @type {?} */
    TableItemSizeDirective.prototype.headerHeight;
    /** @type {?} */
    TableItemSizeDirective.prototype.footerEnabled;
    /** @type {?} */
    TableItemSizeDirective.prototype.footerHeight;
    /** @type {?} */
    TableItemSizeDirective.prototype.bufferMultiplier;
    /** @type {?} */
    TableItemSizeDirective.prototype.table;
    /** @type {?} */
    TableItemSizeDirective.prototype.scrollStrategy;
    /** @type {?} */
    TableItemSizeDirective.prototype.dataSourceChanges;
    /**
     * @type {?}
     * @private
     */
    TableItemSizeDirective.prototype.stickyPositions;
    /**
     * @type {?}
     * @private
     */
    TableItemSizeDirective.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,