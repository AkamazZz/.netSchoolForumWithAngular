/**
 * @fileoverview added by tsickle
 * Generated from: lib/cores/table-data-source.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends, __read, __values } from "tslib";
import { combineLatest, merge, Observable, of, ReplaySubject, Subscription } from 'rxjs';
import { map } from 'rxjs/operators';
import { MatTableDataSource } from '@angular/material/table';
import { titleCase } from '../utilies/text.utils';
/**
 * @template T
 */
var /**
 * @template T
 */
TableVirtualScrollDataSource = /** @class */ (function (_super) {
    __extends(TableVirtualScrollDataSource, _super);
    function TableVirtualScrollDataSource() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.filterMap = {};
        return _this;
    }
    Object.defineProperty(TableVirtualScrollDataSource.prototype, "allData", {
        get: /**
         * @return {?}
         */
        function () {
            return this.data;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TableVirtualScrollDataSource.prototype.toTranslate = /**
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b;
        /** @type {?} */
        var tranList = [];
        /** @type {?} */
        var keys = Object.keys(this.filterMap);
        try {
            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var k = keys_1_1.value;
                /** @type {?} */
                var fieldTotalTran = '';
                try {
                    for (var _c = (e_2 = void 0, __values(this.filterMap[k])), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var f = _d.value;
                        fieldTotalTran += f.toPrint();
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                if (fieldTotalTran !== '') {
                    tranList.push({ key: titleCase(k), value: fieldTotalTran });
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return tranList;
    };
    /**
     * @param {?} fieldName
     * @return {?}
     */
    TableVirtualScrollDataSource.prototype.getFilter = /**
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        return this.filterMap[fieldName];
    };
    /**
     * @param {?} fieldName
     * @param {?} filters
     * @return {?}
     */
    TableVirtualScrollDataSource.prototype.setFilter = /**
     * @param {?} fieldName
     * @param {?} filters
     * @return {?}
     */
    function (fieldName, filters) {
        var _this = this;
        this.filterMap[fieldName] = filters;
        return new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        function (subscriber) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.refreshFilterPredicate();
                subscriber.next();
                subscriber.complete();
            }), 200); // for show progress
        }));
    };
    /**
     * @param {?=} fieldName
     * @return {?}
     */
    TableVirtualScrollDataSource.prototype.clearFilter = /**
     * @param {?=} fieldName
     * @return {?}
     */
    function (fieldName) {
        if (fieldName === void 0) { fieldName = null; }
        if (fieldName != null) {
            delete this.filterMap[fieldName];
        }
        else {
            this.filterMap = {};
        }
        this.refreshFilterPredicate();
    };
    /**
     * @return {?}
     */
    TableVirtualScrollDataSource.prototype.clearData = /**
     * @return {?}
     */
    function () {
        this.data = [];
    };
    /**
     * @return {?}
     */
    TableVirtualScrollDataSource.prototype.refreshFilterPredicate = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var conditionsString = '';
        Object.keys(this.filterMap).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var fieldCondition = '';
            _this.filterMap[key].forEach((/**
             * @param {?} fieldFilter
             * @param {?} row
             * @param {?} array
             * @return {?}
             */
            function (fieldFilter, row, array) {
                if (row < array.length - 1) {
                    fieldCondition += fieldFilter.toString(key) + (fieldFilter.type === 'and' ? ' && ' : ' || ');
                }
                else {
                    fieldCondition += fieldFilter.toString(key);
                }
            }));
            if (fieldCondition !== '') {
                conditionsString += " " + (conditionsString === '' ? '' : ' && ') + " ( " + fieldCondition + " )";
            }
        }));
        if (conditionsString !== '') {
            /** @type {?} */
            var filterFunction_1 = new Function('_a$', 'return ' + conditionsString);
            this.filterPredicate = (/**
             * @param {?} data
             * @param {?} filter
             * @return {?}
             */
            function (data, filter) { return (/** @type {?} */ (filterFunction_1(data))); });
        }
        else {
            this.filterPredicate = (/**
             * @param {?} data
             * @param {?} filter
             * @return {?}
             */
            function (data, filter) { return true; });
        }
        this.filter = conditionsString;
    };
    // When client paging active use for reterive paging data
    // When client paging active use for reterive paging data
    /**
     * @param {?} data
     * @return {?}
     */
    TableVirtualScrollDataSource.prototype.pagingData = 
    // When client paging active use for reterive paging data
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var p = ((/** @type {?} */ (this)))._paginator;
        if (p && p !== null) {
            /** @type {?} */
            var end = (p.pageIndex + 1) * p.pageSize;
            /** @type {?} */
            var start = p.pageIndex * p.pageSize;
            return data.slice(start, end);
        }
        return data;
    };
    /**
     * @return {?}
     */
    TableVirtualScrollDataSource.prototype._updateChangeSubscription = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var _a;
        this.initStreams();
        /** @type {?} */
        var sort = ((/** @type {?} */ (this)))._sort;
        /** @type {?} */
        var paginator = ((/** @type {?} */ (this)))._paginator;
        /** @type {?} */
        var internalPageChanges = ((/** @type {?} */ (this)))._internalPageChanges;
        /** @type {?} */
        var filter = ((/** @type {?} */ (this)))._filter;
        /** @type {?} */
        var renderData = ((/** @type {?} */ (this)))._renderData;
        /** @type {?} */
        var dataStream = ((/** @type {?} */ (this)))._data;
        /** @type {?} */
        var sortChange = sort ?
            (/** @type {?} */ (merge(sort.sortChange, sort.initialized))) : of(null);
        /** @type {?} */
        var pageChange = paginator ?
            (/** @type {?} */ (merge(paginator.page, internalPageChanges, paginator.initialized))) : of(null);
        // First Filter
        /** @type {?} */
        var filteredData = combineLatest([dataStream, filter]).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = __read(_a, 1), data = _b[0];
            return _this._filterData(data);
        })));
        // Second Order
        /** @type {?} */
        var orderedData = combineLatest([filteredData, sortChange]).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = __read(_a, 1), data = _b[0];
            return _this._orderData(data);
        })));
        // Last Paging
        /** @type {?} */
        var paginatedData = combineLatest([orderedData, pageChange]).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = __read(_a, 1), data = _b[0];
            return _this.pagingData(data);
        })));
        (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        this._renderChangesSubscription = new Subscription();
        this._renderChangesSubscription.add(paginatedData.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return _this.dataToRender$.next(data); })));
        this._renderChangesSubscription.add(this.dataOfRange$.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return renderData.next(data); })));
    };
    /**
     * @private
     * @return {?}
     */
    TableVirtualScrollDataSource.prototype.initStreams = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.streamsReady) {
            this.dataToRender$ = new ReplaySubject(1);
            this.dataOfRange$ = new ReplaySubject(1);
            this.streamsReady = true;
        }
    };
    return TableVirtualScrollDataSource;
}(MatTableDataSource));
/**
 * @template T
 */
export { TableVirtualScrollDataSource };
if (false) {
    /** @type {?} */
    TableVirtualScrollDataSource.prototype.dataToRender$;
    /** @type {?} */
    TableVirtualScrollDataSource.prototype.dataOfRange$;
    /**
     * @type {?}
     * @private
     */
    TableVirtualScrollDataSource.prototype.streamsReady;
    /**
     * @type {?}
     * @private
     */
    TableVirtualScrollDataSource.prototype.filterMap;
}
/**
 * @record
 * @template T
 */
export function HashMap() { }
//# sourceMappingURL=data:application/json;base64,