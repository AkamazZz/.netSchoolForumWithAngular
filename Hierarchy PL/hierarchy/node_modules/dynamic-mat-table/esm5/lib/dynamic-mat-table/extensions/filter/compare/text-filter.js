/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/filter/compare/text-filter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends } from "tslib";
import { AbstractFilter } from './abstract-filter';
/** @type {?} */
var contains = 'a.toString().includes(b)';
/** @type {?} */
var equals = 'a.toString() === b.toString()';
/** @type {?} */
var startsWith = 'a.toString().startsWith(b)';
/** @type {?} */
var endsWith = 'a.toString().endsWith(b.toString())';
/** @type {?} */
var empty = '!a';
/** @type {?} */
var notEmpty = '!!a';
/** @type {?} */
var operations = [contains, equals, startsWith, endsWith, empty, notEmpty];
var TextFilter = /** @class */ (function (_super) {
    __extends(TextFilter, _super);
    function TextFilter(languagePack) {
        var _this = _super.call(this) || this;
        _this.languagePack = languagePack;
        // tslint:disable-next-line:variable-name
        _this._selectedIndex = null;
        _this._selectedIndex = 0;
        if (TextFilter.operationList.length === 0) { // init for first time
            operations.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                TextFilter.operationList.push({ predicate: fn, text: null });
            }));
        }
        TextFilter.operationList[0].text = languagePack.filterLabels.TextContains; // contains //
        TextFilter.operationList[1].text = languagePack.filterLabels.TextEquals; // equals //
        TextFilter.operationList[2].text = languagePack.filterLabels.TextStartsWith; // startsWith //
        TextFilter.operationList[3].text = languagePack.filterLabels.TextEndsWith; // endsWith //
        TextFilter.operationList[4].text = languagePack.filterLabels.TextEmpty; // empty //
        TextFilter.operationList[5].text = languagePack.filterLabels.TextNotEmpty; // notEmpty //
        return _this;
    }
    Object.defineProperty(TextFilter.prototype, "selectedIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedIndex;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selectedIndex = value;
            // init filter parameters
            if (value === 0 || value === 1 || value === 2 || value === 3) { // contains equals startsWith endsWith
                this.parameters = [{ value: '', text: this.languagePack.filterLabels.Text }];
            }
            else { // empty notEmpty
                this.parameters = null;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextFilter.prototype, "selectedValue", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._selectedIndex !== null) {
                return TextFilter.operationList[this._selectedIndex];
            }
            else {
                return null;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TextFilter.prototype.getOperations = /**
     * @return {?}
     */
    function () {
        return TextFilter.operationList;
    };
    /**
     * @param {?} dynamicVariable
     * @return {?}
     */
    TextFilter.prototype.toString = /**
     * @param {?} dynamicVariable
     * @return {?}
     */
    function (dynamicVariable) {
        /** @type {?} */
        var a = '_a$';
        /** @type {?} */
        var b = '_b$';
        /** @type {?} */
        var predicate = this.selectedValue.predicate.replace('a', a).replace('b', b);
        /** @type {?} */
        var statement = predicate.replace(a, a + "['" + dynamicVariable + "']?.toString()?.toLowerCase()");
        // one static parameters equals  notEquals greaterThan lessThan //
        if (this._selectedIndex === 0 ||
            this._selectedIndex === 1 ||
            this._selectedIndex === 2 ||
            this._selectedIndex === 3) {
            /** @type {?} */
            var value = '\'' + (this.parameters[0].value !== null ? this.parameters[0].value.toLowerCase() : ' null ') + '\'';
            return statement.replace('_b$', value);
        }
        else { // without static parameters
            return statement;
        }
    };
    /**
     * @return {?}
     */
    TextFilter.prototype.toPrint = /**
     * @return {?}
     */
    function () {
        return TextFilter.operationList[this._selectedIndex].text + ' ' + this.parameters[0].value + ' ' + (this.type || '') + ' ';
    };
    /**
     * @return {?}
     */
    TextFilter.prototype.toSql = /**
     * @return {?}
     */
    function () {
        return TextFilter.sql[this._selectedIndex].replace('[*]', (this.parameters[0].value || '')) + (this.type || '') + ' ';
    };
    TextFilter.sql = ['LIKE "%[*]%"', '= "[*]"', 'LIKE "%[*]"', 'LIKE "[*]%"', 'IS NULL', 'IS NOT NULL'];
    TextFilter.operationList = [];
    return TextFilter;
}(AbstractFilter));
export { TextFilter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TextFilter.sql;
    /**
     * @type {?}
     * @private
     */
    TextFilter.operationList;
    /**
     * @type {?}
     * @private
     */
    TextFilter.prototype._selectedIndex;
    /** @type {?} */
    TextFilter.prototype.languagePack;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1maWx0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9keW5hbWljLW1hdC10YWJsZS8iLCJzb3VyY2VzIjpbImxpYi9keW5hbWljLW1hdC10YWJsZS9leHRlbnNpb25zL2ZpbHRlci9jb21wYXJlL3RleHQtZmlsdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQW1CLE1BQU0sbUJBQW1CLENBQUM7O0lBRzlELFFBQVEsR0FBRywwQkFBMEI7O0lBQ3JDLE1BQU0sR0FBRywrQkFBK0I7O0lBQ3hDLFVBQVUsR0FBRyw0QkFBNEI7O0lBQ3pDLFFBQVEsR0FBRyxxQ0FBcUM7O0lBQ2hELEtBQUssR0FBRyxJQUFJOztJQUNaLFFBQVEsR0FBRyxLQUFLOztJQUNoQixVQUFVLEdBQUcsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQztBQUU1RTtJQUFnQyw4QkFBc0I7SUFJcEQsb0JBQW1CLFlBQXVCO1FBQTFDLFlBQ0UsaUJBQU8sU0FhUjtRQWRrQixrQkFBWSxHQUFaLFlBQVksQ0FBVzs7UUFpQmxDLG9CQUFjLEdBQVcsSUFBSSxDQUFDO1FBZnBDLEtBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLElBQUssVUFBVSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLEVBQUUsc0JBQXNCO1lBQ2xFLFVBQVUsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxFQUFFO2dCQUNuQixVQUFVLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7WUFDOUQsQ0FBQyxFQUFDLENBQUM7U0FDSjtRQUNELFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENB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SyxDQUFDLENBQUM7U0FDMUM7YUFBTSxFQUFFLDRCQUE0QjtZQUNuQyxPQUFPLFNBQVMsQ0FBQztTQUNsQjtJQUNILENBQUM7Ozs7SUFFTSw0QkFBTzs7O0lBQWQ7UUFDRSxPQUFPLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDN0gsQ0FBQzs7OztJQUVNLDBCQUFLOzs7SUFBWjtRQUNFLE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUN4SCxDQUFDO0lBckVjLGNBQUcsR0FBRyxDQUFDLGNBQWMsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDMUYsd0JBQWEsR0FBc0IsRUFBRSxDQUFDO0lBcUV2RCxpQkFBQztDQUFBLEFBdkVELENBQWdDLGNBQWMsR0F1RTdDO1NBdkVZLFVBQVU7Ozs7OztJQUNyQixlQUF5Rzs7Ozs7SUFDekcseUJBQXFEOzs7OztJQW1CckQsb0NBQXNDOztJQWpCMUIsa0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RGaWx0ZXIsIEZpbHRlck9wZXJhdGlvbiB9IGZyb20gJy4vYWJzdHJhY3QtZmlsdGVyJztcclxuaW1wb3J0IHsgVGFibGVJbnRsIH0gZnJvbSAnLi4vLi4vLi4vLi4vaW50ZXJuYXRpb25hbC90YWJsZS1JbnRsJztcclxuXHJcbmNvbnN0IGNvbnRhaW5zID0gJ2EudG9TdHJpbmcoKS5pbmNsdWRlcyhiKSc7XHJcbmNvbnN0IGVxdWFscyA9ICdhLnRvU3RyaW5nKCkgPT09IGIudG9TdHJpbmcoKSc7XHJcbmNvbnN0IHN0YXJ0c1dpdGggPSAnYS50b1N0cmluZygpLnN0YXJ0c1dpdGgoYiknO1xyXG5jb25zdCBlbmRzV2l0aCA9ICdhLnRvU3RyaW5nKCkuZW5kc1dpdGgoYi50b1N0cmluZygpKSc7XHJcbmNvbnN0IGVtcHR5ID0gJyFhJztcclxuY29uc3Qgbm90RW1wdHkgPSAnISFhJztcclxuY29uc3Qgb3BlcmF0aW9ucyA9IFtjb250YWlucywgZXF1YWxzLCBzdGFydHNXaXRoLCBlbmRzV2l0aCwgZW1wdHksIG5vdEVtcHR5XTtcclxuXHJcbmV4cG9ydCBjbGFzcyBUZXh0RmlsdGVyIGV4dGVuZHMgQWJzdHJhY3RGaWx0ZXI8c3RyaW5nPiB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgc3FsID0gWydMSUtFIFwiJVsqXSVcIicsICc9IFwiWypdXCInLCAnTElLRSBcIiVbKl1cIicsICdMSUtFIFwiWypdJVwiJywgJ0lTIE5VTEwnLCAnSVMgTk9UIE5VTEwnXTtcclxuICBwcml2YXRlIHN0YXRpYyBvcGVyYXRpb25MaXN0OiBGaWx0ZXJPcGVyYXRpb25bXSA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgbGFuZ3VhZ2VQYWNrOiBUYWJsZUludGwpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLl9zZWxlY3RlZEluZGV4ID0gMDtcclxuICAgIGlmICggVGV4dEZpbHRlci5vcGVyYXRpb25MaXN0Lmxlbmd0aCA9PT0gMCkgeyAvLyBpbml0IGZvciBmaXJzdCB0aW1lXHJcbiAgICAgIG9wZXJhdGlvbnMuZm9yRWFjaChmbiA9PiB7XHJcbiAgICAgICAgVGV4dEZpbHRlci5vcGVyYXRpb25MaXN0LnB1c2goeyBwcmVkaWNhdGU6IGZuLCB0ZXh0OiBudWxsfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgVGV4dEZpbHRlci5vcGVyYXRpb25MaXN0WzBdLnRleHQgPSBsYW5ndWFnZVBhY2suZmlsdGVyTGFiZWxzLlRleHRDb250YWluczsgICAgLy8gY29udGFpbnMgLy9cclxuICAgIFRleHRGaWx0ZXIub3BlcmF0aW9uTGlzdFsxXS50ZXh0ID0gbGFuZ3VhZ2VQYWNrLmZpbHRlckxhYmVscy5UZXh0RXF1YWxzOyAgICAgIC8vIGVxdWFscyAvL1xyXG4gICAgVGV4dEZpbHRlci5vcGVyYXRpb25MaXN0WzJdLnRleHQgPSBsYW5ndWFnZVBhY2suZmlsdGVyTGFiZWxzLlRleHRTdGFydHNXaXRoOyAgLy8gc3RhcnRzV2l0aCAvL1xyXG4gICAgVGV4dEZpbHRlci5vcGVyYXRpb25MaXN0WzNdLnRleHQgPSBsYW5ndWFnZVBhY2suZmlsdGVyTGFiZWxzLlRleHRFbmRzV2l0aDsgICAgLy8gZW5kc1dpdGggLy9cclxuICAgIFRleHRGaWx0ZXIub3BlcmF0aW9uTGlzdFs0XS50ZXh0ID0gbGFuZ3VhZ2VQYWNrLmZpbHRlckxhYmVscy5UZXh0RW1wdHk7ICAgICAgIC8vIGVtcHR5IC8vXHJcbiAgICBUZXh0RmlsdGVyLm9wZXJhdGlvbkxpc3RbNV0udGV4dCA9IGxhbmd1YWdlUGFjay5maWx0ZXJMYWJlbHMuVGV4dE5vdEVtcHR5OyAgICAvLyBub3RFbXB0eSAvL1xyXG4gIH1cclxuXHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcclxuICBwcml2YXRlIF9zZWxlY3RlZEluZGV4OiBudW1iZXIgPSBudWxsO1xyXG4gIGdldCBzZWxlY3RlZEluZGV4KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWRJbmRleDtcclxuICB9XHJcbiAgc2V0IHNlbGVjdGVkSW5kZXgodmFsdWU6IG51bWJlcikge1xyXG4gICAgdGhpcy5fc2VsZWN0ZWRJbmRleCA9IHZhbHVlO1xyXG4gICAgLy8gaW5pdCBmaWx0ZXIgcGFyYW1ldGVyc1xyXG4gICAgaWYgKHZhbHVlID09PSAwIHx8IHZhbHVlID09PSAxIHx8IHZhbHVlID09PSAyIHx8IHZhbHVlID09PSAzICkgeyAvLyBjb250YWlucyBlcXVhbHMgc3RhcnRzV2l0aCBlbmRzV2l0aFxyXG4gICAgICB0aGlzLnBhcmFtZXRlcnMgPSBbeyB2YWx1ZTogJycsIHRleHQ6IHRoaXMubGFuZ3VhZ2VQYWNrLmZpbHRlckxhYmVscy5UZXh0IH1dO1xyXG4gICAgfSBlbHNlIHsgLy8gZW1wdHkgbm90RW1wdHlcclxuICAgICAgdGhpcy5wYXJhbWV0ZXJzID0gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCBzZWxlY3RlZFZhbHVlKCk6IEZpbHRlck9wZXJhdGlvbiB7XHJcbiAgICBpZiAodGhpcy5fc2VsZWN0ZWRJbmRleCAhPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gVGV4dEZpbHRlci5vcGVyYXRpb25MaXN0W3RoaXMuX3NlbGVjdGVkSW5kZXhdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0T3BlcmF0aW9ucygpOiBGaWx0ZXJPcGVyYXRpb25bXSB7XHJcbiAgICByZXR1cm4gVGV4dEZpbHRlci5vcGVyYXRpb25MaXN0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHRvU3RyaW5nKGR5bmFtaWNWYXJpYWJsZTogYW55KTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGEgPSAnX2EkJztcclxuICAgIGNvbnN0IGIgPSAnX2IkJztcclxuICAgIGNvbnN0IHByZWRpY2F0ZSA9IHRoaXMuc2VsZWN0ZWRWYWx1ZS5wcmVkaWNhdGUucmVwbGFjZSgnYScsIGEpLnJlcGxhY2UoJ2InLCBiKTtcclxuICAgIGNvbnN0IHN0YXRlbWVudCA9IHByZWRpY2F0ZS5yZXBsYWNlKGEsIGAke2F9Wycke2R5bmFtaWNWYXJpYWJsZX0nXT8udG9TdHJpbmcoKT8udG9Mb3dlckNhc2UoKWApO1xyXG4gICAgLy8gb25lIHN0YXRpYyBwYXJhbWV0ZXJzIGVxdWFscyAgbm90RXF1YWxzIGdyZWF0ZXJUaGFuIGxlc3NUaGFuIC8vXHJcbiAgICBpZiAodGhpcy5fc2VsZWN0ZWRJbmRleCA9PT0gMCB8fFxyXG4gICAgICB0aGlzLl9zZWxlY3RlZEluZGV4ID09PSAxIHx8XHJcbiAgICAgIHRoaXMuX3NlbGVjdGVkSW5kZXggPT09IDIgfHxcclxuICAgICAgdGhpcy5fc2VsZWN0ZWRJbmRleCA9PT0gMyApIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9ICdcXCcnICsgKHRoaXMucGFyYW1ldGVyc1swXS52YWx1ZSAhPT0gbnVsbCA/IHRoaXMucGFyYW1ldGVyc1swXS52YWx1ZS50b0xvd2VyQ2FzZSgpIDogJyBudWxsICcpICsgJ1xcJyc7XHJcbiAgICAgICAgcmV0dXJuIHN0YXRlbWVudC5yZXBsYWNlKCdfYiQnLCB2YWx1ZSk7XHJcbiAgICB9IGVsc2UgeyAvLyB3aXRob3V0IHN0YXRpYyBwYXJhbWV0ZXJzXHJcbiAgICAgIHJldHVybiBzdGF0ZW1lbnQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdG9QcmludCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIFRleHRGaWx0ZXIub3BlcmF0aW9uTGlzdFt0aGlzLl9zZWxlY3RlZEluZGV4XS50ZXh0ICsgJyAnICsgdGhpcy5wYXJhbWV0ZXJzWzBdLnZhbHVlICsgJyAnICsgKHRoaXMudHlwZSB8fCAnJykgKyAnICc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdG9TcWwoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBUZXh0RmlsdGVyLnNxbFt0aGlzLl9zZWxlY3RlZEluZGV4XS5yZXBsYWNlKCdbKl0nLCAodGhpcy5wYXJhbWV0ZXJzWzBdLnZhbHVlIHx8ICcnKSkgKyAodGhpcy50eXBlIHx8ICcnKSArICcgJztcclxuICB9XHJcbn1cclxuXHJcbiJdfQ==