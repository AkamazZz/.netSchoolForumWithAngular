/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/filter/compare/number-filter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends } from "tslib";
import { AbstractFilter } from './abstract-filter';
/** @type {?} */
var equals = 'a === b';
/** @type {?} */
var notEquals = 'a !== b';
/** @type {?} */
var greaterThan = 'a > b';
/** @type {?} */
var lessThan = 'a < b';
/** @type {?} */
var empty = '!a';
/** @type {?} */
var notEmpty = '!!a';
/** @type {?} */
var operations = [equals, notEquals, greaterThan, lessThan, empty, notEmpty];
var NumberFilter = /** @class */ (function (_super) {
    __extends(NumberFilter, _super);
    // private languageText: LanguagePack;
    function NumberFilter(languagePack) {
        var _this = _super.call(this) || this;
        _this.languagePack = languagePack;
        // tslint:disable-next-line:variable-name
        _this._selectedIndex = null;
        if (NumberFilter.operationList.length === 0) {
            operations.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                NumberFilter.operationList.push({ predicate: fn, text: null });
            }));
        }
        NumberFilter.operationList[0].text = languagePack.filterLabels.NumberEquals; // equals //
        NumberFilter.operationList[1].text = languagePack.filterLabels.NumberNotEquals; // notEquals //
        NumberFilter.operationList[2].text = languagePack.filterLabels.NumberGreaterThan; // greaterThan //
        NumberFilter.operationList[3].text = languagePack.filterLabels.NumberLessThan; // lessThan //
        NumberFilter.operationList[4].text = languagePack.filterLabels.NumberEmpty; // empty //
        NumberFilter.operationList[5].text = languagePack.filterLabels.NumberNotEmpty; // notEmpty //
        return _this;
    }
    Object.defineProperty(NumberFilter.prototype, "selectedIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedIndex;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selectedIndex = value;
            // init filter parameters
            if (value === 0 || value === 1 || value === 2 || value === 3) { // equals notEquals greaterThan lessThan
                this.parameters = [{ value: null, text: this.languagePack.filterLabels.Number }];
            }
            else { // empty notEmpty
                this.parameters = null;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberFilter.prototype, "selectedValue", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._selectedIndex !== null) {
                return NumberFilter.operationList[this._selectedIndex];
            }
            else {
                return null;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NumberFilter.prototype.getOperations = /**
     * @return {?}
     */
    function () {
        return NumberFilter.operationList;
    };
    /**
     * @param {?} dynamicVariable
     * @return {?}
     */
    NumberFilter.prototype.toString = /**
     * @param {?} dynamicVariable
     * @return {?}
     */
    function (dynamicVariable) {
        /** @type {?} */
        var a = '_a$';
        /** @type {?} */
        var b = '_b$';
        /** @type {?} */
        var predicate = this.selectedValue.predicate.replace('a', a).replace('b', b);
        /** @type {?} */
        var statement = predicate.replace(a, a + "['" + dynamicVariable + "']");
        // one static variable (equals, notEquals,greaterThan,lessThan)
        if (this._selectedIndex === 0 ||
            this._selectedIndex === 1 ||
            this._selectedIndex === 2 ||
            this._selectedIndex === 3) {
            /** @type {?} */
            var value = this.parameters[0].value ? this.parameters[0].value.toString() : ' null ';
            return statement.replace(b, value);
        }
        else { // none static variable (empty, notEmpty)
            return statement;
        }
    };
    /**
     * @return {?}
     */
    NumberFilter.prototype.toPrint = /**
     * @return {?}
     */
    function () {
        return NumberFilter.operationList[this._selectedIndex].text + ' ' + this.parameters[0].value + ' ' + (this.type || '') + ' ';
    };
    /**
     * @return {?}
     */
    NumberFilter.prototype.toSql = /**
     * @return {?}
     */
    function () {
        return NumberFilter.sql[this._selectedIndex] + ' ' + (this.parameters[0].value || '') + ' ' + (this.type || '') + ' ';
    };
    NumberFilter.sql = ['=', '<>', '>', '<', 'IS NULL', 'IS NOT NULL'];
    NumberFilter.operationList = [];
    return NumberFilter;
}(AbstractFilter));
export { NumberFilter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NumberFilter.sql;
    /**
     * @type {?}
     * @private
     */
    NumberFilter.operationList;
    /**
     * @type {?}
     * @private
     */
    NumberFilter.prototype._selectedIndex;
    /** @type {?} */
    NumberFilter.prototype.languagePack;
}
//# sourceMappingURL=data:application/json;base64,