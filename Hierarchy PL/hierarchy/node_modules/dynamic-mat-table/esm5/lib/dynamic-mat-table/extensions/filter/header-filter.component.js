/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/filter/header-filter.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, HostBinding, Output, ViewChild, Input, EventEmitter, ChangeDetectorRef, QueryList, ContentChildren } from '@angular/core';
import { TableService } from '../../dynamic-mat-table.service';
import { TextFilter } from './compare/text-filter';
import { NumberFilter } from './compare/number-filter';
import { transition, trigger, query, style, stagger, animate } from '@angular/animations';
import { TableIntl } from '../../../international/table-Intl';
import { MatMenuTrigger } from '@angular/material/menu';
import { isNullorUndefined } from '../../../cores/type';
/** @type {?} */
var listAnimation = trigger('listAnimation', [
    transition('* <=> *', [
        query(':enter', [style({ opacity: 0 }), stagger('10ms', animate('400ms ease-out', style({ opacity: 1 })))], { optional: true }),
    ])
]);
var HeaderFilterComponent = /** @class */ (function () {
    function HeaderFilterComponent(languagePack, service, cdr) {
        this.languagePack = languagePack;
        this.service = service;
        this.cdr = cdr;
        this.filterChanged = new EventEmitter();
        this.filterList = [];
    }
    Object.defineProperty(HeaderFilterComponent.prototype, "filters", {
        get: /**
         * @return {?}
         */
        function () {
            if (isNullorUndefined(this.filterList) === true || this.filterList.length === 0) {
                this.filterList = [];
                this.addNewFilter(this.field.type || 'text');
            }
            return this.filterList;
        },
        set: /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            this.filterList = values;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeaderFilterComponent.prototype, "hasValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.filters && this.filters.filter((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return f.hasValue() === true; })).length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeaderFilterComponent.prototype, "showTrigger", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.menu === undefined) {
                return false;
            }
            else {
                return this.menu.menuOpen || this.hasValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    HeaderFilterComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.eventsSubscription) {
            this.eventsSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    HeaderFilterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (isNullorUndefined(this.filters)) {
            this.filters = [];
            this.addNewFilter(this.field.type);
        }
    };
    /**
     * @param {?=} type
     * @return {?}
     */
    HeaderFilterComponent.prototype.addNewFilter = /**
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        if (type === void 0) { type = 'text'; }
        switch (type || 'text') {
            case 'text': {
                this.filterList.push(new TextFilter(this.languagePack));
                break;
            }
            case 'number': {
                this.filterList.push(new NumberFilter(this.languagePack));
                break;
            }
            case 'date': {
                // this.compare = new DateCompare(service);
                break;
            }
            case 'boolean': {
                // this.compare = new BooleanCompare(service);
                break;
            }
            default: this.filterList.push(new TextFilter(this.languagePack));
        }
        this.filters[this.filters.length - 1].selectedIndex = 0;
        return this.filters[this.filters.length - 1];
    };
    /**
     * @return {?}
     */
    HeaderFilterComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.menu) {
            this.eventsSubscription = this.menu.menuOpened.subscribe((/**
             * @return {?}
             */
            function () { return _this.focusToLastInput(); }));
        }
    };
    /**
     * @return {?}
     */
    HeaderFilterComponent.prototype.focusToLastInput = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.filterInputList.length > 0) {
                _this.filterInputList.last.focus();
            }
        }));
    };
    /**
     * @param {?} index
     * @param {?} action
     * @return {?}
     */
    HeaderFilterComponent.prototype.filterAction_OnClick = /**
     * @param {?} index
     * @param {?} action
     * @return {?}
     */
    function (index, action) {
        var _this = this;
        if (action === 0 || action === 1) { // and or
            this.filters[index].type = action === 0 ? 'and' : 'or';
            if (this.filters.length === index + 1) {
                this.addNewFilter(this.field.type);
                this.focusToLastInput();
            }
        }
        else if (action === 2 && this.filters.length > 1) { // delete
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.filters.splice(index, 1);
                _this.cdr.detectChanges();
                _this.focusToLastInput();
            })); // bug for delete filter item(unwanted reaction close menu)
        }
    };
    /**
     * @return {?}
     */
    HeaderFilterComponent.prototype.clearColumn_OnClick = /**
     * @return {?}
     */
    function () {
        this.filterList = [];
        this.filterChanged.emit(this.filterList);
    };
    /**
     * @return {?}
     */
    HeaderFilterComponent.prototype.applyFilter_OnClick = /**
     * @return {?}
     */
    function () {
        this.filterChanged.emit(this.filterList);
    };
    HeaderFilterComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'header-filter',
                    template: "<ng-content></ng-content>\r\n\r\n<mat-menu filter-event #filterMenu=\"matMenu\" class=\"menu\" >\r\n  <ng-template matMenuContent>\r\n\r\n  <div filter-event class=\"menu-title\">\r\n    {{field?.header}}\r\n  </div>\r\n  <div [@listAnimation]=\"filters.length\" filter-event *ngFor=\"let filter of filters; let index = index\" class=\"filter-panel\">\r\n\r\n    <mat-form-field>\r\n      <mat-select [value]=\"filter.selectedIndex\" [panelClass]=\"'mat-elevation-z10'\" (selectionChange)=\"filter.selectedIndex = $event.value;\" placeholder='Conditions' (keyup.enter)=\"applyFilter_OnClick()\">\r\n        <mat-option *ngFor=\"let op of filter.getOperations(); let selectedIndex=index\" [value]=\"selectedIndex\">\r\n          {{ op.text }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <div *ngFor=\"let ctrl of filter?.parameters\">\r\n      <mat-form-field class=\"input-field\">\r\n        <mat-label>{{ctrl.text}}</mat-label>\r\n        <input matInput #filterInput=\"matInput\" [(ngModel)]=\"ctrl.value\" [placeholder]=\"\" (keyup.enter)=\"applyFilter_OnClick()\" autocomplete=\"off\"/>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div class=\"or-and\">\r\n      <span *ngIf=\"filters?.length !== index+1\" class=\"selected-filter-type\">{{ filter?.type === 'and' ? languagePack.filterLabels.And : languagePack.filterLabels.Or}}</span>\r\n      <span class=\"svg\">\r\n        <mat-icon (click)=\"filterAction_OnClick(index,0)\">add</mat-icon>\r\n      </span>\r\n      <span class=\"svg\">\r\n        <mat-icon (click)=\"filterAction_OnClick(index,1)\" style=\"transform: rotate(90deg);\">drag_handle</mat-icon>\r\n      </span>\r\n      <span class=\"svg\">\r\n        <mat-icon (click)=\"filterAction_OnClick(index,2)\">clear</mat-icon>\r\n      </span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div filter-event class=\"menu-action\">\r\n    <button mat-raised-button (click)=\"clearColumn_OnClick()\">{{ languagePack.filterLabels.Clear }}</button>\r\n    <button mat-raised-button color=\"primary\" (click)=\"applyFilter_OnClick()\">{{ languagePack.filterLabels.Search}}</button>\r\n  </div>\r\n</ng-template>\r\n</mat-menu>\r\n\r\n<span class=\"trigger\" [matMenuTriggerFor]=\"filterMenu\" *ngIf=\"field.filterable !== false\">\r\n  <mat-icon>filter_list</mat-icon>\r\n</span>\r\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [listAnimation],
                    styles: ["@media print{.printpreview{background-color:#fff;position:fixed;width:100%;height:auto;z-index:99999999;margin:0;padding:0;top:0;left:0;overflow:visible;display:block}}.disable-backdrop-click .cdk-overlay-backdrop.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing{pointer-events:none}:host{display:flex;align-items:center;width:100%;align-self:stretch}.trigger{color:rgba(0,0,0,.3);display:flex;opacity:0;transform:translateY(-5px);cursor:pointer;transition-duration:.4s;transition-property:opacity,transform;position:sticky;right:0;z-index:1;padding-left:0 8px}:host.has-value .trigger{color:rgba(0,0,0,.54)}:host.show-trigger .trigger,:host:hover .trigger{opacity:1;transform:translateY(-1px)}::ng-deep.mat-menu-content:not(:empty){padding:0!important}.mat-menu-item-highlighted:not([disabled]),.mat-menu-item.cdk-keyboard-focused:not([disabled]),.mat-menu-item.cdk-program-focused:not([disabled]),.mat-menu-item:hover:not([disabled]){background-color:inherit}.input-field{margin-top:-15px}.menu-title{font-weight:bolder;top:-8px;position:sticky;background-color:#fff;z-index:1}.menu-action{position:sticky;bottom:-8px;padding-top:10px;padding-bottom:0;background-color:#fff}.menu-action button{width:calc(50% - 10px);margin:5px;border-radius:10px}.filter-panel{border-radius:5px;background-color:#fdfbfb;border:1px solid #efefef;transition:.5s;padding:5px;overflow:hidden;font-size:14px;margin-top:10px;display:flex;flex-direction:column}.filter-panel:nth-child(2){margin-top:0!important}.filter-panel:hover{border:1px solid #d1d1d1}.filter-panel:hover .svg{opacity:1;transform:translateY(-1px)}.or-and{display:inherit!important;text-align:right;margin:-12px 0;height:35px;cursor:inherit;font-size:12px}.svg{opacity:0;transform:translateY(-5px);transition-duration:.4s;transition-property:opacity,transform;margin-left:5px;padding:2px;border-radius:5px;color:#4c4c4c;cursor:pointer;display:inline-block!important;height:24px}.svg mat-icon{margin:0;vertical-align:top;border-radius:5px}.svg mat-icon:hover{color:#fff;background-color:#89898a}.svg:hover{background-color:#f8f8f8}.selected-filter-type{float:left;color:#fff;background-color:#89898a;border-radius:5px;padding:0 4px;line-height:24px}::ng-deep .menu{padding:8px;-webkit-user-select:none;-moz-user-select:none;user-select:none}"]
                }] }
    ];
    /** @nocollapse */
    HeaderFilterComponent.ctorParameters = function () { return [
        { type: TableIntl },
        { type: TableService },
        { type: ChangeDetectorRef }
    ]; };
    HeaderFilterComponent.propDecorators = {
        field: [{ type: Input }],
        filterChanged: [{ type: Output }],
        filterInputList: [{ type: ContentChildren, args: ['filterInput',] }],
        menu: [{ type: ViewChild, args: [MatMenuTrigger, { static: true },] }],
        filters: [{ type: Input }],
        hasValue: [{ type: HostBinding, args: ['class.has-value',] }],
        showTrigger: [{ type: HostBinding, args: ['class.show-trigger',] }]
    };
    return HeaderFilterComponent;
}());
export { HeaderFilterComponent };
if (false) {
    /** @type {?} */
    HeaderFilterComponent.prototype.field;
    /** @type {?} */
    HeaderFilterComponent.prototype.filterChanged;
    /** @type {?} */
    HeaderFilterComponent.prototype.filterInputList;
    /** @type {?} */
    HeaderFilterComponent.prototype.menu;
    /**
     * @type {?}
     * @private
     */
    HeaderFilterComponent.prototype.filterList;
    /**
     * @type {?}
     * @private
     */
    HeaderFilterComponent.prototype.eventsSubscription;
    /** @type {?} */
    HeaderFilterComponent.prototype.languagePack;
    /** @type {?} */
    HeaderFilterComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    HeaderFilterComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,