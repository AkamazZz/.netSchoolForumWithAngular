/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/dynamic-mat-table.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var TableService = /** @class */ (function () {
    function TableService() {
    }
    /************************************* Local Export *****************************************/
    /**
     * ********************************** Local Export ****************************************
     * @return {?}
     */
    TableService.getFormattedTime = /**
     * ********************************** Local Export ****************************************
     * @return {?}
     */
    function () {
        /** @type {?} */
        var today = new Date();
        /** @type {?} */
        var y = today.getFullYear();
        /** @type {?} */
        var m = today.getMonth() + 1;
        /** @type {?} */
        var d = today.getDate();
        /** @type {?} */
        var h = today.getHours();
        /** @type {?} */
        var mi = today.getMinutes();
        /** @type {?} */
        var s = today.getSeconds();
        return y + "-" + m + "-" + d + "-" + h + "-" + mi + "-" + s;
    };
    // private downloadBlob(blob: any, filename: string) {
    //   if (navigator.msSaveBlob) { // IE 10+
    //     navigator.msSaveBlob(blob, filename);
    //   } else {
    //     const link = document.createElement('a');
    //     if (link.download !== undefined) {
    //       // Browsers that support HTML5 download attribute
    //       const link = window.document.createElement('a');
    //       const date = new Date();
    //       link.className = 'download' + date.getUTCFullYear() + date.getUTCMonth() + date.getUTCSeconds();
    //       link.setAttribute('href', blob);
    //       link.setAttribute('download', filename);
    //       link.style.visibility = 'hidden';
    //       link.click();
    //       // setTimeout(() => {
    //       //   const g = document.body.getElementsByClassName(link.className);
    //       //   document.body.removeChild(link);
    //       // });
    //     }
    //   }
    // }
    // private downloadBlob(blob: any, filename: string) {
    //   if (navigator.msSaveBlob) { // IE 10+
    //     navigator.msSaveBlob(blob, filename);
    //   } else {
    //     const link = document.createElement('a');
    //     if (link.download !== undefined) {
    //       // Browsers that support HTML5 download attribute
    //       const link = window.document.createElement('a');
    //       const date = new Date();
    //       link.className = 'download' + date.getUTCFullYear() + date.getUTCMonth() + date.getUTCSeconds();
    //       link.setAttribute('href', blob);
    //       link.setAttribute('download', filename);
    //       link.style.visibility = 'hidden';
    //       link.click();
    //       // setTimeout(() => {
    //       //   const g = document.body.getElementsByClassName(link.className);
    //       //   document.body.removeChild(link);
    //       // });
    //     }
    //   }
    // }
    /**
     * @private
     * @param {?} blob
     * @param {?} filename
     * @return {?}
     */
    TableService.prototype.downloadBlob = 
    // private downloadBlob(blob: any, filename: string) {
    //   if (navigator.msSaveBlob) { // IE 10+
    //     navigator.msSaveBlob(blob, filename);
    //   } else {
    //     const link = document.createElement('a');
    //     if (link.download !== undefined) {
    //       // Browsers that support HTML5 download attribute
    //       const link = window.document.createElement('a');
    //       const date = new Date();
    //       link.className = 'download' + date.getUTCFullYear() + date.getUTCMonth() + date.getUTCSeconds();
    //       link.setAttribute('href', blob);
    //       link.setAttribute('download', filename);
    //       link.style.visibility = 'hidden';
    //       link.click();
    //       // setTimeout(() => {
    //       //   const g = document.body.getElementsByClassName(link.className);
    //       //   document.body.removeChild(link);
    //       // });
    //     }
    //   }
    // }
    /**
     * @private
     * @param {?} blob
     * @param {?} filename
     * @return {?}
     */
    function (blob, filename) {
        if (navigator.msSaveBlob) {
            // IE 10+
            navigator.msSaveBlob(blob, filename);
        }
        else {
            /** @type {?} */
            var link = document.createElement("a");
            if (link.download !== undefined) {
                // Browsers that support HTML5 download attribute
                /** @type {?} */
                var url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", filename);
                link.style.visibility = "hidden";
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }
    };
    /**
     * @template T
     * @param {?} columns
     * @param {?} rows
     * @param {?} selectionModel
     * @param {?=} filename
     * @return {?}
     */
    TableService.prototype.exportToCsv = /**
     * @template T
     * @param {?} columns
     * @param {?} rows
     * @param {?} selectionModel
     * @param {?=} filename
     * @return {?}
     */
    function (columns, rows, selectionModel, filename) {
        if (filename === void 0) { filename = ""; }
        filename = filename === "" ? this.tableName + TableService.getFormattedTime() + ".csv" : filename;
        if (!rows || !rows.length) {
            return;
        }
        /** @type {?} */
        var fields = columns.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.exportable !== false && c.display !== 'hiden'; }));
        /** @type {?} */
        var separator = ",";
        /** @type {?} */
        var CR_LF = "\n";
        //'\u0D0A';
        /** @type {?} */
        var keys = fields.map((/**
         * @param {?} f
         * @return {?}
         */
        function (f) { return f.name; }));
        /** @type {?} */
        var headers = fields.map((/**
         * @param {?} f
         * @return {?}
         */
        function (f) { return f.header; }));
        /** @type {?} */
        var csvContent = headers.join(separator) + CR_LF +
            rows
                .map((/**
             * @param {?} row
             * @return {?}
             */
            function (row) {
                return fields.map((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) {
                    /** @type {?} */
                    var cell = f.toExport(row, "csv") || "";
                    cell = cell instanceof Date ? cell.toLocaleString() : cell.toString().replace(/"/g, '""');
                    if (cell.search(/("|,|\n)/g) >= 0) {
                        cell = "\"" + cell + "\"";
                    }
                    return cell;
                })).join(separator);
            })).join(CR_LF);
        /** @type {?} */
        var blob = new Blob([
            new Uint8Array([0xEF, 0xBB, 0xBF]),
            csvContent
        ], { type: 'text/csv;charset=utf-8' });
        this.downloadBlob(blob, filename);
    };
    /**
     * @param {?} rows
     * @param {?=} filename
     * @return {?}
     */
    TableService.prototype.exportToJson = /**
     * @param {?} rows
     * @param {?=} filename
     * @return {?}
     */
    function (rows, filename) {
        if (filename === void 0) { filename = ""; }
        filename =
            filename === ""
                ? this.tableName + TableService.getFormattedTime() + ".json"
                : filename;
        /** @type {?} */
        var blob = new Blob([JSON.stringify(rows)], {
            type: "text/csv;charset=utf-8;",
        });
        this.downloadBlob(blob, filename);
    };
    /************************************* Save Setting into storage *****************************************/
    /**
     * ********************************** Save Setting into storage ****************************************
     * @param {?} columnInfo
     * @param {?=} saveName
     * @return {?}
     */
    TableService.prototype.loadSavedColumnInfo = /**
     * ********************************** Save Setting into storage ****************************************
     * @param {?} columnInfo
     * @param {?=} saveName
     * @return {?}
     */
    function (columnInfo, saveName) {
        // Only load if a save name is passed in
        if (saveName) {
            if (!localStorage) {
                return;
            }
            /** @type {?} */
            var loadedInfo = localStorage.getItem(saveName + "-columns");
            if (loadedInfo) {
                return JSON.parse(loadedInfo);
            }
            this.saveColumnInfo(columnInfo);
            return columnInfo;
        }
    };
    /**
     * @param {?} columnInfo
     * @param {?=} saveName
     * @return {?}
     */
    TableService.prototype.saveColumnInfo = /**
     * @param {?} columnInfo
     * @param {?=} saveName
     * @return {?}
     */
    function (columnInfo, saveName) {
        if (saveName === void 0) { saveName = this.tableName; }
        // console.log(saveName);
        if (saveName) {
            if (!localStorage) {
                return;
            }
            localStorage.setItem(saveName + "-columns", JSON.stringify(columnInfo));
        }
    };
    TableService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root",
                },] }
    ];
    /** @nocollapse */
    TableService.ctorParameters = function () { return []; };
    /** @nocollapse */ TableService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TableService_Factory() { return new TableService(); }, token: TableService, providedIn: "root" });
    return TableService;
}());
export { TableService };
if (false) {
    /** @type {?} */
    TableService.prototype.tableName;
}
//# sourceMappingURL=data:application/json;base64,