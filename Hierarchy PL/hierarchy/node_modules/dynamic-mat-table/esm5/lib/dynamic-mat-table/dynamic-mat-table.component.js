/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/dynamic-mat-table.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __assign, __extends } from "tslib";
import { Component, QueryList, ElementRef, ViewChild, TemplateRef, Renderer2, ChangeDetectorRef, Input, ContentChildren } from '@angular/core';
import { TableCoreDirective } from '../cores/table.core.directive';
import { TableService } from './dynamic-mat-table.service';
import { HeaderFilterComponent } from './extensions/filter/header-filter.component';
import { MatDialog } from '@angular/material/dialog';
import { PrintTableDialogComponent } from './extensions/print-dialog/print-dialog.component';
import { trigger, transition, style, animate, query, stagger, state } from '@angular/animations';
import { ResizeColumn } from '../models/resize-column.mode';
import { TableIntl } from '../international/table-Intl';
import { moveItemInArray } from '@angular/cdk/drag-drop';
import { isNullorUndefined } from '../cores/type';
import { delay } from 'rxjs/operators';
import { MatMenuTrigger } from '@angular/material/menu';
import { OverlayContainer } from '@angular/cdk/overlay';
import { MAT_TOOLTIP_DEFAULT_OPTIONS } from '@angular/material/tooltip';
import { requestFullscreen } from '../utilies/html.helper';
/** @type {?} */
export var tableAnimation = trigger('tableAnimation', [
    transition('void => *', [
        query(':enter', style({ transform: 'translateX(-50%)', opacity: 0 }), {
            //limit: 5,
            optional: true,
        }),
        query(':enter', stagger('0.01s', [
            animate('0.5s ease', style({ transform: 'translateX(0%)', opacity: 1 })),
        ]), {
            //limit: 5, 
            optional: true
        }),
    ]),
]);
/** @type {?} */
export var expandAnimation = trigger('detailExpand', [
    state('collapsed', style({ height: '0px', minHeight: '0' })),
    state('expanded', style({ height: '*' })),
    transition('expanded <=> collapsed', animate('100ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
]);
/** @type {?} */
export var cellTooltipDefaults = {
    showDelay: 500,
    hideDelay: 400,
    touchendHideDelay: 1000,
    position: 'above',
};
/**
 * @template T
 */
var DynamicMatTableComponent = /** @class */ (function (_super) {
    __extends(DynamicMatTableComponent, _super);
    function DynamicMatTableComponent(dialog, renderer, languagePack, tableService, cdr, overlayContainer) {
        var _this = _super.call(this, tableService, cdr) || this;
        _this.dialog = dialog;
        _this.renderer = renderer;
        _this.languagePack = languagePack;
        _this.tableService = tableService;
        _this.cdr = cdr;
        _this.overlayContainer = overlayContainer;
        _this.contextMenuPosition = { x: '0px', y: '0px' };
        _this.dragDropData = { dragColumnIndex: -1, dropColumnIndex: -1 };
        _this.printing = true;
        _this.printTemplate = null;
        _this.resizeColumn = new ResizeColumn();
        _this.indexTrackFn = (/**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            return index;
        });
        _this.currentContextMenuSender = {};
        _this.overlayContainer.getContainerElement().addEventListener('contextmenu', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.preventDefault();
            return false;
        }));
        _this.eventsSubscription = _this.resizeColumn.widthUpdate.pipe(delay(100)).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.columns[data.i].width = data.w;
            if (_this.tableSetting.columnSetting[data.i]) {
                _this.tableSetting.columnSetting[data.i].width = data.w;
            }
            _this.refreshGrid();
        }));
        return _this;
    }
    Object.defineProperty(DynamicMatTableComponent.prototype, "setting", {
        get: /**
         * @return {?}
         */
        function () {
            return this.tableSetting;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!isNullorUndefined(value)) {
                value.columnSetting = value.columnSetting || this.tableSetting.columnSetting;
                value.alternativeRowStyle = value.alternativeRowStyle || this.tableSetting.alternativeRowStyle;
                value.columnSetting = value.columnSetting || this.tableSetting.columnSetting;
                value.direction = value.direction || this.tableSetting.direction;
                value.normalRowStyle = value.normalRowStyle || this.tableSetting.normalRowStyle;
                value.visibaleActionMenu = value.visibaleActionMenu || this.tableSetting.visibaleActionMenu;
                value.visibleTableMenu = value.visibleTableMenu || this.tableSetting.visibleTableMenu;
                this.tableSetting = value;
                this.setDisplayedColumns();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    DynamicMatTableComponent.prototype.trackColumn = /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (index, item) {
        return "" + item.index;
    };
    /**
     * @return {?}
     */
    DynamicMatTableComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.eventsSubscription) {
            this.eventsSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    DynamicMatTableComponent.prototype.refreshUI = /**
     * @return {?}
     */
    function () {
        var _a, _b;
        /** @type {?} */
        var scrollStrategy = this.viewport['_scrollStrategy'];
        (_a = scrollStrategy === null || scrollStrategy === void 0 ? void 0 : scrollStrategy.viewport) === null || _a === void 0 ? void 0 : _a.checkViewportSize();
        (_b = scrollStrategy === null || scrollStrategy === void 0 ? void 0 : scrollStrategy.viewport) === null || _b === void 0 ? void 0 : _b.scrollToOffset(0);
        this.cdr.detectChanges();
    };
    /**
     * @return {?}
     */
    DynamicMatTableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var scrollStrategy = this.viewport['_scrollStrategy'];
        scrollStrategy.offsetChange.subscribe((/**
         * @param {?} offset
         * @return {?}
         */
        function (offset) {
            // console.log(offset);
        }));
        this.viewport.renderedRangeStream.subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            // in expanding row scrolling make not good apperance therefor close it.
            if (_this.expandedElement && _this.expandedElement.option && _this.expandedElement.option.expand) {
                // console.log('clear', t); 
                // this.expandedElement.option.expand = false;
                // this.expandedElement = null;
            }
        }));
    };
    /**
     * @return {?}
     */
    DynamicMatTableComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.tvsDataSource.paginator = this.paginator;
        this.tvsDataSource.sort = this.sort;
        this.dataSource.subscribe((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            //console.log(x);      
            _this.initSystemField(x);
            _this.tvsDataSource.data = x;
            // this.cdr.detectChanges();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.refreshUI();
            }), 0);
        }));
        this.tvsDataSource.sort.sortChange.subscribe((/**
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            _this.pagination.pageIndex = 0;
            _this.onTableEvent.emit({ event: 'SortChanged', sender: sort });
        }));
        // this.dataSource.dataOfRange$.subscribe((data) => {
        //   // console.log('dataOfRange');
        // });
    };
    Object.defineProperty(DynamicMatTableComponent.prototype, "inverseOfTranslation", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.viewport || !this.viewport["_renderedContentOffset"]) {
                return -0;
            }
            /** @type {?} */
            var offset = this.viewport["_renderedContentOffset"];
            return -offset;
        },
        enumerable: true,
        configurable: true
    });
    // TO DO
    // TO DO
    /**
     * @param {?} cellRef
     * @return {?}
     */
    DynamicMatTableComponent.prototype.ellipsis = 
    // TO DO
    /**
     * @param {?} cellRef
     * @return {?}
     */
    function (cellRef) {
        // console.log(cellRef.clientHeight);
        // console.log(cellRef.scrollHeight);
        if (cellRef.clientHeight > this.rowHeight) {
            cellRef.style.maxHeight = '48px';
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    DynamicMatTableComponent.prototype.rowStyle = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        var _a;
        /** @type {?} */
        var style = ((_a = row === null || row === void 0 ? void 0 : row.option) === null || _a === void 0 ? void 0 : _a.style) || {};
        if (this.setting.alternativeRowStyle && row.id % 2 === 0) {
            // style is high priority
            style = __assign(__assign({}, this.setting.alternativeRowStyle), style);
        }
        if (this.setting.rowStyle) {
            style = __assign(__assign({}, this.setting.rowStyle), style);
        }
        return style;
    };
    /**
     * @param {?} option
     * @param {?} column
     * @return {?}
     */
    DynamicMatTableComponent.prototype.cellClass = /**
     * @param {?} option
     * @param {?} column
     * @return {?}
     */
    function (option, column) {
        /** @type {?} */
        var clas = null;
        if (option && column.name) {
            clas = option[column.name] ? option[column.name].style : null;
        }
        if (clas === null) {
            return column.cellClass;
        }
        else {
            return __assign(__assign({}, clas), column.cellClass);
        }
    };
    /**
     * @param {?} option
     * @param {?} column
     * @return {?}
     */
    DynamicMatTableComponent.prototype.cellStyle = /**
     * @param {?} option
     * @param {?} column
     * @return {?}
     */
    function (option, column) {
        /** @type {?} */
        var style = null;
        if (option && column.name) {
            style = option[column.name] ? option[column.name].style : null;
        }
        if (style === null) {
            return column.cellStyle;
        }
        else {
            return __assign(__assign({}, style), column.cellStyle);
        }
    };
    /**
     * @param {?} option
     * @param {?} cellName
     * @return {?}
     */
    DynamicMatTableComponent.prototype.cellIcon = /**
     * @param {?} option
     * @param {?} cellName
     * @return {?}
     */
    function (option, cellName) {
        if (option && cellName) {
            return option[cellName] ? option[cellName].icon : null;
        }
        else {
            return null;
        }
    };
    /**
     * @param {?} column
     * @param {?} filter
     * @return {?}
     */
    DynamicMatTableComponent.prototype.filter_onChanged = /**
     * @param {?} column
     * @param {?} filter
     * @return {?}
     */
    function (column, filter) {
        var _this = this;
        this.pending = true;
        this.tvsDataSource.setFilter(column.name, filter).subscribe((/**
         * @return {?}
         */
        function () {
            _this.pending = false;
        }));
    };
    /**
     * @param {?} event
     * @param {?} column
     * @param {?} row
     * @return {?}
     */
    DynamicMatTableComponent.prototype.onContextMenu = /**
     * @param {?} event
     * @param {?} column
     * @param {?} row
     * @return {?}
     */
    function (event, column, row) {
        var _a, _b;
        if (((_a = this.currentContextMenuSender) === null || _a === void 0 ? void 0 : _a.time) && (new Date().getTime() - this.currentContextMenuSender.time) < 500) {
            return;
        }
        this.contextMenu.closeMenu();
        if (((_b = this.contextMenuItems) === null || _b === void 0 ? void 0 : _b.length) === 0) {
            return;
        }
        event.preventDefault();
        this.contextMenuPosition.x = event.clientX + 'px';
        this.contextMenuPosition.y = event.clientY + 'px';
        this.currentContextMenuSender = { column: column, row: row, time: new Date().getTime() };
        this.contextMenu.menuData = this.currentContextMenuSender;
        this.contextMenu.menu.focusFirstItem('mouse');
        this.onRowEvent.emit({ event: 'BeforContextMenuOpen', sender: { row: row, column: column, contextMenu: this.contextMenuItems } });
        this.contextMenu.openMenu();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    DynamicMatTableComponent.prototype.onContextMenuItemClick = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.contextMenu.menuData.item = data;
        this.onRowEvent.emit({ event: 'ContextMenuClick', sender: this.contextMenu.menuData });
    };
    /**
     * @param {?} e
     * @return {?}
     */
    DynamicMatTableComponent.prototype.tableMenuActionChange = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        if (e.type === 'TableSetting') {
            this.saveSetting(e.data, false);
        }
        else if (e.type === 'FullScreenMode') {
            requestFullscreen(this.tbl.elementRef);
        }
        else if (e.type === 'Download') {
            if (e.data === 'CSV') {
                this.tableService.exportToCsv(this.columns, this.tvsDataSource.filteredData, this.rowSelectionModel);
            }
            else if (e.data === 'JSON') {
                this.tableService.exportToJson(this.tvsDataSource.filteredData);
            }
        }
        else if (e.type === 'FilterClear') {
            this.tvsDataSource.clearFilter();
            this.headerFilterList.forEach((/**
             * @param {?} hf
             * @return {?}
             */
            function (hf) { return hf.clearColumn_OnClick(); }));
        }
        else if (e.type === 'Print') {
            this.printConfig.displayedFields = this.columns
                .filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return isNullorUndefined(c.printable) || c.printable === true; }))
                .map((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return o.name; }));
            this.printConfig.title = this.printConfig.title || this.tableName;
            this.printConfig.direction = this.tableSetting.direction || 'ltr';
            this.printConfig.columns = this.tableColumns;
            this.printConfig.data = this.tvsDataSource.filteredData;
            /** @type {?} */
            var params = this.tvsDataSource.toTranslate();
            this.printConfig.tablePrintParameters = [];
            params.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                _this.printConfig.tablePrintParameters.push(item);
            }));
            this.dialog.open(PrintTableDialogComponent, {
                width: '90vw',
                data: this.printConfig,
            });
        }
        else if (e.type === 'SaveSetting') {
            this.saveSetting(null, true);
        }
    };
    /**
     * @param {?} contextMenuItem
     * @param {?} row
     * @return {?}
     */
    DynamicMatTableComponent.prototype.rowMenuActionChange = /**
     * @param {?} contextMenuItem
     * @param {?} row
     * @return {?}
     */
    function (contextMenuItem, row) {
        console.log('contextMenuItem');
        this.onRowEvent.emit({ event: 'RowActionMenu', sender: { row: row, action: contextMenuItem } });
        // this.rowActionMenuChange.emit({actionItem: contextMenuItem, rowItem: row });
    };
    /**
     * @param {?} e
     * @return {?}
     */
    DynamicMatTableComponent.prototype.doRendering = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.pending = false;
        if (this.viewport.getViewportSize() === 0) {
            // console.log('zero');
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    DynamicMatTableComponent.prototype.pagination_onChange = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // console.log(e);
        this.pending = true;
        this.tvsDataSource.refreshFilterPredicate(); // pagination Bugfixed
        this.paginationChange.emit(e);
    };
    /**
     * @return {?}
     */
    DynamicMatTableComponent.prototype.reload_onClick = /**
     * @return {?}
     */
    function () {
        this.onTableEvent.emit({ sender: null, event: 'ReloadData' });
    };
    /////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////
    /**
     * @param {?} event
     * @param {?} index
     * @param {?} type
     * @return {?}
     */
    DynamicMatTableComponent.prototype.onResizeColumn = 
    /////////////////////////////////////////////////////////////////
    /**
     * @param {?} event
     * @param {?} index
     * @param {?} type
     * @return {?}
     */
    function (event, index, type) {
        // console.log(index,type);    
        this.resizeColumn.resizeHandler = type;
        this.resizeColumn.startX = event.pageX;
        // console.log(this.resizeColumn.resizeHandler, this.resizeColumn.startX);
        if (this.resizeColumn.resizeHandler === 'right') {
            this.resizeColumn.startWidth = event.target.parentElement.clientWidth;
            this.resizeColumn.currentResizeIndex = index;
        }
        else {
            if (event.target.parentElement.previousElementSibling === null) {
                // for first column not resize
                return;
            }
            else {
                this.resizeColumn.startWidth =
                    event.target.parentElement.previousElementSibling.clientWidth;
                this.resizeColumn.currentResizeIndex = index;
            }
        }
        event.preventDefault();
        this.mouseMove(index);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    DynamicMatTableComponent.prototype.mouseMove = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        this.resizableMousemove = this.renderer.listen('document', 'mousemove', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (_this.resizeColumn.resizeHandler !== null && event.buttons) {
                /** @type {?} */
                var rtl = _this.direction === 'rtl' ? -1 : 1;
                /** @type {?} */
                var width = 0;
                if (_this.resizeColumn.resizeHandler === 'right') {
                    /** @type {?} */
                    var dx = event.pageX - _this.resizeColumn.startX;
                    width = _this.resizeColumn.startWidth + rtl * dx;
                }
                else {
                    /** @type {?} */
                    var dx = _this.resizeColumn.startX - event.pageX;
                    width = _this.resizeColumn.startWidth - rtl * dx;
                }
                if (_this.resizeColumn.currentResizeIndex === index && width > _this.minWidth) {
                    _this.resizeColumn.widthUpdate.next({
                        i: index - (_this.resizeColumn.resizeHandler === 'left' ? 1 : 0),
                        w: width,
                    });
                }
            }
        }));
        this.resizableMouseup = this.renderer.listen('document', 'mouseup', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (_this.resizeColumn.resizeHandler !== null) {
                _this.resizeColumn.resizeHandler = null;
                _this.resizeColumn.currentResizeIndex = -1;
            }
        }));
    };
    /**
     * @param {?} rowIndex
     * @param {?=} mode
     * @return {?}
     */
    DynamicMatTableComponent.prototype.expandRow = /**
     * @param {?} rowIndex
     * @param {?=} mode
     * @return {?}
     */
    function (rowIndex, mode) {
        if (mode === void 0) { mode = true; }
        if (rowIndex === null || rowIndex === undefined) {
            throw 'Row index is not defined.';
        }
        if (this.expandedElement === this.tvsDataSource.allData[rowIndex]) {
            this.expandedElement.option.expand = mode;
            this.expandedElement = this.expandedElement === this.tvsDataSource.allData[rowIndex] ? null : this.tvsDataSource.allData[rowIndex];
        }
        else {
            if (this.expandedElement && this.expandedElement !== this.tvsDataSource.allData[rowIndex]) {
                this.expandedElement.option.expand = false;
            }
            this.expandedElement = null;
            if (mode === true) {
                // this.viewport.scrollToIndex(rowIndex, 'smooth');      
                // setTimeout( () => {
                //   this.expandedElement = this.expandedElement === this.dataSource.allData[rowIndex] ? null : this.dataSource.allData[rowIndex];    
                //   if (this.expandedElement.option === undefined || this.expandedElement.option === null) {
                //     this.expandedElement.option = { expand: false};
                //   }
                //   this.expandedElement.option.expand = true;
                //   this.refreshGrid();
                // }, 300);
                this.expandedElement = this.expandedElement === this.tvsDataSource.allData[rowIndex] ? null : this.tvsDataSource.allData[rowIndex];
                if (this.expandedElement.option === undefined || this.expandedElement.option === null) {
                    this.expandedElement.option = { expand: false };
                }
                this.expandedElement.option.expand = true;
            }
        }
    };
    /**
     * @param {?} e
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    DynamicMatTableComponent.prototype.onRowSelection = /**
     * @param {?} e
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (e, row, column) {
        if (this.rowSelectionMode && this.rowSelectionMode !== 'none' && column.rowSelectionable !== false) {
            this.onRowSelectionChange(e, row);
        }
    };
    /**
     * @param {?} e
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    DynamicMatTableComponent.prototype.onCellClick = /**
     * @param {?} e
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (e, row, column) {
        this.onRowSelection(e, row, column);
        if (column.clickable !== false) {
            this.onRowEvent.emit({ event: 'CellClick', sender: { row: row, column: column } });
        }
    };
    /**
     * @param {?} e
     * @param {?} row
     * @return {?}
     */
    DynamicMatTableComponent.prototype.onRowDblClick = /**
     * @param {?} e
     * @param {?} row
     * @return {?}
     */
    function (e, row) {
        this.onRowEvent.emit({ event: e, sender: { row: row } });
    };
    /**
     * @param {?} e
     * @param {?} row
     * @return {?}
     */
    DynamicMatTableComponent.prototype.onRowClick = /**
     * @param {?} e
     * @param {?} row
     * @return {?}
     */
    function (e, row) {
        this.onRowEvent.emit({ event: 'RowClick', sender: { row: row } });
    };
    /************************************ Drag & Drop Column *******************************************/
    /**
     * ********************************* Drag & Drop Column ******************************************
     * @param {?} event
     * @return {?}
     */
    DynamicMatTableComponent.prototype.dragStarted = /**
     * ********************************* Drag & Drop Column ******************************************
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // console.log(event);    
        // debugger  
        // this.dragDropData.dragColumnIndex = event.source.;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DynamicMatTableComponent.prototype.dropListDropped = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event) {
            this.dragDropData.dropColumnIndex = event.currentIndex;
            this.moveColumn(event.previousIndex, event.currentIndex);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DynamicMatTableComponent.prototype.drop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);
        // updates moved data and table, but not dynamic if more dropzones
        // this.dataSource.data = clonedeep(this.dataSource.data);
    };
    /************************************  *******************************************/
    /**
     * *********************************  ******************************************
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    DynamicMatTableComponent.prototype.copyProperty = /**
     * *********************************  ******************************************
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    function (from, to) {
        /** @type {?} */
        var keys = Object.keys(from);
        keys.forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (from[key] !== undefined && from[key] === null) {
                to[key] = Array.isArray(from[key]) ? Object.assign([], from[key]) : Object.assign({}, from[key]);
            }
        }));
    };
    DynamicMatTableComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'dynamic-mat-table',
                    template: "<cdk-virtual-scroll-viewport\r\n  #tbl  \r\n  [ngClass]=\"viewportClass\"\r\n  [tvsItemSize]=\"rowHeight || 48\"\r\n  [headerHeight]=\"headerHeight || 56\"\r\n  [footerHeight]=\"headerHeight || 56\"\r\n  [headerEnabled]=\"headerEnable || true\"\r\n  [footerEnabled]=\"footerEnable || false\"\r\n  [ngStyle]=\"{'background-color': backgroundColor || 'white'}\" \r\n  [class.printpreview]=\"printing\"\r\n  (requestRendering)=\"doRendering($event)\">\r\n\r\n  <mat-table\r\n    matSort \r\n    class=\"table\"    \r\n    multiTemplateDataRows\r\n    [cdkDropListDisabled]=\"false\"    \r\n    cdkDropList \r\n    cdkDropListOrientation=\"horizontal\"    \r\n    (cdkDragStarted)=\"dragStarted($event)\"\r\n    (cdkDropListDropped)=\"dropListDropped($event)\"        \r\n    [trackBy]=\"indexTrackFn\"\r\n    [dataSource]=\"tvsDataSource\">\r\n    <!-- Checkbox Column -->\r\n    <ng-container matColumnDef=\"row-checkbox\">      \r\n        <mat-header-cell *matHeaderCellDef class=\"row-checkbox\" style=\"z-index: 2;\">\r\n          <mat-checkbox style=\"z-index: 10;\"\r\n            (change)=\"$event ? masterToggle() : null\"\r\n            [checked]=\"rowSelectionModel.hasValue() && isAllSelected()\"\r\n            [indeterminate]=\"rowSelectionModel.hasValue() && !isAllSelected()\"         \r\n            *ngIf=\"rowSelectionMode === 'multi'\">\r\n          </mat-checkbox>\r\n          <mat-icon *ngIf=\"rowSelectionMode === 'single'\">indeterminate_check_box</mat-icon>\r\n        </mat-header-cell>\r\n        <ng-container>\r\n          <mat-cell *matCellDef=\"let row\" class=\"row-checkbox\">\r\n            <mat-checkbox\r\n              (click)=\"$event.stopPropagation()\"\r\n              (change)=\"onRowSelectionChange($event, row)\"\r\n              [checked]=\"rowSelectionModel?.isSelected(row)\">\r\n            </mat-checkbox>\r\n          </mat-cell>\r\n        </ng-container>\r\n    </ng-container> \r\n    <!-- Table Columns -->\r\n    <ng-container *ngFor=\"let column of columns; let i = index; trackBy: trackColumn\" [matColumnDef]=\"column.name\"\r\n      [sticky]=\"column.sticky === 'start' ? true : false\" [stickyEnd]=\"column.sticky === 'end' ? true : false\">      \r\n      <!-- ************************** Table Header ************************* -->      \r\n        <mat-header-cell *matHeaderCellDef                \r\n          cdkDrag \r\n          [cdkDragDisabled]=\"column?.draggable === false\"\r\n          cdkDragBoundary=\"mat-header-row\"\r\n          cdkDropListLockAxis=\"x\"        \r\n          [cdkDragData]=\"{name: column.name, columIndex: i}\"        \r\n          [style.maxWidth.px]=\"column.width\"\r\n          [style.minWidth.px]=\"column.width\"        \r\n          [class.active-resize]=\"resizeColumn.currentResizeIndex===i\" cdkDragBoundary=\"mat-header-row\">\r\n          <div class=\"left-resizer-handler\" (mousedown)=\"onResizeColumn($event, i, 'left')\"></div>\r\n          <header-filter [field]=\"column\" (filterChanged)=\"filter_onChanged(column, $event)\" [filters]=\"tvsDataSource.getFilter(column.name)\">\r\n            <mat-icon class=\"column-icon\" [ngStyle]=\"{ 'color': column?.iconColor }\">{{column?.icon}}</mat-icon>          \r\n            <mat-icon *ngIf=\"column?.draggable != false\" class=\"drag-indicator\" cdkDragHandle>drag_indicator</mat-icon>\r\n            <div mat-sort-header [matTooltip]=\"column.header\" matTooltipClass=\"cell-tooltip\" [disabled]=\"column.sortable === false\" class=\"header-caption\">{{ column.header }}</div>\r\n          </header-filter> \r\n          <div\r\n            class=\"right-resizer-handler\"\r\n            (mousedown)=\"onResizeColumn($event, i, 'right')\"\r\n          ></div>\r\n        </mat-header-cell>           \r\n      <!-- ************************** Table Cell ************************* -->\r\n      \r\n      <mat-cell *matCellDef=\"let row;\"                    \r\n                [style.maxWidth.px]=\"column.width\"\r\n                [style.minWidth.px]=\"column.width\"\r\n                [class]=\"row[column.cellClass]\"\r\n                (click)=\"onCellClick($event, row, column)\"                  \r\n                [ngClass]=\"cellClass(row?.option, column)\"\r\n                [ngStyle]=\"cellStyle(row?.option, column)\"\r\n                (contextmenu)=\"onContextMenu($event, column, row)\">          \r\n        <label *ngIf=\"!column.dynamicCellComponent\" [class.rtl-cell]=\"direction === 'rtl'\" [class.ltr-cell]=\"direction === 'ltr'\">{{row[column.name]}}</label>          \r\n        <ng-container *ngIf=\"column.dynamicCellComponent\" dynamicCell [component]=\"column.dynamicCellComponent\" [column]=\"column\" [row]=\"row\" [onRowEvent]=\"onRowEvent\">\r\n        </ng-container> \r\n      </mat-cell>\r\n    </ng-container> \r\n\r\n    <ng-container matColumnDef=\"progress\" > \r\n      <mat-header-cell\r\n        *matHeaderCellDef\r\n        [attr.colspan]=\"displayedColumns.length\">\r\n        <mat-progress-bar mode=\"indeterminate\" [class.show]=\"pending\">\r\n        </mat-progress-bar>\r\n      </mat-header-cell>\r\n    </ng-container>\r\n\r\n    <!-- Expanded Content Column - The detail row is made up of Dynamic Cell -->\r\n    <ng-container *ngIf=\"expandColumn.length > 0\" matColumnDef=\"expandedDetail\">\r\n      <td mat-cell *matCellDef=\"let row\" [attr.colspan]=\"displayedColumns.length\" class=\"expanded-detail-cell\">\r\n        <div class=\"expanded-detail\" [@detailExpand]=\"row == expandedElement ? 'expanded' : 'collapsed'\">\r\n          <ng-container dynamicCell [component]=\"expandComponent\" [row]=\"row\" [onRowEvent]=\"onRowEvent\">\r\n          </ng-container> \r\n        </div>\r\n      </td>\r\n    </ng-container>\r\n    <!-- Table Menu[ Sort, Visible, Export] -->\r\n    <ng-container matColumnDef=\"table-menu\" [stickyEnd]=\"true\" *ngIf=\"setting?.visibleTableMenu !== false\">\r\n      <mat-header-cell *matHeaderCellDef class=\"table-menu\">\r\n        <table-menu\r\n          [tableSetting]=\"tableSetting\"\r\n          (menuActionChange)=\"tableMenuActionChange($event)\"\r\n        ></table-menu> \r\n      </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let row\" class=\"table-menu\">\r\n        <row-menu *ngIf=\"rowContextMenuItems && rowContextMenuItems.length > 0\" [rowActionMenu]=\"row?.actionMenu\" [actionMenus]=\"rowContextMenuItems\" [tableSetting]=\"tableSetting\" (rowActionChange)=\"rowMenuActionChange($event, row)\"></row-menu>\r\n      </mat-cell>\r\n    </ng-container>\r\n    <!-- Row Table[Header, Data, Footer] -->    \r\n    <mat-row \r\n      *matRowDef=\"let row; columns: displayedColumns;\"      \r\n      (dblclick)=\"onRowDblClick($event, row)\"\r\n      (click)=\"onRowClick($event, row)\"\r\n      [style.height.px]=\"rowHeight\"\r\n      class=\"table-row\" \r\n      [ngClass]=\"row?.option?.class\"\r\n      [ngStyle]=\"rowStyle(row)\"      \r\n      [class.expanded-row]=\"expandedElement === row\"\r\n      [class.row-selection]=\"rowSelectionModel ? rowSelectionModel.isSelected(row) : false\"\r\n      (contextmenu)=\"onContextMenu($event, null, row)\">\r\n    </mat-row>\r\n    <ng-container *ngIf=\"expandColumn.length > 0\">      \r\n      <tr mat-row *matRowDef=\"let expandRow; columns: expandColumn\" class=\"detail-row\"></tr>\r\n    </ng-container>    \r\n    <mat-header-row class=\"header\" [@tableAnimation] *matHeaderRowDef=\"displayedColumns; sticky: sticky\" [style.top.px]=\"inverseOfTranslation\"></mat-header-row >\r\n    <mat-header-row class=\"progress\" *matHeaderRowDef=\"progressColumn; sticky: sticky\" [style.top.px]=\"inverseOfTranslation + headerHeight - 5\" ></mat-header-row>\r\n  </mat-table> \r\n</cdk-virtual-scroll-viewport>\r\n<mat-paginator\r\n  *ngIf=\"pagingMode !== 'none'\"\r\n  class=\"table-paginator\"\r\n  [length]=\"pagination?.length\"\r\n  [pageSize]=\"pagination?.pageSize\"\r\n  [pageIndex]=\"pagination?.pageIndex\"\r\n  (page)=\"pagination_onChange($event)\"\r\n  [pageSizeOptions]=\"pagination?.pageSizeOptions\">\r\n</mat-paginator>\r\n<ng-content></ng-content>\r\n \r\n<div class=\"no-records\" *ngIf=\"showNoData === true && (!tvsDataSource || tvsDataSource.data.length === 0)\">\r\n  <!-- <mat-icon>web</mat-icon>  -->\r\n  {{ languagePack?.tableLabels.NoData }}  \r\n  <br>\r\n  <button *ngIf=\"showReload\" mat-icon-button color=\"primary\" (click)=\"reload_onClick()\"><mat-icon>autorenew</mat-icon></button>\r\n</div>\r\n\r\n<!-- Context Menu -->\r\n<div style=\"visibility: hidden; position: fixed\"  \r\n  [style.left]=\"contextMenuPosition.x\"\r\n  [style.top]=\"contextMenuPosition.y\"\r\n  [matMenuTriggerFor]=\"contextMenu\">\r\n</div>\r\n<mat-menu #contextMenu=\"matMenu\">\r\n\t<ng-template matMenuContent let-item=\"item\">\t\t\r\n    <ng-container *ngFor=\"let menu of contextMenuItems\">\r\n      <button mat-button [class.ltr-menu]=\"tableSetting.direction === 'rtl'\" [color]=\"menu.color\" class=\"button-menu\" \r\n        [disabled]=\"menu.disabled\" (click)=\"onContextMenuItemClick(menu)\">\r\n         <mat-icon>{{menu.icon}}</mat-icon>\r\n        <span [class.text-align-right]=\"tableSetting.direction === 'rtl'\" class=\"text-align-left\">{{menu.text}}</span>\r\n      </button>\r\n      <mat-divider *ngIf=\"menu.divider === true\"></mat-divider>\r\n    </ng-container>    \r\n\t</ng-template>\r\n</mat-menu>",
                    animations: [tableAnimation, expandAnimation],
                    // changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: MAT_TOOLTIP_DEFAULT_OPTIONS, useValue: cellTooltipDefaults }
                    ],
                    styles: ["@media print{.printpreview{background-color:#fff;position:fixed;width:100%;height:auto;z-index:99999999;margin:0;padding:0;top:0;left:0;overflow:visible;display:block}}.disable-backdrop-click .cdk-overlay-backdrop.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing{pointer-events:none}:host{display:flex;flex-direction:column;table-layout:fixed;min-height:200px;position:relative;overflow:auto;transition:.3s cubic-bezier(.46,-.72,.46,1.54);background-color:#f3f3f3;border:2px #009688}mat-cell:first-of-type,mat-footer-cell:first-of-type,mat-header-cell:first-of-type:not(.row-checkbox){padding-left:0!important}.rtl-cell{padding-right:20px}.ltr-cell{padding-left:20px}.viewport{height:calc(100% - 0px)}.viewport-with-pagination{height:calc(100% - 48px)}.table-paginator{position:sticky;bottom:0;display:flex;max-height:48px;align-items:center;overflow:hidden;direction:ltr}mat-footer-row,mat-row{min-height:auto!important}mat-footer-row,mat-row,tr.mat-header-row{display:flex;border-width:0 0 1px;border-bottom-color:#d2d2d2;border-style:solid;align-items:center;box-sizing:border-box}mat-cell,mat-footer-cell,mat-header-cell{align-self:stretch;color:inherit;background-color:inherit}.mat-table .row-selection{background-color:#f7f5f5}.mat-table .mat-row:hover{background-color:#fafafa}.mat-header-row.progress{border:none;max-height:4px;min-height:4px;height:0;margin-top:-4px;background-color:transparent}.mat-header-row.progress .mat-header-cell{border:0;padding:0}.mat-header-row.progress mat-progress-bar{transition:height .3s,opacity .25s linear}.mat-header-row.progress mat-progress-bar:not(.show){height:0;opacity:0}.no-records{display:flex;align-items:center;top:50%;left:50%;margin:-42px 0 0 -25px;line-height:42px;position:absolute;z-index:1;pointer-events:none}.no-records button{pointer-events:initial}::ng-deep .dmf{min-width:100%}::ng-deep dynamic-mat-table cdk-virtual-scroll-viewport .cdk-virtual-scroll-content-wrapper .mat-table mat-row .mat-cell mat-form-field{max-width:100%}::ng-deep dynamic-mat-table cdk-virtual-scroll-viewport .cdk-virtual-scroll-content-wrapper .mat-table mat-row .mat-cell mat-form-field .mat-form-field-wrapper{padding-bottom:0!important}::ng-deep dynamic-mat-table cdk-virtual-scroll-viewport .cdk-virtual-scroll-content-wrapper .mat-table mat-row .mat-cell mat-form-field ::ng-deep .mat-form-field-underline{bottom:0!important}.ltr-menu span{float:left}.button-menu{width:100%;line-height:48px}.button-menu::ng-deep .mat-button-wrapper{display:flex}.button-menu::ng-deep .mat-button-wrapper span{display:inline-block;width:100%;text-align:left}.button-menu::ng-deep .mat-button-wrapper mat-icon{line-height:48px;height:48px;margin:0 5px}mat-button-wrapper .button-menu{display:inline-block!important}.text-align-left{text-align:left!important}.text-align-right{text-align:right!important}.mat-menu-panel{min-height:unset!important}cdk-virtual-scroll-viewport{min-height:100px;height:inherit;overflow:auto}.header-caption{font-weight:bolder;font-size:14px}.header{-webkit-user-select:none;-moz-user-select:none;user-select:none;background-color:#fff}.row-checkbox{display:contents}.row-checkbox mat-checkbox{padding:15px}.row-checkbox mat-icon{padding:15px!important}.table-menu{max-width:42px;min-width:initial;padding:0!important;background-color:inherit}:host .mat-header-row>.mat-header-cell:hover .column-icon{opacity:0;transform:translateY(5px);transition:.2s}mat-header-cell:hover .left-resizer-handler,mat-header-cell:hover .right-resizer-handler{height:calc(100% - 10px);transition:height .2s ease-out}.left-resizer-handler{display:inline-block;min-width:3px;height:0;border:solid #d2d2d2;position:sticky;cursor:col-resize;border-width:0 0 0 1px;left:0}.right-resizer-handler{display:inline-block;min-width:3px;height:0;border:solid #d2d2d2;position:sticky;cursor:col-resize;border-width:0 1px 0 0;right:0}.active-resize{background-color:#f5f5f566}.drag-indicator{position:absolute;color:rgba(0,0,0,.3);display:flex;opacity:0;transform:translateY(-5px);transition-duration:.4s;transition-property:opacity,transform;cursor:move}:host .mat-header-row>.mat-header-cell:hover .drag-indicator{opacity:1;pointer-events:fill;transform:translateY(0)}.drag-indicator:hover{color:#bfc0c0!important}.cdk-drag-preview{color:#000;min-height:55px;border:1px solid #d4d4d4;background-color:#f5f5f5;box-sizing:border-box;border-radius:4px;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.cdk-drag-placeholder{border:1px dotted #9c9c9c;background-color:#d3d3d3;content:none}.cdk-drag-animating,.cdk-drop-list-dragging{transition:transform 250ms cubic-bezier(0,0,.2,1)}.detail-row{height:0;display:inline!important;width:100%}.table-row:not(.expanded-row):hover{background:#f5f5f5}.table-row:not(.expanded-row):active{background:#efefef}.table-row mat-cell{border-bottom-width:0}.expanded-detail{overflow:hidden;display:flex;background-color:#fafafa}.expanded-detail-cell{display:block;border-width:0;padding:0!important;width:100%;z-index:2}::ng-deep .cell-tooltip{padding:8px;font-size:12px;min-width:100px;text-align:center;margin-right:-20px}"]
                }] }
    ];
    /** @nocollapse */
    DynamicMatTableComponent.ctorParameters = function () { return [
        { type: MatDialog },
        { type: Renderer2 },
        { type: TableIntl },
        { type: TableService },
        { type: ChangeDetectorRef },
        { type: OverlayContainer }
    ]; };
    DynamicMatTableComponent.propDecorators = {
        tbl: [{ type: ViewChild, args: ['tbl', { static: true },] }],
        setting: [{ type: Input }],
        contextMenu: [{ type: ViewChild, args: [MatMenuTrigger,] }],
        printRef: [{ type: ViewChild, args: ['printRef', { static: true },] }],
        printContentRef: [{ type: ViewChild, args: ['printContentRef', { static: true },] }],
        headerFilterList: [{ type: ContentChildren, args: [HeaderFilterComponent,] }]
    };
    return DynamicMatTableComponent;
}(TableCoreDirective));
export { DynamicMatTableComponent };
if (false) {
    /** @type {?} */
    DynamicMatTableComponent.prototype.tbl;
    /** @type {?} */
    DynamicMatTableComponent.prototype.contextMenu;
    /** @type {?} */
    DynamicMatTableComponent.prototype.contextMenuPosition;
    /** @type {?} */
    DynamicMatTableComponent.prototype.printRef;
    /** @type {?} */
    DynamicMatTableComponent.prototype.printContentRef;
    /** @type {?} */
    DynamicMatTableComponent.prototype.headerFilterList;
    /**
     * @type {?}
     * @private
     */
    DynamicMatTableComponent.prototype.dragDropData;
    /**
     * @type {?}
     * @private
     */
    DynamicMatTableComponent.prototype.eventsSubscription;
    /** @type {?} */
    DynamicMatTableComponent.prototype.printing;
    /** @type {?} */
    DynamicMatTableComponent.prototype.printTemplate;
    /** @type {?} */
    DynamicMatTableComponent.prototype.resizeColumn;
    /** @type {?} */
    DynamicMatTableComponent.prototype.resizableMousemove;
    /** @type {?} */
    DynamicMatTableComponent.prototype.resizableMouseup;
    /** @type {?} */
    DynamicMatTableComponent.prototype.indexTrackFn;
    /** @type {?} */
    DynamicMatTableComponent.prototype.currentContextMenuSender;
    /** @type {?} */
    DynamicMatTableComponent.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    DynamicMatTableComponent.prototype.renderer;
    /** @type {?} */
    DynamicMatTableComponent.prototype.languagePack;
    /** @type {?} */
    DynamicMatTableComponent.prototype.tableService;
    /** @type {?} */
    DynamicMatTableComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    DynamicMatTableComponent.prototype.overlayContainer;
}
//# sourceMappingURL=data:application/json;base64,