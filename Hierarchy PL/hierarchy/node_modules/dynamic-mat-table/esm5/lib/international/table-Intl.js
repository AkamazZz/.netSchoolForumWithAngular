/**
 * @fileoverview added by tsickle
 * Generated from: lib/international/table-Intl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
var TableIntl = /** @class */ (function () {
    function TableIntl() {
        this.menuLabels = {
            saveData: 'Save Data',
            fullScreen: 'Full Screen',
            columnSetting: 'Column Setting',
            saveTableSetting: 'Save Table Setting',
            clearFilter: 'Clear Filter',
            jsonFile: 'Json File',
            csvFile: 'CSV File',
            printTable: 'Print Table',
            filterMode: 'Filter Mode:',
            filterLocalMode: 'Local',
            filterServerMode: 'Server',
            sortMode: 'Sort Mode:',
            sortLocalMode: 'Local',
            sortServerMode: 'Server',
            printMode: 'Print Mode',
            printYesMode: 'Yes',
            printNoMode: 'No',
            pinMode: 'Pin Mode:',
            pinNoneMode: 'None',
            pinStartMode: 'Start',
            pinEndMode: 'End',
            thereIsNoColumn: 'There is no column.'
        };
        this.paginatorLabels = {
            changes: new Subject(),
            itemsPerPageLabel: 'Items per page:',
            nextPageLabel: 'Next Page:',
            previousPageLabel: 'Previous Page:',
            firstPageLabel: 'First Page:',
            lastPageLabel: 'Last Page:',
            getRangeLabel: (/**
             * @param {?} page
             * @param {?} pageSize
             * @param {?} length
             * @return {?}
             */
            function (page, pageSize, length) {
                if (length === 0 || pageSize === 0) {
                    return "0 of " + length;
                }
                length = Math.max(length, 0);
                /** @type {?} */
                var startIndex = page * pageSize;
                /** @type {?} */
                var endIndex = startIndex < length ?
                    Math.min(startIndex + pageSize, length) :
                    startIndex + pageSize;
                return startIndex + 1 + " - " + endIndex + " of " + length;
            })
        };
        this.tableLabels = {
            NoData: 'No records found.'
        };
        this.filterLabels = {
            Clear: 'Clear',
            Search: 'Search',
            And: 'And',
            Or: 'Or',
            /* Text Compare */
            Text: 'Text',
            TextContains: 'Contains',
            TextEmpty: 'Empty',
            TextStartsWith: 'Starts With',
            TextEndsWith: 'Ends With',
            TextEquals: 'Equals',
            TextNotEmpty: 'Not Empty',
            /* Number Compare */
            Number: 'Number',
            NumberEquals: 'Equals',
            NumberNotEquals: 'Not Equals',
            NumberGreaterThan: 'Greater Than',
            NumberLessThan: 'Less Than',
            NumberEmpty: 'Empty',
            NumberNotEmpty: 'Not Empty',
            /* Category List Compare */
            CategoryContains: 'Contains',
            CategoryNotContains: 'Not Contains',
        };
    }
    TableIntl.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ TableIntl.ɵprov = i0.ɵɵdefineInjectable({ factory: function TableIntl_Factory() { return new TableIntl(); }, token: TableIntl, providedIn: "root" });
    return TableIntl;
}());
export { TableIntl };
if (false) {
    /** @type {?} */
    TableIntl.prototype.menuLabels;
    /** @type {?} */
    TableIntl.prototype.paginatorLabels;
    /** @type {?} */
    TableIntl.prototype.tableLabels;
    /** @type {?} */
    TableIntl.prototype.filterLabels;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtSW50bC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2R5bmFtaWMtbWF0LXRhYmxlLyIsInNvdXJjZXMiOlsibGliL2ludGVybmF0aW9uYWwvdGFibGUtSW50bC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFHL0I7SUFBQTtRQUlFLGVBQVUsR0FBZTtZQUN2QixRQUFRLEVBQUUsV0FBVztZQUNyQixVQUFVLEVBQUUsYUFBYTtZQUV6QixhQUFhLEVBQUUsZ0JBQWdCO1lBQy9CLGdCQUFnQixFQUFFLG9CQUFvQjtZQUN0QyxXQUFXLEVBQUUsY0FBYztZQUMzQixRQUFRLEVBQUUsV0FBVztZQUNyQixPQUFPLEVBQUUsVUFBVTtZQUNuQixVQUFVLEVBQUUsYUFBYTtZQUN6QixVQUFVLEVBQUUsY0FBYztZQUMxQixlQUFlLEVBQUUsT0FBTztZQUN4QixnQkFBZ0IsRUFBRSxRQUFRO1lBQzFCLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLGFBQWEsRUFBRSxPQUFPO1lBQ3RCLGNBQWMsRUFBRSxRQUFRO1lBQ3hCLFNBQVMsRUFBRSxZQUFZO1lBQ3ZCLFlBQVksRUFBRSxLQUFLO1lBQ25CLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLE9BQU8sRUFBRSxXQUFXO1lBQ3BCLFdBQVcsRUFBRSxNQUFNO1lBQ25CLFlBQVksRUFBRSxPQUFPO1lBQ3JCLFVBQVUsRUFBRSxLQUFLO1lBQ2pCLGVBQWUsRUFBRSxxQkFBcUI7U0FDdkMsQ0FBQztRQUVGLG9CQUFlLEdBQXFCO1lBQ2xDLE9BQU8sRUFBRyxJQUFJLE9BQU8sRUFBUTtZQUM3QixpQkFBaUIsRUFBRSxpQkFBaUI7WUFDcEMsYUFBYSxFQUFFLFlBQVk7WUFDM0IsaUJBQWlCLEVBQUUsZ0JBQWdCO1lBQ25DLGNBQWMsRUFBRSxhQUFhO1lBQzdCLGFBQWEsRUFBRSxZQUFZO1lBQzNCLGFBQWE7Ozs7OztZQUFHLFVBQUMsSUFBWSxFQUFFLFFBQWdCLEVBQUUsTUFBYztnQkFDN0QsSUFBSSxNQUFNLEtBQUssQ0FBQyxJQUFJLFFBQVEsS0FBSyxDQUFDLEVBQUU7b0JBQUUsT0FBTyxVQUFRLE1BQVEsQ0FBQztpQkFBRTtnQkFDaEUsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDOztvQkFDdkIsVUFBVSxHQUFHLElBQUksR0FBRyxRQUFROztvQkFDNUIsUUFBUSxHQUFHLFVBQVUsR0FBRyxNQUFNLENBQUMsQ0FBQztvQkFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQ3pDLFVBQVUsR0FBRyxRQUFRO2dCQUN6QixPQUFVLFVBQVUsR0FBRyxDQUFDLFdBQU0sUUFBUSxZQUFPLE1BQVEsQ0FBQztZQUN4RCxDQUFDLENBQUE7U0FDRixDQUFDO1FBRUYsZ0JBQVcsR0FDWDtZQUNFLE1BQU0sRUFBRSxtQkFBbUI7U0FDNUIsQ0FBQztRQUVGLGlCQUFZLEdBQWlCO1lBQzNCLEtBQUssRUFBRSxPQUFPO1lBQ2QsTUFBTSxFQUFFLFFBQVE7WUFDaEIsR0FBRyxFQUFFLEtBQUs7WUFDVixFQUFFLEVBQUUsSUFBSTs7WUFFUixJQUFJLEVBQUUsTUFBTTtZQUNaLFlBQVksRUFBRSxVQUFVO1lBQ3hCLFNBQVMsRUFBRSxPQUFPO1lBQ2xCLGNBQWMsRUFBRSxhQUFhO1lBQzdCLFlBQVksRUFBRSxXQUFXO1lBQ3pCLFVBQVUsRUFBRSxRQUFRO1lBQ3BCLFlBQVksRUFBRSxXQUFXOztZQUV6QixNQUFNLEVBQUUsUUFBUTtZQUNoQixZQUFZLEVBQUUsUUFBUTtZQUN0QixlQUFlLEVBQUUsWUFBWTtZQUM3QixpQkFBaUIsRUFBRSxjQUFjO1lBQ2pDLGNBQWMsRUFBRSxXQUFXO1lBQzNCLFdBQVcsRUFBRSxPQUFPO1lBQ3BCLGNBQWMsRUFBRSxXQUFXOztZQUUzQixnQkFBZ0IsRUFBRSxVQUFVO1lBQzVCLG1CQUFtQixFQUFFLGNBQWM7U0FHcEMsQ0FBQztLQUVIOztnQkFqRkEsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7O29CQVJEO0NBdUZDLEFBakZELElBaUZDO1NBOUVZLFNBQVM7OztJQUNwQiwrQkF3QkU7O0lBRUYsb0NBZ0JFOztJQUVGLGdDQUdFOztJQUVGLGlDQTBCRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExhbmd1YWdlUGFjaywgVGFibGVMYWJlbHMsIEZpbHRlckxhYmVscywgTWVudUxhYmVscyB9IGZyb20gJy4uL21vZGVscy9sYW5ndWFnZS1wYWNrLm1vZGVsJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNYXRQYWdpbmF0b3JJbnRsIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvcGFnaW5hdG9yJztcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFRhYmxlSW50bCBpbXBsZW1lbnRzIExhbmd1YWdlUGFjayB7XHJcbiAgbWVudUxhYmVsczogTWVudUxhYmVscyA9IHtcclxuICAgIHNhdmVEYXRhOiAnU2F2ZSBEYXRhJyxcclxuICAgIGZ1bGxTY3JlZW46ICdGdWxsIFNjcmVlbicsXHJcbiAgICBcclxuICAgIGNvbHVtblNldHRpbmc6ICdDb2x1bW4gU2V0dGluZycsXHJcbiAgICBzYXZlVGFibGVTZXR0aW5nOiAnU2F2ZSBUYWJsZSBTZXR0aW5nJyxcclxuICAgIGNsZWFyRmlsdGVyOiAnQ2xlYXIgRmlsdGVyJyxcclxuICAgIGpzb25GaWxlOiAnSnNvbiBGaWxlJyxcclxuICAgIGNzdkZpbGU6ICdDU1YgRmlsZScsXHJcbiAgICBwcmludFRhYmxlOiAnUHJpbnQgVGFibGUnLFxyXG4gICAgZmlsdGVyTW9kZTogJ0ZpbHRlciBNb2RlOicsXHJcbiAgICBmaWx0ZXJMb2NhbE1vZGU6ICdMb2NhbCcsXHJcbiAgICBmaWx0ZXJTZXJ2ZXJNb2RlOiAnU2VydmVyJyxcclxuICAgIHNvcnRNb2RlOiAnU29ydCBNb2RlOicsXHJcbiAgICBzb3J0TG9jYWxNb2RlOiAnTG9jYWwnLFxyXG4gICAgc29ydFNlcnZlck1vZGU6ICdTZXJ2ZXInLFxyXG4gICAgcHJpbnRNb2RlOiAnUHJpbnQgTW9kZScsXHJcbiAgICBwcmludFllc01vZGU6ICdZZXMnLFxyXG4gICAgcHJpbnROb01vZGU6ICdObycsXHJcbiAgICBwaW5Nb2RlOiAnUGluIE1vZGU6JyxcclxuICAgIHBpbk5vbmVNb2RlOiAnTm9uZScsXHJcbiAgICBwaW5TdGFydE1vZGU6ICdTdGFydCcsXHJcbiAgICBwaW5FbmRNb2RlOiAnRW5kJyxcclxuICAgIHRoZXJlSXNOb0NvbHVtbjogJ1RoZXJlIGlzIG5vIGNvbHVtbi4nXHJcbiAgfTtcclxuXHJcbiAgcGFnaW5hdG9yTGFiZWxzOiBNYXRQYWdpbmF0b3JJbnRsID0ge1xyXG4gICAgY2hhbmdlczogIG5ldyBTdWJqZWN0PHZvaWQ+KCksXHJcbiAgICBpdGVtc1BlclBhZ2VMYWJlbDogJ0l0ZW1zIHBlciBwYWdlOicsXHJcbiAgICBuZXh0UGFnZUxhYmVsOiAnTmV4dCBQYWdlOicsXHJcbiAgICBwcmV2aW91c1BhZ2VMYWJlbDogJ1ByZXZpb3VzIFBhZ2U6JyxcclxuICAgIGZpcnN0UGFnZUxhYmVsOiAnRmlyc3QgUGFnZTonLFxyXG4gICAgbGFzdFBhZ2VMYWJlbDogJ0xhc3QgUGFnZTonLFxyXG4gICAgZ2V0UmFuZ2VMYWJlbCA6IChwYWdlOiBudW1iZXIsIHBhZ2VTaXplOiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKSA9PiB7XHJcbiAgICAgIGlmIChsZW5ndGggPT09IDAgfHwgcGFnZVNpemUgPT09IDApIHsgcmV0dXJuIGAwIG9mICR7bGVuZ3RofWA7IH1cclxuICAgICAgbGVuZ3RoID0gTWF0aC5tYXgobGVuZ3RoLCAwKTtcclxuICAgICAgY29uc3Qgc3RhcnRJbmRleCA9IHBhZ2UgKiBwYWdlU2l6ZTtcclxuICAgICAgY29uc3QgZW5kSW5kZXggPSBzdGFydEluZGV4IDwgbGVuZ3RoID9cclxuICAgICAgICAgIE1hdGgubWluKHN0YXJ0SW5kZXggKyBwYWdlU2l6ZSwgbGVuZ3RoKSA6XHJcbiAgICAgICAgICBzdGFydEluZGV4ICsgcGFnZVNpemU7XHJcbiAgICAgIHJldHVybiBgJHtzdGFydEluZGV4ICsgMX0gLSAke2VuZEluZGV4fSBvZiAke2xlbmd0aH1gO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRhYmxlTGFiZWxzOiBUYWJsZUxhYmVscyA9XHJcbiAge1xyXG4gICAgTm9EYXRhOiAnTm8gcmVjb3JkcyBmb3VuZC4nXHJcbiAgfTtcclxuXHJcbiAgZmlsdGVyTGFiZWxzOiBGaWx0ZXJMYWJlbHMgPSB7XHJcbiAgICBDbGVhcjogJ0NsZWFyJyxcclxuICAgIFNlYXJjaDogJ1NlYXJjaCcsXHJcbiAgICBBbmQ6ICdBbmQnLFxyXG4gICAgT3I6ICdPcicsXHJcbiAgICAvKiBUZXh0IENvbXBhcmUgKi9cclxuICAgIFRleHQ6ICdUZXh0JyxcclxuICAgIFRleHRDb250YWluczogJ0NvbnRhaW5zJyxcclxuICAgIFRleHRFbXB0eTogJ0VtcHR5JyxcclxuICAgIFRleHRTdGFydHNXaXRoOiAnU3RhcnRzIFdpdGgnLFxyXG4gICAgVGV4dEVuZHNXaXRoOiAnRW5kcyBXaXRoJyxcclxuICAgIFRleHRFcXVhbHM6ICdFcXVhbHMnLFxyXG4gICAgVGV4dE5vdEVtcHR5OiAnTm90IEVtcHR5JyxcclxuICAgIC8qIE51bWJlciBDb21wYXJlICovXHJcbiAgICBOdW1iZXI6ICdOdW1iZXInLFxyXG4gICAgTnVtYmVyRXF1YWxzOiAnRXF1YWxzJyxcclxuICAgIE51bWJlck5vdEVxdWFsczogJ05vdCBFcXVhbHMnLFxyXG4gICAgTnVtYmVyR3JlYXRlclRoYW46ICdHcmVhdGVyIFRoYW4nLFxyXG4gICAgTnVtYmVyTGVzc1RoYW46ICdMZXNzIFRoYW4nLFxyXG4gICAgTnVtYmVyRW1wdHk6ICdFbXB0eScsXHJcbiAgICBOdW1iZXJOb3RFbXB0eTogJ05vdCBFbXB0eScsXHJcbiAgICAvKiBDYXRlZ29yeSBMaXN0IENvbXBhcmUgKi9cclxuICAgIENhdGVnb3J5Q29udGFpbnM6ICdDb250YWlucycsXHJcbiAgICBDYXRlZ29yeU5vdENvbnRhaW5zOiAnTm90IENvbnRhaW5zJyxcclxuICAgIC8qIEJvb2xlYW4gQ29tcGFyZSAqL1xyXG4gICAgLyogRGF0ZSBDb21wYXJlICovXHJcbiAgfTtcclxuXHJcbn1cclxuXHJcblxyXG5cclxuXHJcbiJdfQ==