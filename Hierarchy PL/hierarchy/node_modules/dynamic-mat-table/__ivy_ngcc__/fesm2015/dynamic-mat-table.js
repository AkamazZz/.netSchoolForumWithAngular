import { Injectable, ɵɵdefineInjectable, EventEmitter, Directive, ChangeDetectorRef, ViewChild, Input, HostBinding, Output, Component, ChangeDetectionStrategy, ContentChildren, Inject, Renderer2, Compiler, ComponentFactoryResolver, ViewContainerRef, NgModule, HostListener, forwardRef, NgZone, ContentChild, ElementRef, COMPILER_OPTIONS, CompilerFactory } from '@angular/core';
import { Observable, merge, of, combineLatest, Subscription, ReplaySubject, Subject, BehaviorSubject } from 'rxjs';
import { map, delay, distinctUntilChanged, filter, tap, takeWhile, takeUntil, switchMap } from 'rxjs/operators';
import { MatTableDataSource, MatTable, MatTableModule } from '@angular/material/table';
import { CdkVirtualScrollViewport, VIRTUAL_SCROLL_STRATEGY, ScrollingModule } from '@angular/cdk/scrolling';
import { moveItemInArray, DragDropModule } from '@angular/cdk/drag-drop';
import { SelectionModel } from '@angular/cdk/collections';
import { MatSort, MatSortModule } from '@angular/material/sort';
import { MatPaginator, MatPaginatorIntl, MatPaginatorModule } from '@angular/material/paginator';
import { trigger, transition, query, style, stagger, animate, state } from '@angular/animations';
import { MatMenuTrigger, MatMenuModule } from '@angular/material/menu';
import { MatDialogRef, MAT_DIALOG_DATA, MatDialog, MatDialogModule } from '@angular/material/dialog';
import { OverlayContainer } from '@angular/cdk/overlay';
import { MAT_TOOLTIP_DEFAULT_OPTIONS, MatTooltipModule } from '@angular/material/tooltip';
import { CommonModule } from '@angular/common';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatDividerModule } from '@angular/material/divider';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { JitCompilerFactory } from '@angular/platform-browser-dynamic';
import { MatRippleModule } from '@angular/material/core';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/cores/type.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// |||||||||||||||||||||||||||||||||||||| Utils ||||||||||||||||||||||||||||||||||||||||||||||||||
/**
 * check object is null or undefined
 * @param {?} value
 * @return {?}
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/menu';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/button';
import * as ɵngcc4 from '@angular/material/form-field';
import * as ɵngcc5 from '@angular/material/select';
import * as ɵngcc6 from '@angular/material/icon';
import * as ɵngcc7 from '@angular/material/core';
import * as ɵngcc8 from '@angular/material/input';
import * as ɵngcc9 from '@angular/forms';
import * as ɵngcc10 from '@angular/material/dialog';
import * as ɵngcc11 from '@angular/cdk/bidi';
import * as ɵngcc12 from '@angular/material/table';
import * as ɵngcc13 from '@angular/cdk/overlay';
import * as ɵngcc14 from '@angular/cdk/scrolling';
import * as ɵngcc15 from '@angular/material/sort';
import * as ɵngcc16 from '@angular/cdk/drag-drop';
import * as ɵngcc17 from '@angular/material/checkbox';
import * as ɵngcc18 from '@angular/material/tooltip';
import * as ɵngcc19 from '@angular/material/progress-bar';
import * as ɵngcc20 from '@angular/material/paginator';
import * as ɵngcc21 from '@angular/material/divider';
import * as ɵngcc22 from '@angular/material/radio';

const _c0 = ["filterInput"];
function HeaderFilterComponent_ng_template_3_div_2_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 18);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const op_r9 = ctx.$implicit;
    const selectedIndex_r10 = ctx.index;
    ɵngcc0.ɵɵproperty("value", selectedIndex_r10);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", op_r9.text, " ");
} }
function HeaderFilterComponent_ng_template_3_div_2_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "mat-form-field", 19);
    ɵngcc0.ɵɵelementStart(2, "mat-label");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "input", 20, 21);
    ɵngcc0.ɵɵlistener("ngModelChange", function HeaderFilterComponent_ng_template_3_div_2_div_4_Template_input_ngModelChange_4_listener($event) { const ctrl_r11 = ctx.$implicit; return ctrl_r11.value = $event; })("keyup.enter", function HeaderFilterComponent_ng_template_3_div_2_div_4_Template_input_keyup_enter_4_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(3); return ctx_r14.applyFilter_OnClick(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctrl_r11 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctrl_r11.text);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctrl_r11.value);
} }
function HeaderFilterComponent_ng_template_3_div_2_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 22);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filter_r4 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate((filter_r4 == null ? null : filter_r4.type) === "and" ? ctx_r8.languagePack.filterLabels.And : ctx_r8.languagePack.filterLabels.Or);
} }
function HeaderFilterComponent_ng_template_3_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "mat-form-field");
    ɵngcc0.ɵɵelementStart(2, "mat-select", 10);
    ɵngcc0.ɵɵlistener("selectionChange", function HeaderFilterComponent_ng_template_3_div_2_Template_mat_select_selectionChange_2_listener($event) { const filter_r4 = ctx.$implicit; return filter_r4.selectedIndex = $event.value; })("keyup.enter", function HeaderFilterComponent_ng_template_3_div_2_Template_mat_select_keyup_enter_2_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.applyFilter_OnClick(); });
    ɵngcc0.ɵɵtemplate(3, HeaderFilterComponent_ng_template_3_div_2_mat_option_3_Template, 2, 2, "mat-option", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, HeaderFilterComponent_ng_template_3_div_2_div_4_Template, 6, 2, "div", 12);
    ɵngcc0.ɵɵelementStart(5, "div", 13);
    ɵngcc0.ɵɵtemplate(6, HeaderFilterComponent_ng_template_3_div_2_span_6_Template, 2, 1, "span", 14);
    ɵngcc0.ɵɵelementStart(7, "span", 15);
    ɵngcc0.ɵɵelementStart(8, "mat-icon", 16);
    ɵngcc0.ɵɵlistener("click", function HeaderFilterComponent_ng_template_3_div_2_Template_mat_icon_click_8_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r19); const index_r5 = restoredCtx.index; const ctx_r20 = ɵngcc0.ɵɵnextContext(2); return ctx_r20.filterAction_OnClick(index_r5, 0); });
    ɵngcc0.ɵɵtext(9, "add");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "span", 15);
    ɵngcc0.ɵɵelementStart(11, "mat-icon", 17);
    ɵngcc0.ɵɵlistener("click", function HeaderFilterComponent_ng_template_3_div_2_Template_mat_icon_click_11_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r19); const index_r5 = restoredCtx.index; const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.filterAction_OnClick(index_r5, 1); });
    ɵngcc0.ɵɵtext(12, "drag_handle");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "span", 15);
    ɵngcc0.ɵɵelementStart(14, "mat-icon", 16);
    ɵngcc0.ɵɵlistener("click", function HeaderFilterComponent_ng_template_3_div_2_Template_mat_icon_click_14_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r19); const index_r5 = restoredCtx.index; const ctx_r22 = ɵngcc0.ɵɵnextContext(2); return ctx_r22.filterAction_OnClick(index_r5, 2); });
    ɵngcc0.ɵɵtext(15, "clear");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filter_r4 = ctx.$implicit;
    const index_r5 = ctx.index;
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("@listAnimation", ctx_r3.filters.length);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("value", filter_r4.selectedIndex)("panelClass", "mat-elevation-z10");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", filter_r4.getOperations());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", filter_r4 == null ? null : filter_r4.parameters);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", (ctx_r3.filters == null ? null : ctx_r3.filters.length) !== index_r5 + 1);
} }
function HeaderFilterComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(2, HeaderFilterComponent_ng_template_3_div_2_Template, 16, 6, "div", 5);
    ɵngcc0.ɵɵelementStart(3, "div", 6);
    ɵngcc0.ɵɵelementStart(4, "button", 7);
    ɵngcc0.ɵɵlistener("click", function HeaderFilterComponent_ng_template_3_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.clearColumn_OnClick(); });
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "button", 8);
    ɵngcc0.ɵɵlistener("click", function HeaderFilterComponent_ng_template_3_Template_button_click_6_listener() { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.applyFilter_OnClick(); });
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.field == null ? null : ctx_r1.field.header, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.filters);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.languagePack.filterLabels.Clear);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.languagePack.filterLabels.Search);
} }
function HeaderFilterComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 23);
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "filter_list");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r0);
} }
const _c1 = ["*"];
const _c2 = ["printContentRef"];
function PrintTableDialogComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵelementStart(1, "b");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const param_r6 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1("", param_r6.key, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" : ", param_r6.value, " ");
} }
function PrintTableDialogComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵelementStart(1, "b");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const param_r7 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1("", param_r7.key, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" : ", param_r7.value, " ");
} }
function PrintTableDialogComponent_ng_container_9_th_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r8 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", column_r8.header, " ");
} }
function PrintTableDialogComponent_ng_container_9_td_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 16);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r12 = ctx.$implicit;
    const column_r8 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", row_r12[column_r8.name], " ");
} }
function PrintTableDialogComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0, 12);
    ɵngcc0.ɵɵtemplate(1, PrintTableDialogComponent_ng_container_9_th_1_Template, 2, 1, "th", 13);
    ɵngcc0.ɵɵtemplate(2, PrintTableDialogComponent_ng_container_9_td_2_Template, 2, 1, "td", 14);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r8 = ctx.$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("matColumnDef", column_r8.name);
} }
function PrintTableDialogComponent_tr_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 17);
} }
function PrintTableDialogComponent_tr_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 18);
} }
const _c3 = ["tbl"];
const _c4 = ["printRef"];
function DynamicMatTableComponent_mat_header_cell_4_mat_checkbox_1_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-checkbox", 22);
    ɵngcc0.ɵɵlistener("change", function DynamicMatTableComponent_mat_header_cell_4_mat_checkbox_1_Template_mat_checkbox_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return $event ? ctx_r17.masterToggle() : null; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("checked", ctx_r15.rowSelectionModel.hasValue() && ctx_r15.isAllSelected())("indeterminate", ctx_r15.rowSelectionModel.hasValue() && !ctx_r15.isAllSelected());
} }
function DynamicMatTableComponent_mat_header_cell_4_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1, "indeterminate_check_box");
    ɵngcc0.ɵɵelementEnd();
} }
function DynamicMatTableComponent_mat_header_cell_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-header-cell", 20);
    ɵngcc0.ɵɵtemplate(1, DynamicMatTableComponent_mat_header_cell_4_mat_checkbox_1_Template, 1, 2, "mat-checkbox", 21);
    ɵngcc0.ɵɵtemplate(2, DynamicMatTableComponent_mat_header_cell_4_mat_icon_2_Template, 2, 0, "mat-icon", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.rowSelectionMode === "multi");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.rowSelectionMode === "single");
} }
function DynamicMatTableComponent_mat_cell_6_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-cell", 23);
    ɵngcc0.ɵɵelementStart(1, "mat-checkbox", 24);
    ɵngcc0.ɵɵlistener("click", function DynamicMatTableComponent_mat_cell_6_Template_mat_checkbox_click_1_listener($event) { return $event.stopPropagation(); })("change", function DynamicMatTableComponent_mat_cell_6_Template_mat_checkbox_change_1_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r22); const row_r19 = restoredCtx.$implicit; const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.onRowSelectionChange($event, row_r19); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r19 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("checked", ctx_r2.rowSelectionModel == null ? null : ctx_r2.rowSelectionModel.isSelected(row_r19));
} }
function DynamicMatTableComponent_ng_container_7_mat_header_cell_1_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 35);
    ɵngcc0.ɵɵtext(1, "drag_indicator");
    ɵngcc0.ɵɵelementEnd();
} }
const _c5 = function (a0, a1) { return { name: a0, columIndex: a1 }; };
const _c6 = function (a0) { return { "color": a0 }; };
function DynamicMatTableComponent_ng_container_7_mat_header_cell_1_Template(rf, ctx) { if (rf & 1) {
    const _r30 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-header-cell", 28);
    ɵngcc0.ɵɵelementStart(1, "div", 29);
    ɵngcc0.ɵɵlistener("mousedown", function DynamicMatTableComponent_ng_container_7_mat_header_cell_1_Template_div_mousedown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r30); const i_r24 = ɵngcc0.ɵɵnextContext().index; const ctx_r28 = ɵngcc0.ɵɵnextContext(); return ctx_r28.onResizeColumn($event, i_r24, "left"); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "header-filter", 30);
    ɵngcc0.ɵɵlistener("filterChanged", function DynamicMatTableComponent_ng_container_7_mat_header_cell_1_Template_header_filter_filterChanged_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r30); const column_r23 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r31 = ɵngcc0.ɵɵnextContext(); return ctx_r31.filter_onChanged(column_r23, $event); });
    ɵngcc0.ɵɵelementStart(3, "mat-icon", 31);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, DynamicMatTableComponent_ng_container_7_mat_header_cell_1_mat_icon_5_Template, 2, 0, "mat-icon", 32);
    ɵngcc0.ɵɵelementStart(6, "div", 33);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 34);
    ɵngcc0.ɵɵlistener("mousedown", function DynamicMatTableComponent_ng_container_7_mat_header_cell_1_Template_div_mousedown_8_listener($event) { ɵngcc0.ɵɵrestoreView(_r30); const i_r24 = ɵngcc0.ɵɵnextContext().index; const ctx_r33 = ɵngcc0.ɵɵnextContext(); return ctx_r33.onResizeColumn($event, i_r24, "right"); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r35 = ɵngcc0.ɵɵnextContext();
    const column_r23 = ctx_r35.$implicit;
    const i_r24 = ctx_r35.index;
    const ctx_r25 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("max-width", column_r23.width, "px")("min-width", column_r23.width, "px");
    ɵngcc0.ɵɵclassProp("active-resize", ctx_r25.resizeColumn.currentResizeIndex === i_r24);
    ɵngcc0.ɵɵproperty("cdkDragDisabled", (column_r23 == null ? null : column_r23.draggable) === false)("cdkDragData", ɵngcc0.ɵɵpureFunction2(16, _c5, column_r23.name, i_r24));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("field", column_r23)("filters", ctx_r25.tvsDataSource.getFilter(column_r23.name));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(19, _c6, column_r23 == null ? null : column_r23.iconColor));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(column_r23 == null ? null : column_r23.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (column_r23 == null ? null : column_r23.draggable) != false);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matTooltip", column_r23.header)("disabled", column_r23.sortable === false);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(column_r23.header);
} }
function DynamicMatTableComponent_ng_container_7_mat_cell_2_label_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r36 = ɵngcc0.ɵɵnextContext().$implicit;
    const column_r23 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r37 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("rtl-cell", ctx_r37.direction === "rtl")("ltr-cell", ctx_r37.direction === "ltr");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(row_r36[column_r23.name]);
} }
function DynamicMatTableComponent_ng_container_7_mat_cell_2_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 39);
} if (rf & 2) {
    const row_r36 = ɵngcc0.ɵɵnextContext().$implicit;
    const column_r23 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r38 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("component", column_r23.dynamicCellComponent)("column", column_r23)("row", row_r36)("onRowEvent", ctx_r38.onRowEvent);
} }
function DynamicMatTableComponent_ng_container_7_mat_cell_2_Template(rf, ctx) { if (rf & 1) {
    const _r45 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-cell", 36);
    ɵngcc0.ɵɵlistener("click", function DynamicMatTableComponent_ng_container_7_mat_cell_2_Template_mat_cell_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r45); const row_r36 = restoredCtx.$implicit; const column_r23 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r43 = ɵngcc0.ɵɵnextContext(); return ctx_r43.onCellClick($event, row_r36, column_r23); })("contextmenu", function DynamicMatTableComponent_ng_container_7_mat_cell_2_Template_mat_cell_contextmenu_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r45); const row_r36 = restoredCtx.$implicit; const column_r23 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r46 = ɵngcc0.ɵɵnextContext(); return ctx_r46.onContextMenu($event, column_r23, row_r36); });
    ɵngcc0.ɵɵtemplate(1, DynamicMatTableComponent_ng_container_7_mat_cell_2_label_1_Template, 2, 5, "label", 37);
    ɵngcc0.ɵɵtemplate(2, DynamicMatTableComponent_ng_container_7_mat_cell_2_ng_container_2_Template, 1, 4, "ng-container", 38);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r36 = ctx.$implicit;
    const column_r23 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r26 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(row_r36[column_r23.cellClass]);
    ɵngcc0.ɵɵstyleProp("max-width", column_r23.width, "px")("min-width", column_r23.width, "px");
    ɵngcc0.ɵɵproperty("ngClass", ctx_r26.cellClass(row_r36 == null ? null : row_r36.option, column_r23))("ngStyle", ctx_r26.cellStyle(row_r36 == null ? null : row_r36.option, column_r23));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !column_r23.dynamicCellComponent);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", column_r23.dynamicCellComponent);
} }
function DynamicMatTableComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0, 25);
    ɵngcc0.ɵɵtemplate(1, DynamicMatTableComponent_ng_container_7_mat_header_cell_1_Template, 9, 21, "mat-header-cell", 26);
    ɵngcc0.ɵɵtemplate(2, DynamicMatTableComponent_ng_container_7_mat_cell_2_Template, 3, 10, "mat-cell", 27);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r23 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("matColumnDef", column_r23.name)("sticky", column_r23.sticky === "start" ? true : false)("stickyEnd", column_r23.sticky === "end" ? true : false);
} }
function DynamicMatTableComponent_mat_header_cell_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-header-cell");
    ɵngcc0.ɵɵelement(1, "mat-progress-bar", 40);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("colspan", ctx_r4.displayedColumns.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("show", ctx_r4.pending);
} }
function DynamicMatTableComponent_ng_container_10_td_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 43);
    ɵngcc0.ɵɵelementStart(1, "div", 44);
    ɵngcc0.ɵɵelementContainer(2, 45);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r50 = ctx.$implicit;
    const ctx_r49 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵattribute("colspan", ctx_r49.displayedColumns.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("@detailExpand", row_r50 == ctx_r49.expandedElement ? "expanded" : "collapsed");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("component", ctx_r49.expandComponent)("row", row_r50)("onRowEvent", ctx_r49.onRowEvent);
} }
function DynamicMatTableComponent_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0, 41);
    ɵngcc0.ɵɵtemplate(1, DynamicMatTableComponent_ng_container_10_td_1_Template, 3, 5, "td", 42);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function DynamicMatTableComponent_ng_container_11_mat_header_cell_1_Template(rf, ctx) { if (rf & 1) {
    const _r54 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-header-cell", 49);
    ɵngcc0.ɵɵelementStart(1, "table-menu", 50);
    ɵngcc0.ɵɵlistener("menuActionChange", function DynamicMatTableComponent_ng_container_11_mat_header_cell_1_Template_table_menu_menuActionChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r54); const ctx_r53 = ɵngcc0.ɵɵnextContext(2); return ctx_r53.tableMenuActionChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r51 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("tableSetting", ctx_r51.tableSetting);
} }
function DynamicMatTableComponent_ng_container_11_mat_cell_2_row_menu_1_Template(rf, ctx) { if (rf & 1) {
    const _r59 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "row-menu", 52);
    ɵngcc0.ɵɵlistener("rowActionChange", function DynamicMatTableComponent_ng_container_11_mat_cell_2_row_menu_1_Template_row_menu_rowActionChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r59); const row_r55 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r57 = ɵngcc0.ɵɵnextContext(2); return ctx_r57.rowMenuActionChange($event, row_r55); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r55 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r56 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("rowActionMenu", row_r55 == null ? null : row_r55.actionMenu)("actionMenus", ctx_r56.rowContextMenuItems)("tableSetting", ctx_r56.tableSetting);
} }
function DynamicMatTableComponent_ng_container_11_mat_cell_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-cell", 49);
    ɵngcc0.ɵɵtemplate(1, DynamicMatTableComponent_ng_container_11_mat_cell_2_row_menu_1_Template, 1, 3, "row-menu", 51);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r52 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r52.rowContextMenuItems && ctx_r52.rowContextMenuItems.length > 0);
} }
function DynamicMatTableComponent_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0, 46);
    ɵngcc0.ɵɵtemplate(1, DynamicMatTableComponent_ng_container_11_mat_header_cell_1_Template, 2, 1, "mat-header-cell", 47);
    ɵngcc0.ɵɵtemplate(2, DynamicMatTableComponent_ng_container_11_mat_cell_2_Template, 2, 1, "mat-cell", 48);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("stickyEnd", true);
} }
function DynamicMatTableComponent_mat_row_12_Template(rf, ctx) { if (rf & 1) {
    const _r63 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-row", 53);
    ɵngcc0.ɵɵlistener("dblclick", function DynamicMatTableComponent_mat_row_12_Template_mat_row_dblclick_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r63); const row_r61 = restoredCtx.$implicit; const ctx_r62 = ɵngcc0.ɵɵnextContext(); return ctx_r62.onRowDblClick($event, row_r61); })("click", function DynamicMatTableComponent_mat_row_12_Template_mat_row_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r63); const row_r61 = restoredCtx.$implicit; const ctx_r64 = ɵngcc0.ɵɵnextContext(); return ctx_r64.onRowClick($event, row_r61); })("contextmenu", function DynamicMatTableComponent_mat_row_12_Template_mat_row_contextmenu_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r63); const row_r61 = restoredCtx.$implicit; const ctx_r65 = ɵngcc0.ɵɵnextContext(); return ctx_r65.onContextMenu($event, null, row_r61); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r61 = ctx.$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("height", ctx_r7.rowHeight, "px");
    ɵngcc0.ɵɵclassProp("expanded-row", ctx_r7.expandedElement === row_r61)("row-selection", ctx_r7.rowSelectionModel ? ctx_r7.rowSelectionModel.isSelected(row_r61) : false);
    ɵngcc0.ɵɵproperty("ngClass", row_r61 == null ? null : row_r61.option == null ? null : row_r61.option.class)("ngStyle", ctx_r7.rowStyle(row_r61));
} }
function DynamicMatTableComponent_ng_container_13_tr_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 55);
} }
function DynamicMatTableComponent_ng_container_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, DynamicMatTableComponent_ng_container_13_tr_1_Template, 1, 0, "tr", 54);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matRowDefColumns", ctx_r8.expandColumn);
} }
function DynamicMatTableComponent_mat_header_row_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-header-row", 56);
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("top", ctx_r9.inverseOfTranslation, "px");
    ɵngcc0.ɵɵproperty("@tableAnimation", undefined);
} }
function DynamicMatTableComponent_mat_header_row_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-header-row", 57);
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("top", ctx_r10.inverseOfTranslation + ctx_r10.headerHeight - 5, "px");
} }
function DynamicMatTableComponent_mat_paginator_16_Template(rf, ctx) { if (rf & 1) {
    const _r69 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-paginator", 58);
    ɵngcc0.ɵɵlistener("page", function DynamicMatTableComponent_mat_paginator_16_Template_mat_paginator_page_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r69); const ctx_r68 = ɵngcc0.ɵɵnextContext(); return ctx_r68.pagination_onChange($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("length", ctx_r11.pagination == null ? null : ctx_r11.pagination.length)("pageSize", ctx_r11.pagination == null ? null : ctx_r11.pagination.pageSize)("pageIndex", ctx_r11.pagination == null ? null : ctx_r11.pagination.pageIndex)("pageSizeOptions", ctx_r11.pagination == null ? null : ctx_r11.pagination.pageSizeOptions);
} }
function DynamicMatTableComponent_div_18_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r72 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 61);
    ɵngcc0.ɵɵlistener("click", function DynamicMatTableComponent_div_18_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r72); const ctx_r71 = ɵngcc0.ɵɵnextContext(2); return ctx_r71.reload_onClick(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "autorenew");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function DynamicMatTableComponent_div_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 59);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelement(2, "br");
    ɵngcc0.ɵɵtemplate(3, DynamicMatTableComponent_div_18_button_3_Template, 3, 0, "button", 60);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r12.languagePack == null ? null : ctx_r12.languagePack.tableLabels.NoData, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r12.showReload);
} }
function DynamicMatTableComponent_ng_template_22_ng_container_0_mat_divider_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-divider");
} }
function DynamicMatTableComponent_ng_template_22_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r78 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 63);
    ɵngcc0.ɵɵlistener("click", function DynamicMatTableComponent_ng_template_22_ng_container_0_Template_button_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r78); const menu_r75 = restoredCtx.$implicit; const ctx_r77 = ɵngcc0.ɵɵnextContext(2); return ctx_r77.onContextMenuItemClick(menu_r75); });
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "span", 64);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(6, DynamicMatTableComponent_ng_template_22_ng_container_0_mat_divider_6_Template, 1, 0, "mat-divider", 12);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const menu_r75 = ctx.$implicit;
    const ctx_r74 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("ltr-menu", ctx_r74.tableSetting.direction === "rtl");
    ɵngcc0.ɵɵproperty("color", menu_r75.color)("disabled", menu_r75.disabled);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(menu_r75.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("text-align-right", ctx_r74.tableSetting.direction === "rtl");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(menu_r75.text);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", menu_r75.divider === true);
} }
function DynamicMatTableComponent_ng_template_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DynamicMatTableComponent_ng_template_22_ng_container_0_Template, 7, 9, "ng-container", 62);
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r14.contextMenuItems);
} }
const _c7 = function (a0) { return { "background-color": a0 }; };
function RowMenuComponent_ng_template_6_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 6);
    ɵngcc0.ɵɵlistener("click", function RowMenuComponent_ng_template_6_button_0_Template_button_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r6); const menu_r4 = restoredCtx.$implicit; const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.menuButton_OnClick(menu_r4); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span", 7);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const menu_r4 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("ltr-menu", ctx_r3.tableSetting.direction === "rtl");
    ɵngcc0.ɵɵproperty("color", menu_r4.color)("disabled", menu_r4.disabled);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(menu_r4.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("text-align-right", ctx_r3.tableSetting.direction === "rtl");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(menu_r4.text);
} }
function RowMenuComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, RowMenuComponent_ng_template_6_button_0_Template, 5, 8, "button", 5);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.visibleActionMenus);
} }
function TableMenuComponent_ng_container_44_div_2_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 24);
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "drag_indicator");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "mat-checkbox", 25);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r10 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("checked", (column_r10 == null ? null : column_r10.display) === "visible");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", column_r10.header, " ");
} }
const _c8 = function (a0, a1) { return { columnIndex: a0, columnTitle: a1 }; };
function TableMenuComponent_ng_container_44_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵlistener("click", function TableMenuComponent_ng_container_44_div_2_Template_div_click_0_listener($event) { $event.stopPropagation(); return $event.preventDefault(); })("cdkDragDropped", function TableMenuComponent_ng_container_44_div_2_Template_div_cdkDragDropped_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.columnMenuDropped($event); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 20);
    ɵngcc0.ɵɵtext(2, "drag_indicator");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "mat-checkbox", 21);
    ɵngcc0.ɵɵlistener("click", function TableMenuComponent_ng_container_44_div_2_Template_mat_checkbox_click_3_listener($event) { return $event.stopPropagation(); })("change", function TableMenuComponent_ng_container_44_div_2_Template_mat_checkbox_change_3_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r17); const column_r10 = restoredCtx.$implicit; const ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.toggleSelectedColumn(column_r10.index); });
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "mat-icon", 22, 1);
    ɵngcc0.ɵɵlistener("click", function TableMenuComponent_ng_container_44_div_2_Template_mat_icon_click_5_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r17); const i_r11 = restoredCtx.index; const ctx_r20 = ɵngcc0.ɵɵnextContext(2); return ctx_r20.setting_onClick(i_r11); });
    ɵngcc0.ɵɵtext(7, "settings");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, TableMenuComponent_ng_container_44_div_2_div_8_Template, 5, 2, "div", 23);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r10 = ctx.$implicit;
    const i_r11 = ctx.index;
    ɵngcc0.ɵɵnextContext(2);
    const _r7 = ɵngcc0.ɵɵreference(48);
    ɵngcc0.ɵɵproperty("cdkDragData", ɵngcc0.ɵɵpureFunction2(5, _c8, i_r11, column_r10.header));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("disabled", (column_r10 == null ? null : column_r10.display) === "prevent-hidden")("checked", (column_r10 == null ? null : column_r10.display) === "visible");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", column_r10.header, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r7);
} }
function TableMenuComponent_ng_container_44_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 14);
    ɵngcc0.ɵɵtemplate(2, TableMenuComponent_ng_container_44_div_2_Template, 9, 8, "div", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 16);
    ɵngcc0.ɵɵelementStart(4, "button", 17);
    ɵngcc0.ɵɵlistener("click", function TableMenuComponent_ng_container_44_Template_button_click_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.apply_OnClick($event); });
    ɵngcc0.ɵɵelementStart(5, "mat-icon", 18);
    ɵngcc0.ɵɵtext(6, "done");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "button", 17);
    ɵngcc0.ɵɵlistener("click", function TableMenuComponent_ng_container_44_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.cancel_OnClick(); });
    ɵngcc0.ɵɵelementStart(8, "mat-icon", 18);
    ɵngcc0.ɵɵtext(9, "clear");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.currentTableSetting.columnSetting);
} }
function TableMenuComponent_ng_template_45_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r6.languagePack.menuLabels.thereIsNoColumn, " ");
} }
function TableMenuComponent_div_49_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r29 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 29);
    ɵngcc0.ɵɵelementStart(2, "mat-icon", 18);
    ɵngcc0.ɵɵtext(3, "filter_alt");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "mat-radio-group", 30);
    ɵngcc0.ɵɵlistener("ngModelChange", function TableMenuComponent_div_49_ng_container_1_Template_mat_radio_group_ngModelChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r29); const ctx_r28 = ɵngcc0.ɵɵnextContext(2); return ctx_r28.currentTableSetting.columnSetting[ctx_r28.currentColumn].filter = $event; });
    ɵngcc0.ɵɵelementStart(6, "mat-radio-button", 31);
    ɵngcc0.ɵɵlistener("click", function TableMenuComponent_div_49_ng_container_1_Template_mat_radio_button_click_6_listener($event) { return $event.stopPropagation(); });
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "mat-radio-button", 32);
    ɵngcc0.ɵɵlistener("click", function TableMenuComponent_div_49_ng_container_1_Template_mat_radio_button_click_8_listener($event) { return $event.stopPropagation(); });
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r24 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r24.languagePack.menuLabels.filterMode, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r24.currentTableSetting.columnSetting[ctx_r24.currentColumn].filter);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r24.languagePack.menuLabels.filterLocalMode);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r24.languagePack.menuLabels.filterServerMode);
} }
function TableMenuComponent_div_49_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r33 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 33);
    ɵngcc0.ɵɵelementStart(2, "mat-icon", 18);
    ɵngcc0.ɵɵtext(3, "sort");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "mat-radio-group", 30);
    ɵngcc0.ɵɵlistener("ngModelChange", function TableMenuComponent_div_49_ng_container_2_Template_mat_radio_group_ngModelChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r33); const ctx_r32 = ɵngcc0.ɵɵnextContext(2); return ctx_r32.currentTableSetting.columnSetting[ctx_r32.currentColumn].sort = $event; });
    ɵngcc0.ɵɵelementStart(6, "mat-radio-button", 31);
    ɵngcc0.ɵɵlistener("click", function TableMenuComponent_div_49_ng_container_2_Template_mat_radio_button_click_6_listener($event) { return $event.stopPropagation(); });
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "mat-radio-button", 32);
    ɵngcc0.ɵɵlistener("click", function TableMenuComponent_div_49_ng_container_2_Template_mat_radio_button_click_8_listener($event) { return $event.stopPropagation(); });
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r25 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r25.languagePack.menuLabels.sortMode, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r25.currentTableSetting.columnSetting[ctx_r25.currentColumn].sort);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r25.languagePack.menuLabels.sortLocalMode);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r25.languagePack.menuLabels.sortServerMode);
} }
function TableMenuComponent_div_49_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    const _r37 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 33);
    ɵngcc0.ɵɵelementStart(2, "mat-icon", 18);
    ɵngcc0.ɵɵtext(3, "print");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "mat-radio-group", 30);
    ɵngcc0.ɵɵlistener("ngModelChange", function TableMenuComponent_div_49_ng_container_3_Template_mat_radio_group_ngModelChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r37); const ctx_r36 = ɵngcc0.ɵɵnextContext(2); return ctx_r36.currentTableSetting.columnSetting[ctx_r36.currentColumn].printable = $event; });
    ɵngcc0.ɵɵelementStart(6, "mat-radio-button", 34);
    ɵngcc0.ɵɵlistener("click", function TableMenuComponent_div_49_ng_container_3_Template_mat_radio_button_click_6_listener($event) { return $event.stopPropagation(); });
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "mat-radio-button", 34);
    ɵngcc0.ɵɵlistener("click", function TableMenuComponent_div_49_ng_container_3_Template_mat_radio_button_click_8_listener($event) { return $event.stopPropagation(); });
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r26 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r26.languagePack.menuLabels.printMode, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r26.currentTableSetting.columnSetting[ctx_r26.currentColumn].printable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", true);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r26.languagePack.menuLabels.printYesMode);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", false);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r26.languagePack.menuLabels.printNoMode);
} }
function TableMenuComponent_div_49_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    const _r41 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 33);
    ɵngcc0.ɵɵelementStart(2, "mat-icon", 18);
    ɵngcc0.ɵɵtext(3, "push_pin");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "mat-radio-group", 30);
    ɵngcc0.ɵɵlistener("ngModelChange", function TableMenuComponent_div_49_ng_container_4_Template_mat_radio_group_ngModelChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r41); const ctx_r40 = ɵngcc0.ɵɵnextContext(2); return ctx_r40.currentTableSetting.columnSetting[ctx_r40.currentColumn].sticky = $event; });
    ɵngcc0.ɵɵelementStart(6, "mat-radio-button", 35);
    ɵngcc0.ɵɵlistener("click", function TableMenuComponent_div_49_ng_container_4_Template_mat_radio_button_click_6_listener($event) { return $event.stopPropagation(); });
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "mat-radio-button", 36);
    ɵngcc0.ɵɵlistener("click", function TableMenuComponent_div_49_ng_container_4_Template_mat_radio_button_click_8_listener($event) { return $event.stopPropagation(); });
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "mat-radio-button", 37);
    ɵngcc0.ɵɵlistener("click", function TableMenuComponent_div_49_ng_container_4_Template_mat_radio_button_click_10_listener($event) { return $event.stopPropagation(); });
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r27 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r27.languagePack.menuLabels.pinMode, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r27.currentTableSetting.columnSetting[ctx_r27.currentColumn].sticky);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r27.languagePack.menuLabels.pinNoneMode);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r27.languagePack.menuLabels.pinStartMode);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r27.languagePack.menuLabels.pinEndMode);
} }
function TableMenuComponent_div_49_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 27);
    ɵngcc0.ɵɵlistener("click", function TableMenuComponent_div_49_Template_div_click_0_listener($event) { $event.stopPropagation(); return $event.preventDefault(); });
    ɵngcc0.ɵɵtemplate(1, TableMenuComponent_div_49_ng_container_1_Template, 10, 4, "ng-container", 28);
    ɵngcc0.ɵɵtemplate(2, TableMenuComponent_div_49_ng_container_2_Template, 10, 4, "ng-container", 28);
    ɵngcc0.ɵɵtemplate(3, TableMenuComponent_div_49_ng_container_3_Template, 10, 6, "ng-container", 28);
    ɵngcc0.ɵɵtemplate(4, TableMenuComponent_div_49_ng_container_4_Template, 12, 5, "ng-container", 28);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r8.isVisible(ctx_r8.currentTableSetting == null ? null : ctx_r8.currentTableSetting.visibaleActionMenu == null ? null : ctx_r8.currentTableSetting.visibaleActionMenu.columnSettingFilter));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r8.isVisible(ctx_r8.currentTableSetting == null ? null : ctx_r8.currentTableSetting.visibaleActionMenu == null ? null : ctx_r8.currentTableSetting.visibaleActionMenu.columnSettingSort));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r8.isVisible(ctx_r8.currentTableSetting == null ? null : ctx_r8.currentTableSetting.visibaleActionMenu == null ? null : ctx_r8.currentTableSetting.visibaleActionMenu.columnSettingFilter));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r8.isVisible(ctx_r8.currentTableSetting == null ? null : ctx_r8.currentTableSetting.visibaleActionMenu == null ? null : ctx_r8.currentTableSetting.visibaleActionMenu.columnSettingPin));
} }
function ToolbarComponent_div_1_a_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "a", 7);
} }
function ToolbarComponent_div_1_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵstyleProp("color", item_r2 == null ? null : item_r2.matIconColor);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(item_r2.matIcon);
} }
function ToolbarComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵtemplate(1, ToolbarComponent_div_1_a_1_Template, 1, 0, "a", 4);
    ɵngcc0.ɵɵelementStart(2, "div", 5);
    ɵngcc0.ɵɵlistener("click", function ToolbarComponent_div_1_Template_div_click_2_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r7); const item_r2 = restoredCtx.$implicit; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.item_onClick(item_r2); });
    ɵngcc0.ɵɵtemplate(3, ToolbarComponent_div_1_mat_icon_3_Template, 2, 3, "mat-icon", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r2 == null ? null : item_r2.splitter);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matRippleColor", ctx_r0.color)("matTooltip", item_r2 == null ? null : item_r2.tooltip);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r2.matIcon);
} }
function ToolbarComponent_div_3_a_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "a", 7);
} }
function ToolbarComponent_div_3_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r8 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵstyleProp("color", item_r8 == null ? null : item_r8.matIconColor);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r8.matIcon, "");
} }
function ToolbarComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, ToolbarComponent_div_3_a_1_Template, 1, 0, "a", 4);
    ɵngcc0.ɵɵelementStart(2, "div", 5);
    ɵngcc0.ɵɵlistener("click", function ToolbarComponent_div_3_Template_div_click_2_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r13); const item_r8 = restoredCtx.$implicit; const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.item_onClick(item_r8); });
    ɵngcc0.ɵɵtemplate(3, ToolbarComponent_div_3_mat_icon_3_Template, 2, 3, "mat-icon", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r8 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r8 == null ? null : item_r8.splitter);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matRippleColor", ctx_r1.color)("matTooltip", item_r8 == null ? null : item_r8.tooltip);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r8.matIcon);
} }
function isNullorUndefined(value) {
    if (value === null || value === undefined) {
        return true;
    }
    else {
        return false;
    }
}
/**
 * clone object but refrence variable not change
 * @template T
 * @param {?} obj
 * @return {?}
 */
function clone(obj) {
    if (obj === null || obj === undefined) {
        return obj;
    }
    else if (Array.isArray(obj)) {
        /** @type {?} */
        const array = [];
        obj.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => array.push(Object.assign({}, item))));
        return array;
    }
    else {
        return Object.assign({}, obj);
    }
}
/**
 * clone object and all refrence variable but may be there is a circle loop.
 * @template T
 * @param {?} obj
 * @return {?}
 */
function deepClone(obj) {
    if (obj === null || obj === undefined) {
        return obj;
    }
    else if (Array.isArray(obj)) {
        /** @type {?} */
        const array = [];
        obj.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => array.push(deepClone(item))));
        return (/** @type {?} */ (array));
    }
    else {
        /** @type {?} */
        const c = Object.assign((/** @type {?} */ ({})), obj);
        /** @type {?} */
        const fields = Object.getOwnPropertyNames(obj);
        fields.forEach((/**
         * @param {?} f
         * @return {?}
         */
        f => {
            /** @type {?} */
            const field = obj[f];
            if (field !== null && typeof field === 'object') {
                c[f] = deepClone(field);
            }
        }));
        return c;
    }
}
/**
 * @param {?} fieldName
 * @param {?} defaultValue
 * @param {...?} variable
 * @return {?}
 */
function getObjectProp(fieldName, defaultValue, ...variable) {
    for (const v in variable) {
        if (variable[v] && !isNullorUndefined(variable[v][fieldName])) {
            return variable[v][fieldName];
        }
    }
    return defaultValue;
}
/**
 * @param {?} from
 * @param {?} to
 * @param {?=} forced
 * @param {?=} nullSkip
 * @param {?=} undefinedSkip
 * @return {?}
 */
function copy(from, to, forced = false, nullSkip = true, undefinedSkip = true) {
    if (from === null || from === undefined) {
        return;
    }
    if (to === null || to === undefined) {
        to = {};
    }
    /** @type {?} */
    const f = Object.keys(from);
    /** @type {?} */
    const t = Object.keys(to);
    f.forEach((/**
     * @param {?} fi
     * @return {?}
     */
    fi => {
        if (forced === true || t.includes(fi) === true) {
            if (!(from[fi] === null && nullSkip === true) && !(from[fi] === undefined && undefinedSkip === true)) {
                to[fi] = from[fi];
            }
        }
    }));
}
// |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// |||||||||||||||||||||||||||||||||||| Text Utils |||||||||||||||||||||||||||||||||||||||||||||||
/**
 * Transforms a camelCase string into a readable text format
 * \@example textify('helloWorld!')
 * // Hello world!
 * @param {?} text
 * @return {?}
 */
function textify(text) {
    return text
        .replace(/([A-Z])/g, (/**
     * @param {?} char
     * @return {?}
     */
    char => ` ${char.toLowerCase()}`))
        .replace(/^([a-z])/, (/**
     * @param {?} char
     * @return {?}
     */
    char => char.toUpperCase()));
}
/**
 * Transforms a text string into a title case text format
 * \@example titleCase('hello world!')
 * // Hello Workd!
 * @param {?} value
 * @return {?}
 */
function titleCase(value) {
    /** @type {?} */
    const sentence = value.toLowerCase().split(' ');
    for (let i = 0; i < sentence.length; i++) {
        sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);
    }
    return sentence.join(' ');
}
/**
 * @record
 * @template T
 */
function Dictionary() { }

/**
 * @fileoverview added by tsickle
 * Generated from: lib/cores/dynamic-cell/IDynamicCell.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function IDynamicCell() { }
if (false) {
    /** @type {?} */
    IDynamicCell.prototype.row;
    /** @type {?} */
    IDynamicCell.prototype.column;
    /** @type {?} */
    IDynamicCell.prototype.parent;
    /** @type {?|undefined} */
    IDynamicCell.prototype.onRowEvent;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utilies/text.utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Simplifies a string (trims and lowerCases)
 * @param {?} s
 * @return {?}
 */
function simplify(s) {
    return `${s}`.trim().toLowerCase();
}
/**
 * Transforms a camelCase string into a readable text format
 * \@example textify('helloWorld!')
 * // Hello world!
 * @param {?} text
 * @return {?}
 */
function textify$1(text) {
    return text
        .replace(/([A-Z])/g, (/**
     * @param {?} char
     * @return {?}
     */
    char => ` ${char.toLowerCase()}`))
        .replace(/^([a-z])/, (/**
     * @param {?} char
     * @return {?}
     */
    char => char.toUpperCase()));
}
/**
 * Transforms a text string into a title case text format
 * \@example titleCase('hello world!')
 * // Hello Workd!
 * @param {?} value
 * @return {?}
 */
function titleCase$1(value) {
    /** @type {?} */
    const sentence = value.toLowerCase().split(' ');
    for (let i = 0; i < sentence.length; i++) {
        sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);
    }
    return sentence.join(' ');
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/cores/table-data-source.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class TableVirtualScrollDataSource extends MatTableDataSource {
    constructor() {
        super(...arguments);
        this.filterMap = {};
    }
    /**
     * @return {?}
     */
    get allData() {
        return this.data;
    }
    /**
     * @return {?}
     */
    toTranslate() {
        /** @type {?} */
        const tranList = [];
        /** @type {?} */
        const keys = Object.keys(this.filterMap);
        for (const k of keys) {
            /** @type {?} */
            let fieldTotalTran = '';
            for (const f of this.filterMap[k]) {
                fieldTotalTran += f.toPrint();
            }
            if (fieldTotalTran !== '') {
                tranList.push({ key: titleCase$1(k), value: fieldTotalTran });
            }
        }
        return tranList;
    }
    /**
     * @param {?} fieldName
     * @return {?}
     */
    getFilter(fieldName) {
        return this.filterMap[fieldName];
    }
    /**
     * @param {?} fieldName
     * @param {?} filters
     * @return {?}
     */
    setFilter(fieldName, filters) {
        this.filterMap[fieldName] = filters;
        return new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        subscriber => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.refreshFilterPredicate();
                subscriber.next();
                subscriber.complete();
            }), 200); // for show progress
        }));
    }
    /**
     * @param {?=} fieldName
     * @return {?}
     */
    clearFilter(fieldName = null) {
        if (fieldName != null) {
            delete this.filterMap[fieldName];
        }
        else {
            this.filterMap = {};
        }
        this.refreshFilterPredicate();
    }
    /**
     * @return {?}
     */
    clearData() {
        this.data = [];
    }
    /**
     * @return {?}
     */
    refreshFilterPredicate() {
        /** @type {?} */
        let conditionsString = '';
        Object.keys(this.filterMap).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            let fieldCondition = '';
            this.filterMap[key].forEach((/**
             * @param {?} fieldFilter
             * @param {?} row
             * @param {?} array
             * @return {?}
             */
            (fieldFilter, row, array) => {
                if (row < array.length - 1) {
                    fieldCondition += fieldFilter.toString(key) + (fieldFilter.type === 'and' ? ' && ' : ' || ');
                }
                else {
                    fieldCondition += fieldFilter.toString(key);
                }
            }));
            if (fieldCondition !== '') {
                conditionsString += ` ${conditionsString === '' ? '' : ' && '} ( ${fieldCondition} )`;
            }
        }));
        if (conditionsString !== '') {
            /** @type {?} */
            const filterFunction = new Function('_a$', 'return ' + conditionsString);
            this.filterPredicate = (/**
             * @param {?} data
             * @param {?} filter
             * @return {?}
             */
            (data, filter) => (/** @type {?} */ (filterFunction(data))));
        }
        else {
            this.filterPredicate = (/**
             * @param {?} data
             * @param {?} filter
             * @return {?}
             */
            (data, filter) => true);
        }
        this.filter = conditionsString;
    }
    // When client paging active use for reterive paging data
    /**
     * @param {?} data
     * @return {?}
     */
    pagingData(data) {
        /** @type {?} */
        const p = ((/** @type {?} */ (this)))._paginator;
        if (p && p !== null) {
            /** @type {?} */
            const end = (p.pageIndex + 1) * p.pageSize;
            /** @type {?} */
            const start = p.pageIndex * p.pageSize;
            return data.slice(start, end);
        }
        return data;
    }
    /**
     * @return {?}
     */
    _updateChangeSubscription() {
        var _a;
        this.initStreams();
        /** @type {?} */
        const sort = ((/** @type {?} */ (this)))._sort;
        /** @type {?} */
        const paginator = ((/** @type {?} */ (this)))._paginator;
        /** @type {?} */
        const internalPageChanges = ((/** @type {?} */ (this)))._internalPageChanges;
        /** @type {?} */
        const filter = ((/** @type {?} */ (this)))._filter;
        /** @type {?} */
        const renderData = ((/** @type {?} */ (this)))._renderData;
        /** @type {?} */
        const dataStream = ((/** @type {?} */ (this)))._data;
        /** @type {?} */
        const sortChange = sort ?
            (/** @type {?} */ (merge(sort.sortChange, sort.initialized))) : of(null);
        /** @type {?} */
        const pageChange = paginator ?
            (/** @type {?} */ (merge(paginator.page, internalPageChanges, paginator.initialized))) : of(null);
        // First Filter
        /** @type {?} */
        const filteredData = combineLatest([dataStream, filter]).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([data]) => this._filterData(data))));
        // Second Order
        /** @type {?} */
        const orderedData = combineLatest([filteredData, sortChange]).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([data]) => this._orderData(data))));
        // Last Paging
        /** @type {?} */
        const paginatedData = combineLatest([orderedData, pageChange]).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([data]) => this.pagingData(data))));
        (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        this._renderChangesSubscription = new Subscription();
        this._renderChangesSubscription.add(paginatedData.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => this.dataToRender$.next(data))));
        this._renderChangesSubscription.add(this.dataOfRange$.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => renderData.next(data))));
    }
    /**
     * @private
     * @return {?}
     */
    initStreams() {
        if (!this.streamsReady) {
            this.dataToRender$ = new ReplaySubject(1);
            this.dataOfRange$ = new ReplaySubject(1);
            this.streamsReady = true;
        }
    }
}
if (false) {
    /** @type {?} */
    TableVirtualScrollDataSource.prototype.dataToRender$;
    /** @type {?} */
    TableVirtualScrollDataSource.prototype.dataOfRange$;
    /**
     * @type {?}
     * @private
     */
    TableVirtualScrollDataSource.prototype.streamsReady;
    /**
     * @type {?}
     * @private
     */
    TableVirtualScrollDataSource.prototype.filterMap;
}
/**
 * @record
 * @template T
 */
function HashMap() { }

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/dynamic-mat-table.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TableService {
    constructor() { }
    /**
     * ********************************** Local Export ****************************************
     * @return {?}
     */
    static getFormattedTime() {
        /** @type {?} */
        const today = new Date();
        /** @type {?} */
        const y = today.getFullYear();
        /** @type {?} */
        const m = today.getMonth() + 1;
        /** @type {?} */
        const d = today.getDate();
        /** @type {?} */
        const h = today.getHours();
        /** @type {?} */
        const mi = today.getMinutes();
        /** @type {?} */
        const s = today.getSeconds();
        return y + "-" + m + "-" + d + "-" + h + "-" + mi + "-" + s;
    }
    // private downloadBlob(blob: any, filename: string) {
    //   if (navigator.msSaveBlob) { // IE 10+
    //     navigator.msSaveBlob(blob, filename);
    //   } else {
    //     const link = document.createElement('a');
    //     if (link.download !== undefined) {
    //       // Browsers that support HTML5 download attribute
    //       const link = window.document.createElement('a');
    //       const date = new Date();
    //       link.className = 'download' + date.getUTCFullYear() + date.getUTCMonth() + date.getUTCSeconds();
    //       link.setAttribute('href', blob);
    //       link.setAttribute('download', filename);
    //       link.style.visibility = 'hidden';
    //       link.click();
    //       // setTimeout(() => {
    //       //   const g = document.body.getElementsByClassName(link.className);
    //       //   document.body.removeChild(link);
    //       // });
    //     }
    //   }
    // }
    /**
     * @private
     * @param {?} blob
     * @param {?} filename
     * @return {?}
     */
    downloadBlob(blob, filename) {
        if (navigator.msSaveBlob) {
            // IE 10+
            navigator.msSaveBlob(blob, filename);
        }
        else {
            /** @type {?} */
            const link = document.createElement("a");
            if (link.download !== undefined) {
                // Browsers that support HTML5 download attribute
                /** @type {?} */
                const url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", filename);
                link.style.visibility = "hidden";
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }
    }
    /**
     * @template T
     * @param {?} columns
     * @param {?} rows
     * @param {?} selectionModel
     * @param {?=} filename
     * @return {?}
     */
    exportToCsv(columns, rows, selectionModel, filename = "") {
        filename = filename === "" ? this.tableName + TableService.getFormattedTime() + ".csv" : filename;
        if (!rows || !rows.length) {
            return;
        }
        /** @type {?} */
        const fields = columns.filter((/**
         * @param {?} c
         * @return {?}
         */
        (c) => c.exportable !== false && c.display !== 'hiden'));
        /** @type {?} */
        const separator = ",";
        /** @type {?} */
        const CR_LF = "\n";
        //'\u0D0A';
        /** @type {?} */
        const keys = fields.map((/**
         * @param {?} f
         * @return {?}
         */
        f => f.name));
        /** @type {?} */
        const headers = fields.map((/**
         * @param {?} f
         * @return {?}
         */
        f => f.header));
        /** @type {?} */
        const csvContent = headers.join(separator) + CR_LF +
            rows
                .map((/**
             * @param {?} row
             * @return {?}
             */
            (row) => {
                return fields.map((/**
                 * @param {?} f
                 * @return {?}
                 */
                (f) => {
                    /** @type {?} */
                    let cell = f.toExport(row, "csv") || "";
                    cell = cell instanceof Date ? cell.toLocaleString() : cell.toString().replace(/"/g, '""');
                    if (cell.search(/("|,|\n)/g) >= 0) {
                        cell = `"${cell}"`;
                    }
                    return cell;
                })).join(separator);
            })).join(CR_LF);
        /** @type {?} */
        const blob = new Blob([
            new Uint8Array([0xEF, 0xBB, 0xBF]),
            csvContent
        ], { type: 'text/csv;charset=utf-8' });
        this.downloadBlob(blob, filename);
    }
    /**
     * @param {?} rows
     * @param {?=} filename
     * @return {?}
     */
    exportToJson(rows, filename = "") {
        filename =
            filename === ""
                ? this.tableName + TableService.getFormattedTime() + ".json"
                : filename;
        /** @type {?} */
        const blob = new Blob([JSON.stringify(rows)], {
            type: "text/csv;charset=utf-8;",
        });
        this.downloadBlob(blob, filename);
    }
    /**
     * ********************************** Save Setting into storage ****************************************
     * @param {?} columnInfo
     * @param {?=} saveName
     * @return {?}
     */
    loadSavedColumnInfo(columnInfo, saveName) {
        // Only load if a save name is passed in
        if (saveName) {
            if (!localStorage) {
                return;
            }
            /** @type {?} */
            const loadedInfo = localStorage.getItem(`${saveName}-columns`);
            if (loadedInfo) {
                return JSON.parse(loadedInfo);
            }
            this.saveColumnInfo(columnInfo);
            return columnInfo;
        }
    }
    /**
     * @param {?} columnInfo
     * @param {?=} saveName
     * @return {?}
     */
    saveColumnInfo(columnInfo, saveName = this.tableName) {
        // console.log(saveName);
        if (saveName) {
            if (!localStorage) {
                return;
            }
            localStorage.setItem(`${saveName}-columns`, JSON.stringify(columnInfo));
        }
    }
}
TableService.ɵfac = function TableService_Factory(t) { return new (t || TableService)(); };
/** @nocollapse */
TableService.ctorParameters = () => [];
/** @nocollapse */ TableService.ɵprov = ɵɵdefineInjectable({ factory: function TableService_Factory() { return new TableService(); }, token: TableService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TableService, [{
        type: Injectable,
        args: [{
                providedIn: "root"
            }]
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    TableService.prototype.tableName;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/cores/table.core.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class TableCoreDirective {
    /**
     * @param {?} tableService
     * @param {?} cdr
     */
    constructor(tableService, cdr) {
        this.tableService = tableService;
        this.cdr = cdr;
        this.backgroundColor = null;
        this.contextMenuItems = [];
        this.expandColumn = [];
        this.defaultWidth = null;
        this.minWidth = 120;
        /**
         * ************************************ I/O parameters ********************************
         */
        this.printConfig = {};
        this.rowHeight = 48;
        this.headerHeight = 56;
        this.footerHeight = 48;
        this.headerEnable = true;
        this.footerEnable = false;
        // tslint:disable-next-line: no-output-on-prefix
        this.onTableEvent = new EventEmitter();
        this.onRowEvent = new EventEmitter();
        this.settingChange = new EventEmitter();
        this.paginationChange = new EventEmitter();
        // Variables //
        this.progressColumn = [];
        this.displayedColumns = [];
        this.tvsDataSource = new TableVirtualScrollDataSource([]);
        this._rowSelectionModel = new SelectionModel(true, []);
        this._tablePagination = {};
        this.tablePagingMode = 'none';
        this.viewportClass = 'viewport-with-pagination';
        this.showProgress = true;
        this.tableSetting = {
            direction: 'ltr',
            columnSetting: null,
            visibaleActionMenu: null
        };
    }
    /**
     * @return {?}
     */
    get direction() {
        var _a;
        return (_a = this.tableSetting) === null || _a === void 0 ? void 0 : _a.direction;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set direction(value) {
        this.tableSetting.direction = value;
    }
    /**
     * @return {?}
     */
    get ScrollStrategyType() {
        return this.tableSetting.scrollStrategy;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ScrollStrategyType(value) {
        this.viewport['_scrollStrategy'].scrollStrategyMode = value;
        this.tableSetting.scrollStrategy = value;
    }
    /**
     * @return {?}
     */
    get pagingMode() {
        return this.tablePagingMode;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pagingMode(value) {
        this.tablePagingMode = value;
        this.updatePagination();
    }
    /**
     * @return {?}
     */
    get pagination() {
        return this._tablePagination;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pagination(value) {
        if (value && value !== null) {
            this._tablePagination = value;
            if (isNullorUndefined(this._tablePagination.pageSizeOptions)) {
                this._tablePagination.pageSizeOptions = [5, 10, 25, 100];
            }
            if (isNullorUndefined(this._tablePagination.pageSizeOptions)) {
                this._tablePagination.pageSize = this._tablePagination.pageSizeOptions[0];
            }
            this.updatePagination();
        }
    }
    /**
     * @return {?}
     */
    get rowSelectionModel() {
        return this._rowSelectionModel;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set rowSelectionModel(value) {
        if (!isNullorUndefined(value)) {
            if (this._rowSelectionMode && value && this._rowSelectionMode !== 'none') {
                this._rowSelectionMode = (value.isMultipleSelection() === true ? 'multi' : 'single');
            }
            this._rowSelectionModel = value;
        }
    }
    /**
     * @return {?}
     */
    get rowSelectionMode() {
        return this._rowSelectionMode;
    }
    /**
     * @param {?} selection
     * @return {?}
     */
    set rowSelectionMode(selection) {
        selection = selection || 'none';
        this._rowSelectionModel = selection === 'none' ? null : new SelectionModel(selection === 'multi', []);
        if (selection === 'none' && this._rowSelectionMode !== 'none' && this.displayedColumns[0] === 'row-checkbox') {
            this.displayedColumns.shift();
            this.saveSetting(this.tableSetting, false);
        }
        else if (selection !== 'none' && this._rowSelectionMode === 'none') {
            this.displayedColumns.unshift('row-checkbox');
            this.saveSetting(this.tableSetting, false);
        }
        this._rowSelectionMode = selection;
    }
    /**
     * @return {?}
     */
    get tableName() {
        return this.tableService.tableName;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tableName(value) {
        this.tableService.tableName = value;
    }
    /**
     * @return {?}
     */
    get showProgress() {
        return this.progressColumn.length > 0;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set showProgress(value) {
        this.progressColumn = [];
        if (value === true) {
            this.progressColumn.push('progress');
        }
    }
    // private totalRecord = 0;
    // @Input() 
    // get dataSource() {    
    //   if(isNullorUndefined(this.tvsDataSource)) {      
    //     return null;
    //   }    
    //   if (this.totalRecord !== this.tvsDataSource.allData.length) {      
    //     this.initSystemField(this.tvsDataSource.allData);
    //   }
    //   return this.tvsDataSource;
    // } 
    // set dataSource(value: TableVirtualScrollDataSource<T>) {           
    //   this.clear();    
    //   if (!isNullorUndefined(value)) {      
    //     this.initSystemField(value.data);
    //     this.tvsDataSource = value;
    //     this.tvsDataSource.sort = this.sort;
    //     (this.tvsDataSource as any)._paginator = value;      
    //   } 
    // }
    /**
     * @protected
     * @param {?} data
     * @return {?}
     */
    initSystemField(data) {
        data = data.map((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        (item, index) => {
            item.id = index;
            item.option = item.option || {};
            return item;
        }));
    }
    /**
     * @return {?}
     */
    get expandComponent() {
        return this._expandComponent;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set expandComponent(value) {
        this._expandComponent = value;
        if (this._expandComponent !== null && this._expandComponent !== undefined) {
            this.expandColumn = ['expandedDetail'];
        }
        else {
            this.expandColumn = [];
        }
    }
    /**
     * @return {?}
     */
    get columns() {
        return this.tableColumns;
    }
    /**
     * @param {?} fields
     * @return {?}
     */
    set columns(fields) {
        (fields || []).forEach((/**
         * @param {?} f
         * @param {?} i
         * @return {?}
         */
        (f, i) => {
            // key name error //
            if (f.name.toLowerCase() === 'id') {
                throw 'Field name is reserved.["id"]';
            }
            /** @type {?} */
            const settingFields = (this.tableSetting.columnSetting || []).filter((/**
             * @param {?} s
             * @return {?}
             */
            s => s.name === f.name));
            /** @type {?} */
            const settingField = settingFields.length > 0 ? settingFields[0] : null;
            // default value for fields
            f.printable = f.printable || true;
            f.exportable = f.exportable || true;
            f.toExport = f.toExport || ((/**
             * @param {?} value
             * @param {?} type
             * @return {?}
             */
            (value, type) => typeof value === 'object' ? null : value || ''));
            f.toPrint = (/**
             * @param {?} value
             * @return {?}
             */
            (value) => typeof value === 'object' ? null : value || '');
            f.enableContextMenu = f.enableContextMenu || true;
            f.header = f.header || titleCase$1(f.name);
            f.display = getObjectProp('display', 'visible', settingField, f);
            f.filter = getObjectProp('filter', 'client-side', settingField, f);
            f.sort = getObjectProp('sort', 'client-side', settingField, f);
            f.sticky = getObjectProp('sticky', 'none', settingField, f);
            f.width = getObjectProp('width', this.defaultWidth, settingField, f);
        }));
        this.tableColumns = fields;
        this.updateColumn();
    }
    /**
     * @return {?}
     */
    updateColumn() {
        if (isNullorUndefined(this.tableSetting.columnSetting)) {
            this.tableSetting.columnSetting = clone(this.tableColumns);
            this.refreshTableSetting();
        }
        this.setDisplayedColumns();
    }
    /**
     * ************************************* Methods *********************************************
     * @return {?}
     */
    refreshTableSetting() {
        // this.tableSetting = clone(this.tableSetting);
    }
    /**
     * @return {?}
     */
    updatePagination() {
        if (isNullorUndefined(this.tvsDataSource)) {
            return;
        }
        if (this.tablePagingMode === 'client-side' || this.tablePagingMode === 'server-side') {
            this.viewportClass = 'viewport-with-pagination';
            if (!isNullorUndefined(this.tvsDataSource.paginator)) {
                /** @type {?} */
                let dataLen = this.tvsDataSource.paginator.length;
                if (!isNullorUndefined(this._tablePagination.length) && this._tablePagination.length > dataLen) {
                    dataLen = this._tablePagination.length;
                }
                this.tvsDataSource.paginator.length = dataLen;
            }
        }
        else {
            this.viewportClass = 'viewport';
            if (((/** @type {?} */ (this.tvsDataSource)))._paginator !== undefined) {
                delete ((/** @type {?} */ (this.tvsDataSource)))._paginator;
            }
        }
        this.tvsDataSource.refreshFilterPredicate();
    }
    /**
     * @return {?}
     */
    clear() {
        if (!isNullorUndefined(this.tvsDataSource)) {
            if (this.viewport) {
                this.viewport.scrollTo({ top: 0, behavior: 'auto' });
            }
            this.tvsDataSource.clearData();
            this.expandedElement = null;
        }
        if (this._rowSelectionModel) {
            this._rowSelectionModel.clear();
        }
        this.cdr.detectChanges();
    }
    /**
     * @return {?}
     */
    setDisplayedColumns() {
        if (this.columns) {
            this.displayedColumns = [];
            this.columns.forEach((/**
             * @param {?} colunm
             * @param {?} index
             * @return {?}
             */
            (colunm, index) => {
                colunm.index = index;
                if (colunm.display === undefined || colunm.display === 'visible' || colunm.display === 'prevent-hidden') {
                    this.displayedColumns.push(colunm.name);
                }
            }));
            //bugfixed because of double header show
            // if ((this._rowSelectionMode === 'multi' || this._rowSelectionMode === 'single') && this.displayedColumns.indexOf('row-checkbox') === -1) {
            //   this.displayedColumns.unshift('row-checkbox');
            // } 
            setTimeout((/**
             * @return {?}
             */
            () => {
                if ((this._rowSelectionMode === 'multi' || this._rowSelectionMode === 'single') && this.displayedColumns.indexOf('row-checkbox') === -1) {
                    this.displayedColumns.unshift('row-checkbox');
                }
            }), 0);
            if (this.tableSetting.visibleTableMenu !== false) {
                this.displayedColumns.push('table-menu');
            }
        }
        // this.updatePagination();
    }
    /**
     * ********************************* Drag & Drop Column ******************************************
     * @return {?}
     */
    refreshGrid() {
        this.cdr.detectChanges();
        this.table.renderRows();
    }
    /**
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    moveRow(from, to) {
        if (from >= 0 && from < this.tvsDataSource.data.length && to >= 0 && to < this.tvsDataSource.data.length) {
            this.tvsDataSource.data[from].id = to;
            this.tvsDataSource.data[to].id = from;
            moveItemInArray(this.tvsDataSource.data, from, to);
            this.tvsDataSource.data = Object.assign([], this.tvsDataSource.data);
        }
    }
    /**
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    moveColumn(from, to) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            moveItemInArray(this.columns, from, to);
            this.refreshColumn(this.columns);
        }));
    }
    /**
     * @param {?} columns
     * @return {?}
     */
    refreshColumn(columns) {
        if (this.viewport) {
            /** @type {?} */
            const currentOffset = this.viewport.measureScrollOffset();
            this.columns = columns;
            this.setDisplayedColumns();
            setTimeout((/**
             * @return {?}
             */
            () => this.viewport.scrollTo({ top: currentOffset, behavior: 'auto' })), 0);
        }
    }
    /**
     * @param {?} tableSetting
     * @param {?=} raiseEvent
     * @return {?}
     */
    saveSetting(tableSetting, raiseEvent = false) {
        if (tableSetting !== null) {
            this.tableSetting = tableSetting;
            this.refreshColumn(tableSetting.columnSetting);
        }
        if (raiseEvent === true) {
            this.settingChange.emit(this.tableSetting);
        }
    }
    /************************************ Selection Table Row *******************************************/
    /**
     * Whether the number of selected elements matches the total number of rows.
     * @return {?}
     */
    isAllSelected() {
        /** @type {?} */
        const numSelected = this._rowSelectionModel.selected.length;
        /** @type {?} */
        const numRows = this.tvsDataSource.data.length;
        return numSelected === numRows;
    }
    /**
     * Selects all rows if they are not all selected; otherwise clear selection.
     * @return {?}
     */
    masterToggle() {
        this.isAllSelected() ?
            this._rowSelectionModel.clear() :
            this.tvsDataSource.data.forEach((/**
             * @param {?} row
             * @return {?}
             */
            row => this._rowSelectionModel.select(row)));
        this.onRowEvent.emit({ event: 'MasterSelectionChange', sender: this._rowSelectionModel });
    }
    /**
     * @param {?} e
     * @param {?} row
     * @return {?}
     */
    onRowSelectionChange(e, row) {
        if (e) {
            this._rowSelectionModel.toggle(row);
            this.onRowEvent.emit({ event: 'RowSelectionChange', sender: this._rowSelectionModel });
        }
    }
}
TableCoreDirective.ɵfac = function TableCoreDirective_Factory(t) { return new (t || TableCoreDirective)(ɵngcc0.ɵɵdirectiveInject(TableService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
TableCoreDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TableCoreDirective, selectors: [["", "core", ""]], viewQuery: function TableCoreDirective_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(MatSort, 7);
        ɵngcc0.ɵɵviewQuery(MatPaginator, 7);
        ɵngcc0.ɵɵviewQuery(MatTable, 7);
        ɵngcc0.ɵɵviewQuery(CdkVirtualScrollViewport, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.sort = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.paginator = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.table = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.viewport = _t.first);
    } }, hostVars: 2, hostBindings: function TableCoreDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("direction", ctx.direction);
    } }, inputs: { backgroundColor: "backgroundColor", contextMenuItems: "contextMenuItems", defaultWidth: "defaultWidth", minWidth: "minWidth", printConfig: "printConfig", rowHeight: "rowHeight", headerHeight: "headerHeight", footerHeight: "footerHeight", headerEnable: "headerEnable", footerEnable: "footerEnable", showProgress: "showProgress", direction: "direction", ScrollStrategyType: "ScrollStrategyType", pagingMode: "pagingMode", pagination: "pagination", rowSelectionModel: "rowSelectionModel", rowSelectionMode: "rowSelectionMode", tableName: "tableName", expandComponent: "expandComponent", columns: "columns", dataSource: "dataSource", rowContextMenuItems: "rowContextMenuItems", sticky: "sticky", pending: "pending", showNoData: "showNoData", showReload: "showReload" }, outputs: { onTableEvent: "onTableEvent", onRowEvent: "onRowEvent", settingChange: "settingChange", paginationChange: "paginationChange" } });
/** @nocollapse */
TableCoreDirective.ctorParameters = () => [
    { type: TableService },
    { type: ChangeDetectorRef }
];
TableCoreDirective.propDecorators = {
    sort: [{ type: ViewChild, args: [MatSort, { static: true },] }],
    paginator: [{ type: ViewChild, args: [MatPaginator, { static: true },] }],
    dataSource: [{ type: Input }],
    backgroundColor: [{ type: Input }],
    direction: [{ type: Input }, { type: HostBinding, args: ['style.direction',] }],
    contextMenuItems: [{ type: Input }],
    ScrollStrategyType: [{ type: Input }],
    pagingMode: [{ type: Input }],
    pagination: [{ type: Input }],
    rowSelectionModel: [{ type: Input }],
    rowSelectionMode: [{ type: Input }],
    tableName: [{ type: Input }],
    showProgress: [{ type: Input }],
    expandComponent: [{ type: Input }],
    rowContextMenuItems: [{ type: Input }],
    defaultWidth: [{ type: Input }],
    minWidth: [{ type: Input }],
    columns: [{ type: Input }],
    printConfig: [{ type: Input }],
    sticky: [{ type: Input }],
    pending: [{ type: Input }],
    rowHeight: [{ type: Input }],
    headerHeight: [{ type: Input }],
    footerHeight: [{ type: Input }],
    headerEnable: [{ type: Input }],
    footerEnable: [{ type: Input }],
    showNoData: [{ type: Input }],
    showReload: [{ type: Input }],
    onTableEvent: [{ type: Output }],
    onRowEvent: [{ type: Output }],
    settingChange: [{ type: Output }],
    paginationChange: [{ type: Output }],
    table: [{ type: ViewChild, args: [MatTable, { static: true },] }],
    viewport: [{ type: ViewChild, args: [CdkVirtualScrollViewport, { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TableCoreDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[core]'
            }]
    }], function () { return [{ type: TableService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { backgroundColor: [{
            type: Input
        }], contextMenuItems: [{
            type: Input
        }], defaultWidth: [{
            type: Input
        }], minWidth: [{
            type: Input
        }], printConfig: [{
            type: Input
        }], rowHeight: [{
            type: Input
        }], headerHeight: [{
            type: Input
        }], footerHeight: [{
            type: Input
        }], headerEnable: [{
            type: Input
        }], footerEnable: [{
            type: Input
        }], onTableEvent: [{
            type: Output
        }], onRowEvent: [{
            type: Output
        }], settingChange: [{
            type: Output
        }], paginationChange: [{
            type: Output
        }], showProgress: [{
            type: Input
        }], direction: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['style.direction']
        }], ScrollStrategyType: [{
            type: Input
        }], pagingMode: [{
            type: Input
        }], pagination: [{
            type: Input
        }], rowSelectionModel: [{
            type: Input
        }], rowSelectionMode: [{
            type: Input
        }], tableName: [{
            type: Input
        }], expandComponent: [{
            type: Input
        }], columns: [{
            type: Input
        }], sort: [{
            type: ViewChild,
            args: [MatSort, { static: true }]
        }], paginator: [{
            type: ViewChild,
            args: [MatPaginator, { static: true }]
        }], dataSource: [{
            type: Input
        }], rowContextMenuItems: [{
            type: Input
        }], sticky: [{
            type: Input
        }], pending: [{
            type: Input
        }], showNoData: [{
            type: Input
        }], showReload: [{
            type: Input
        }], table: [{
            type: ViewChild,
            args: [MatTable, { static: true }]
        }], viewport: [{
            type: ViewChild,
            args: [CdkVirtualScrollViewport, { static: true }]
        }] }); })();
if (false) {
    /** @type {?} */
    TableCoreDirective.prototype.sort;
    /** @type {?} */
    TableCoreDirective.prototype.paginator;
    /** @type {?} */
    TableCoreDirective.prototype.dataSource;
    /** @type {?} */
    TableCoreDirective.prototype.backgroundColor;
    /** @type {?} */
    TableCoreDirective.prototype.contextMenuItems;
    /** @type {?} */
    TableCoreDirective.prototype.expandColumn;
    /**
     * @type {?}
     * @private
     */
    TableCoreDirective.prototype._expandComponent;
    /** @type {?} */
    TableCoreDirective.prototype.rowContextMenuItems;
    /** @type {?} */
    TableCoreDirective.prototype.defaultWidth;
    /** @type {?} */
    TableCoreDirective.prototype.minWidth;
    /**
     * ************************************ I/O parameters ********************************
     * @type {?}
     */
    TableCoreDirective.prototype.printConfig;
    /** @type {?} */
    TableCoreDirective.prototype.sticky;
    /** @type {?} */
    TableCoreDirective.prototype.pending;
    /** @type {?} */
    TableCoreDirective.prototype.rowHeight;
    /** @type {?} */
    TableCoreDirective.prototype.headerHeight;
    /** @type {?} */
    TableCoreDirective.prototype.footerHeight;
    /** @type {?} */
    TableCoreDirective.prototype.headerEnable;
    /** @type {?} */
    TableCoreDirective.prototype.footerEnable;
    /** @type {?} */
    TableCoreDirective.prototype.showNoData;
    /** @type {?} */
    TableCoreDirective.prototype.showReload;
    /** @type {?} */
    TableCoreDirective.prototype.onTableEvent;
    /** @type {?} */
    TableCoreDirective.prototype.onRowEvent;
    /** @type {?} */
    TableCoreDirective.prototype.settingChange;
    /** @type {?} */
    TableCoreDirective.prototype.paginationChange;
    /**
     * ************************************ Expand Row ********************************
     * @type {?}
     */
    TableCoreDirective.prototype.expandedElement;
    /** @type {?} */
    TableCoreDirective.prototype.progressColumn;
    /** @type {?} */
    TableCoreDirective.prototype.displayedColumns;
    /** @type {?} */
    TableCoreDirective.prototype.tableColumns;
    /** @type {?} */
    TableCoreDirective.prototype.tvsDataSource;
    /**
     * @type {?}
     * @private
     */
    TableCoreDirective.prototype._rowSelectionMode;
    /**
     * @type {?}
     * @private
     */
    TableCoreDirective.prototype._rowSelectionModel;
    /**
     * @type {?}
     * @private
     */
    TableCoreDirective.prototype._tablePagination;
    /** @type {?} */
    TableCoreDirective.prototype.tablePagingMode;
    /** @type {?} */
    TableCoreDirective.prototype.viewportClass;
    /** @type {?} */
    TableCoreDirective.prototype.tableSetting;
    /**
     * ************************************* Refrence Variables **************************************
     * @type {?}
     */
    TableCoreDirective.prototype.table;
    /** @type {?} */
    TableCoreDirective.prototype.viewport;
    /** @type {?} */
    TableCoreDirective.prototype.tableService;
    /** @type {?} */
    TableCoreDirective.prototype.cdr;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/filter/compare/abstract-filter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template T
 */
class AbstractFilter {
    /**
     * @return {?}
     */
    hasValue() {
        if (this.parameters !== null) {
            return this.parameters.filter((/**
             * @param {?} p
             * @return {?}
             */
            p => p.value != null && p.value !== undefined && p.value.toString() !== '')).length > 0;
        }
    }
}
if (false) {
    /** @type {?} */
    AbstractFilter.prototype.parameters;
    /** @type {?} */
    AbstractFilter.prototype.type;
    /** @type {?} */
    AbstractFilter.prototype.selectedIndex;
    /** @type {?} */
    AbstractFilter.prototype.selectedValue;
    /**
     * @abstract
     * @param {?} dynamicVariable
     * @return {?}
     */
    AbstractFilter.prototype.toString = function (dynamicVariable) { };
    /**
     * @abstract
     * @return {?}
     */
    AbstractFilter.prototype.toPrint = function () { };
    /**
     * @abstract
     * @return {?}
     */
    AbstractFilter.prototype.toSql = function () { };
    /**
     * @abstract
     * @return {?}
     */
    AbstractFilter.prototype.getOperations = function () { };
}
/**
 * @record
 */
function FilterOperation() { }
if (false) {
    /** @type {?} */
    FilterOperation.prototype.predicate;
    /** @type {?} */
    FilterOperation.prototype.text;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/filter/compare/text-filter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const contains = 'a.toString().includes(b)';
/** @type {?} */
const equals = 'a.toString() === b.toString()';
/** @type {?} */
const startsWith = 'a.toString().startsWith(b)';
/** @type {?} */
const endsWith = 'a.toString().endsWith(b.toString())';
/** @type {?} */
const empty = '!a';
/** @type {?} */
const notEmpty = '!!a';
/** @type {?} */
const operations = [contains, equals, startsWith, endsWith, empty, notEmpty];
class TextFilter extends AbstractFilter {
    /**
     * @param {?} languagePack
     */
    constructor(languagePack) {
        super();
        this.languagePack = languagePack;
        // tslint:disable-next-line:variable-name
        this._selectedIndex = null;
        this._selectedIndex = 0;
        if (TextFilter.operationList.length === 0) { // init for first time
            operations.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            fn => {
                TextFilter.operationList.push({ predicate: fn, text: null });
            }));
        }
        TextFilter.operationList[0].text = languagePack.filterLabels.TextContains; // contains //
        TextFilter.operationList[1].text = languagePack.filterLabels.TextEquals; // equals //
        TextFilter.operationList[2].text = languagePack.filterLabels.TextStartsWith; // startsWith //
        TextFilter.operationList[3].text = languagePack.filterLabels.TextEndsWith; // endsWith //
        TextFilter.operationList[4].text = languagePack.filterLabels.TextEmpty; // empty //
        TextFilter.operationList[5].text = languagePack.filterLabels.TextNotEmpty; // notEmpty //
    }
    /**
     * @return {?}
     */
    get selectedIndex() {
        return this._selectedIndex;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectedIndex(value) {
        this._selectedIndex = value;
        // init filter parameters
        if (value === 0 || value === 1 || value === 2 || value === 3) { // contains equals startsWith endsWith
            this.parameters = [{ value: '', text: this.languagePack.filterLabels.Text }];
        }
        else { // empty notEmpty
            this.parameters = null;
        }
    }
    /**
     * @return {?}
     */
    get selectedValue() {
        if (this._selectedIndex !== null) {
            return TextFilter.operationList[this._selectedIndex];
        }
        else {
            return null;
        }
    }
    /**
     * @return {?}
     */
    getOperations() {
        return TextFilter.operationList;
    }
    /**
     * @param {?} dynamicVariable
     * @return {?}
     */
    toString(dynamicVariable) {
        /** @type {?} */
        const a = '_a$';
        /** @type {?} */
        const b = '_b$';
        /** @type {?} */
        const predicate = this.selectedValue.predicate.replace('a', a).replace('b', b);
        /** @type {?} */
        const statement = predicate.replace(a, `${a}['${dynamicVariable}']?.toString()?.toLowerCase()`);
        // one static parameters equals  notEquals greaterThan lessThan //
        if (this._selectedIndex === 0 ||
            this._selectedIndex === 1 ||
            this._selectedIndex === 2 ||
            this._selectedIndex === 3) {
            /** @type {?} */
            const value = '\'' + (this.parameters[0].value !== null ? this.parameters[0].value.toLowerCase() : ' null ') + '\'';
            return statement.replace('_b$', value);
        }
        else { // without static parameters
            return statement;
        }
    }
    /**
     * @return {?}
     */
    toPrint() {
        return TextFilter.operationList[this._selectedIndex].text + ' ' + this.parameters[0].value + ' ' + (this.type || '') + ' ';
    }
    /**
     * @return {?}
     */
    toSql() {
        return TextFilter.sql[this._selectedIndex].replace('[*]', (this.parameters[0].value || '')) + (this.type || '') + ' ';
    }
}
TextFilter.sql = ['LIKE "%[*]%"', '= "[*]"', 'LIKE "%[*]"', 'LIKE "[*]%"', 'IS NULL', 'IS NOT NULL'];
TextFilter.operationList = [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    TextFilter.sql;
    /**
     * @type {?}
     * @private
     */
    TextFilter.operationList;
    /**
     * @type {?}
     * @private
     */
    TextFilter.prototype._selectedIndex;
    /** @type {?} */
    TextFilter.prototype.languagePack;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/filter/compare/number-filter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const equals$1 = 'a === b';
/** @type {?} */
const notEquals = 'a !== b';
/** @type {?} */
const greaterThan = 'a > b';
/** @type {?} */
const lessThan = 'a < b';
/** @type {?} */
const empty$1 = '!a';
/** @type {?} */
const notEmpty$1 = '!!a';
/** @type {?} */
const operations$1 = [equals$1, notEquals, greaterThan, lessThan, empty$1, notEmpty$1];
class NumberFilter extends AbstractFilter {
    // private languageText: LanguagePack;
    /**
     * @param {?} languagePack
     */
    constructor(languagePack) {
        super();
        this.languagePack = languagePack;
        // tslint:disable-next-line:variable-name
        this._selectedIndex = null;
        if (NumberFilter.operationList.length === 0) {
            operations$1.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            fn => {
                NumberFilter.operationList.push({ predicate: fn, text: null });
            }));
        }
        NumberFilter.operationList[0].text = languagePack.filterLabels.NumberEquals; // equals //
        NumberFilter.operationList[1].text = languagePack.filterLabels.NumberNotEquals; // notEquals //
        NumberFilter.operationList[2].text = languagePack.filterLabels.NumberGreaterThan; // greaterThan //
        NumberFilter.operationList[3].text = languagePack.filterLabels.NumberLessThan; // lessThan //
        NumberFilter.operationList[4].text = languagePack.filterLabels.NumberEmpty; // empty //
        NumberFilter.operationList[5].text = languagePack.filterLabels.NumberNotEmpty; // notEmpty //
    }
    /**
     * @return {?}
     */
    get selectedIndex() {
        return this._selectedIndex;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectedIndex(value) {
        this._selectedIndex = value;
        // init filter parameters
        if (value === 0 || value === 1 || value === 2 || value === 3) { // equals notEquals greaterThan lessThan
            this.parameters = [{ value: null, text: this.languagePack.filterLabels.Number }];
        }
        else { // empty notEmpty
            this.parameters = null;
        }
    }
    /**
     * @return {?}
     */
    get selectedValue() {
        if (this._selectedIndex !== null) {
            return NumberFilter.operationList[this._selectedIndex];
        }
        else {
            return null;
        }
    }
    /**
     * @return {?}
     */
    getOperations() {
        return NumberFilter.operationList;
    }
    /**
     * @param {?} dynamicVariable
     * @return {?}
     */
    toString(dynamicVariable) {
        /** @type {?} */
        const a = '_a$';
        /** @type {?} */
        const b = '_b$';
        /** @type {?} */
        const predicate = this.selectedValue.predicate.replace('a', a).replace('b', b);
        /** @type {?} */
        const statement = predicate.replace(a, `${a}['${dynamicVariable}']`);
        // one static variable (equals, notEquals,greaterThan,lessThan)
        if (this._selectedIndex === 0 ||
            this._selectedIndex === 1 ||
            this._selectedIndex === 2 ||
            this._selectedIndex === 3) {
            /** @type {?} */
            const value = this.parameters[0].value ? this.parameters[0].value.toString() : ' null ';
            return statement.replace(b, value);
        }
        else { // none static variable (empty, notEmpty)
            return statement;
        }
    }
    /**
     * @return {?}
     */
    toPrint() {
        return NumberFilter.operationList[this._selectedIndex].text + ' ' + this.parameters[0].value + ' ' + (this.type || '') + ' ';
    }
    /**
     * @return {?}
     */
    toSql() {
        return NumberFilter.sql[this._selectedIndex] + ' ' + (this.parameters[0].value || '') + ' ' + (this.type || '') + ' ';
    }
}
NumberFilter.sql = ['=', '<>', '>', '<', 'IS NULL', 'IS NOT NULL'];
NumberFilter.operationList = [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NumberFilter.sql;
    /**
     * @type {?}
     * @private
     */
    NumberFilter.operationList;
    /**
     * @type {?}
     * @private
     */
    NumberFilter.prototype._selectedIndex;
    /** @type {?} */
    NumberFilter.prototype.languagePack;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/international/table-Intl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TableIntl {
    constructor() {
        this.menuLabels = {
            saveData: 'Save Data',
            fullScreen: 'Full Screen',
            columnSetting: 'Column Setting',
            saveTableSetting: 'Save Table Setting',
            clearFilter: 'Clear Filter',
            jsonFile: 'Json File',
            csvFile: 'CSV File',
            printTable: 'Print Table',
            filterMode: 'Filter Mode:',
            filterLocalMode: 'Local',
            filterServerMode: 'Server',
            sortMode: 'Sort Mode:',
            sortLocalMode: 'Local',
            sortServerMode: 'Server',
            printMode: 'Print Mode',
            printYesMode: 'Yes',
            printNoMode: 'No',
            pinMode: 'Pin Mode:',
            pinNoneMode: 'None',
            pinStartMode: 'Start',
            pinEndMode: 'End',
            thereIsNoColumn: 'There is no column.'
        };
        this.paginatorLabels = {
            changes: new Subject(),
            itemsPerPageLabel: 'Items per page:',
            nextPageLabel: 'Next Page:',
            previousPageLabel: 'Previous Page:',
            firstPageLabel: 'First Page:',
            lastPageLabel: 'Last Page:',
            getRangeLabel: (/**
             * @param {?} page
             * @param {?} pageSize
             * @param {?} length
             * @return {?}
             */
            (page, pageSize, length) => {
                if (length === 0 || pageSize === 0) {
                    return `0 of ${length}`;
                }
                length = Math.max(length, 0);
                /** @type {?} */
                const startIndex = page * pageSize;
                /** @type {?} */
                const endIndex = startIndex < length ?
                    Math.min(startIndex + pageSize, length) :
                    startIndex + pageSize;
                return `${startIndex + 1} - ${endIndex} of ${length}`;
            })
        };
        this.tableLabels = {
            NoData: 'No records found.'
        };
        this.filterLabels = {
            Clear: 'Clear',
            Search: 'Search',
            And: 'And',
            Or: 'Or',
            /* Text Compare */
            Text: 'Text',
            TextContains: 'Contains',
            TextEmpty: 'Empty',
            TextStartsWith: 'Starts With',
            TextEndsWith: 'Ends With',
            TextEquals: 'Equals',
            TextNotEmpty: 'Not Empty',
            /* Number Compare */
            Number: 'Number',
            NumberEquals: 'Equals',
            NumberNotEquals: 'Not Equals',
            NumberGreaterThan: 'Greater Than',
            NumberLessThan: 'Less Than',
            NumberEmpty: 'Empty',
            NumberNotEmpty: 'Not Empty',
            /* Category List Compare */
            CategoryContains: 'Contains',
            CategoryNotContains: 'Not Contains',
        };
    }
}
TableIntl.ɵfac = function TableIntl_Factory(t) { return new (t || TableIntl)(); };
/** @nocollapse */ TableIntl.ɵprov = ɵɵdefineInjectable({ factory: function TableIntl_Factory() { return new TableIntl(); }, token: TableIntl, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TableIntl, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    TableIntl.prototype.menuLabels;
    /** @type {?} */
    TableIntl.prototype.paginatorLabels;
    /** @type {?} */
    TableIntl.prototype.tableLabels;
    /** @type {?} */
    TableIntl.prototype.filterLabels;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/filter/header-filter.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const listAnimation = trigger('listAnimation', [
    transition('* <=> *', [
        query(':enter', [style({ opacity: 0 }), stagger('10ms', animate('400ms ease-out', style({ opacity: 1 })))], { optional: true }),
    ])
]);
class HeaderFilterComponent {
    /**
     * @param {?} languagePack
     * @param {?} service
     * @param {?} cdr
     */
    constructor(languagePack, service, cdr) {
        this.languagePack = languagePack;
        this.service = service;
        this.cdr = cdr;
        this.filterChanged = new EventEmitter();
        this.filterList = [];
    }
    /**
     * @return {?}
     */
    get filters() {
        if (isNullorUndefined(this.filterList) === true || this.filterList.length === 0) {
            this.filterList = [];
            this.addNewFilter(this.field.type || 'text');
        }
        return this.filterList;
    }
    /**
     * @param {?} values
     * @return {?}
     */
    set filters(values) {
        this.filterList = values;
    }
    /**
     * @return {?}
     */
    get hasValue() {
        return this.filters && this.filters.filter((/**
         * @param {?} f
         * @return {?}
         */
        f => f.hasValue() === true)).length > 0;
    }
    /**
     * @return {?}
     */
    get showTrigger() {
        if (this.menu === undefined) {
            return false;
        }
        else {
            return this.menu.menuOpen || this.hasValue;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.eventsSubscription) {
            this.eventsSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (isNullorUndefined(this.filters)) {
            this.filters = [];
            this.addNewFilter(this.field.type);
        }
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    addNewFilter(type = 'text') {
        switch (type || 'text') {
            case 'text': {
                this.filterList.push(new TextFilter(this.languagePack));
                break;
            }
            case 'number': {
                this.filterList.push(new NumberFilter(this.languagePack));
                break;
            }
            case 'date': {
                // this.compare = new DateCompare(service);
                break;
            }
            case 'boolean': {
                // this.compare = new BooleanCompare(service);
                break;
            }
            default: this.filterList.push(new TextFilter(this.languagePack));
        }
        this.filters[this.filters.length - 1].selectedIndex = 0;
        return this.filters[this.filters.length - 1];
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.menu) {
            this.eventsSubscription = this.menu.menuOpened.subscribe((/**
             * @return {?}
             */
            () => this.focusToLastInput()));
        }
    }
    /**
     * @return {?}
     */
    focusToLastInput() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.filterInputList.length > 0) {
                this.filterInputList.last.focus();
            }
        }));
    }
    /**
     * @param {?} index
     * @param {?} action
     * @return {?}
     */
    filterAction_OnClick(index, action) {
        if (action === 0 || action === 1) { // and or
            this.filters[index].type = action === 0 ? 'and' : 'or';
            if (this.filters.length === index + 1) {
                this.addNewFilter(this.field.type);
                this.focusToLastInput();
            }
        }
        else if (action === 2 && this.filters.length > 1) { // delete
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.filters.splice(index, 1);
                this.cdr.detectChanges();
                this.focusToLastInput();
            })); // bug for delete filter item(unwanted reaction close menu)
        }
    }
    /**
     * @return {?}
     */
    clearColumn_OnClick() {
        this.filterList = [];
        this.filterChanged.emit(this.filterList);
    }
    /**
     * @return {?}
     */
    applyFilter_OnClick() {
        this.filterChanged.emit(this.filterList);
    }
}
HeaderFilterComponent.ɵfac = function HeaderFilterComponent_Factory(t) { return new (t || HeaderFilterComponent)(ɵngcc0.ɵɵdirectiveInject(TableIntl), ɵngcc0.ɵɵdirectiveInject(TableService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
HeaderFilterComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: HeaderFilterComponent, selectors: [["header-filter"]], contentQueries: function HeaderFilterComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.filterInputList = _t);
    } }, viewQuery: function HeaderFilterComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(MatMenuTrigger, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.menu = _t.first);
    } }, hostVars: 4, hostBindings: function HeaderFilterComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("has-value", ctx.hasValue)("show-trigger", ctx.showTrigger);
    } }, inputs: { filters: "filters", field: "field" }, outputs: { filterChanged: "filterChanged" }, ngContentSelectors: _c1, decls: 5, vars: 1, consts: [["filter-event", "", 1, "menu"], ["filterMenu", "matMenu"], ["matMenuContent", ""], ["class", "trigger", 3, "matMenuTriggerFor", 4, "ngIf"], ["filter-event", "", 1, "menu-title"], ["filter-event", "", "class", "filter-panel", 4, "ngFor", "ngForOf"], ["filter-event", "", 1, "menu-action"], ["mat-raised-button", "", 3, "click"], ["mat-raised-button", "", "color", "primary", 3, "click"], ["filter-event", "", 1, "filter-panel"], ["placeholder", "Conditions", 3, "value", "panelClass", "selectionChange", "keyup.enter"], [3, "value", 4, "ngFor", "ngForOf"], [4, "ngFor", "ngForOf"], [1, "or-and"], ["class", "selected-filter-type", 4, "ngIf"], [1, "svg"], [3, "click"], [2, "transform", "rotate(90deg)", 3, "click"], [3, "value"], [1, "input-field"], ["matInput", "", "autocomplete", "off", 3, "ngModel", "placeholder", "ngModelChange", "keyup.enter"], ["filterInput", "matInput"], [1, "selected-filter-type"], [1, "trigger", 3, "matMenuTriggerFor"]], template: function HeaderFilterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵelementStart(1, "mat-menu", 0, 1);
        ɵngcc0.ɵɵtemplate(3, HeaderFilterComponent_ng_template_3_Template, 8, 4, "ng-template", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, HeaderFilterComponent_span_4_Template, 3, 1, "span", 3);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.field.filterable !== false);
    } }, directives: function () { return [ɵngcc1.MatMenu, FilterEventDirective, ɵngcc1.MatMenuContent, ɵngcc2.NgIf, ɵngcc2.NgForOf, ɵngcc3.MatButton, ɵngcc4.MatFormField, ɵngcc5.MatSelect, ɵngcc6.MatIcon, ɵngcc7.MatOption, ɵngcc4.MatLabel, ɵngcc8.MatInput, ɵngcc9.DefaultValueAccessor, ɵngcc9.NgControlStatus, ɵngcc9.NgModel, ɵngcc1.MatMenuTrigger]; }, styles: ["@media print{.printpreview[_ngcontent-%COMP%]{background-color:#fff;position:fixed;width:100%;height:auto;z-index:99999999;margin:0;padding:0;top:0;left:0;overflow:visible;display:block}}.disable-backdrop-click[_ngcontent-%COMP%]   .cdk-overlay-backdrop.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing[_ngcontent-%COMP%]{pointer-events:none}[_nghost-%COMP%]{display:flex;align-items:center;width:100%;align-self:stretch}.trigger[_ngcontent-%COMP%]{color:rgba(0,0,0,.3);display:flex;opacity:0;transform:translateY(-5px);cursor:pointer;transition-duration:.4s;transition-property:opacity,transform;position:sticky;right:0;z-index:1;padding-left:0 8px}.has-value[_nghost-%COMP%]   .trigger[_ngcontent-%COMP%]{color:rgba(0,0,0,.54)}.show-trigger[_nghost-%COMP%]   .trigger[_ngcontent-%COMP%], [_nghost-%COMP%]:hover   .trigger[_ngcontent-%COMP%]{opacity:1;transform:translateY(-1px)} .mat-menu-content:not(:empty){padding:0!important}.mat-menu-item-highlighted[_ngcontent-%COMP%]:not([disabled]), .mat-menu-item.cdk-keyboard-focused[_ngcontent-%COMP%]:not([disabled]), .mat-menu-item.cdk-program-focused[_ngcontent-%COMP%]:not([disabled]), .mat-menu-item[_ngcontent-%COMP%]:hover:not([disabled]){background-color:inherit}.input-field[_ngcontent-%COMP%]{margin-top:-15px}.menu-title[_ngcontent-%COMP%]{font-weight:bolder;top:-8px;position:sticky;background-color:#fff;z-index:1}.menu-action[_ngcontent-%COMP%]{position:sticky;bottom:-8px;padding-top:10px;padding-bottom:0;background-color:#fff}.menu-action[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{width:calc(50% - 10px);margin:5px;border-radius:10px}.filter-panel[_ngcontent-%COMP%]{border-radius:5px;background-color:#fdfbfb;border:1px solid #efefef;transition:.5s;padding:5px;overflow:hidden;font-size:14px;margin-top:10px;display:flex;flex-direction:column}.filter-panel[_ngcontent-%COMP%]:nth-child(2){margin-top:0!important}.filter-panel[_ngcontent-%COMP%]:hover{border:1px solid #d1d1d1}.filter-panel[_ngcontent-%COMP%]:hover   .svg[_ngcontent-%COMP%]{opacity:1;transform:translateY(-1px)}.or-and[_ngcontent-%COMP%]{display:inherit!important;text-align:right;margin:-12px 0;height:35px;cursor:inherit;font-size:12px}.svg[_ngcontent-%COMP%]{opacity:0;transform:translateY(-5px);transition-duration:.4s;transition-property:opacity,transform;margin-left:5px;padding:2px;border-radius:5px;color:#4c4c4c;cursor:pointer;display:inline-block!important;height:24px}.svg[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{margin:0;vertical-align:top;border-radius:5px}.svg[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]:hover{color:#fff;background-color:#89898a}.svg[_ngcontent-%COMP%]:hover{background-color:#f8f8f8}.selected-filter-type[_ngcontent-%COMP%]{float:left;color:#fff;background-color:#89898a;border-radius:5px;padding:0 4px;line-height:24px}  .menu{padding:8px;-webkit-user-select:none;-moz-user-select:none;user-select:none}"], data: { animation: [listAnimation] }, changeDetection: 0 });
/** @nocollapse */
HeaderFilterComponent.ctorParameters = () => [
    { type: TableIntl },
    { type: TableService },
    { type: ChangeDetectorRef }
];
HeaderFilterComponent.propDecorators = {
    field: [{ type: Input }],
    filterChanged: [{ type: Output }],
    filterInputList: [{ type: ContentChildren, args: ['filterInput',] }],
    menu: [{ type: ViewChild, args: [MatMenuTrigger, { static: true },] }],
    filters: [{ type: Input }],
    hasValue: [{ type: HostBinding, args: ['class.has-value',] }],
    showTrigger: [{ type: HostBinding, args: ['class.show-trigger',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderFilterComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:component-selector
                selector: 'header-filter',
                template: "<ng-content></ng-content>\r\n\r\n<mat-menu filter-event #filterMenu=\"matMenu\" class=\"menu\" >\r\n  <ng-template matMenuContent>\r\n\r\n  <div filter-event class=\"menu-title\">\r\n    {{field?.header}}\r\n  </div>\r\n  <div [@listAnimation]=\"filters.length\" filter-event *ngFor=\"let filter of filters; let index = index\" class=\"filter-panel\">\r\n\r\n    <mat-form-field>\r\n      <mat-select [value]=\"filter.selectedIndex\" [panelClass]=\"'mat-elevation-z10'\" (selectionChange)=\"filter.selectedIndex = $event.value;\" placeholder='Conditions' (keyup.enter)=\"applyFilter_OnClick()\">\r\n        <mat-option *ngFor=\"let op of filter.getOperations(); let selectedIndex=index\" [value]=\"selectedIndex\">\r\n          {{ op.text }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <div *ngFor=\"let ctrl of filter?.parameters\">\r\n      <mat-form-field class=\"input-field\">\r\n        <mat-label>{{ctrl.text}}</mat-label>\r\n        <input matInput #filterInput=\"matInput\" [(ngModel)]=\"ctrl.value\" [placeholder]=\"\" (keyup.enter)=\"applyFilter_OnClick()\" autocomplete=\"off\"/>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div class=\"or-and\">\r\n      <span *ngIf=\"filters?.length !== index+1\" class=\"selected-filter-type\">{{ filter?.type === 'and' ? languagePack.filterLabels.And : languagePack.filterLabels.Or}}</span>\r\n      <span class=\"svg\">\r\n        <mat-icon (click)=\"filterAction_OnClick(index,0)\">add</mat-icon>\r\n      </span>\r\n      <span class=\"svg\">\r\n        <mat-icon (click)=\"filterAction_OnClick(index,1)\" style=\"transform: rotate(90deg);\">drag_handle</mat-icon>\r\n      </span>\r\n      <span class=\"svg\">\r\n        <mat-icon (click)=\"filterAction_OnClick(index,2)\">clear</mat-icon>\r\n      </span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div filter-event class=\"menu-action\">\r\n    <button mat-raised-button (click)=\"clearColumn_OnClick()\">{{ languagePack.filterLabels.Clear }}</button>\r\n    <button mat-raised-button color=\"primary\" (click)=\"applyFilter_OnClick()\">{{ languagePack.filterLabels.Search}}</button>\r\n  </div>\r\n</ng-template>\r\n</mat-menu>\r\n\r\n<span class=\"trigger\" [matMenuTriggerFor]=\"filterMenu\" *ngIf=\"field.filterable !== false\">\r\n  <mat-icon>filter_list</mat-icon>\r\n</span>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [listAnimation],
                styles: ["@media print{.printpreview{background-color:#fff;position:fixed;width:100%;height:auto;z-index:99999999;margin:0;padding:0;top:0;left:0;overflow:visible;display:block}}.disable-backdrop-click .cdk-overlay-backdrop.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing{pointer-events:none}:host{display:flex;align-items:center;width:100%;align-self:stretch}.trigger{color:rgba(0,0,0,.3);display:flex;opacity:0;transform:translateY(-5px);cursor:pointer;transition-duration:.4s;transition-property:opacity,transform;position:sticky;right:0;z-index:1;padding-left:0 8px}:host.has-value .trigger{color:rgba(0,0,0,.54)}:host.show-trigger .trigger,:host:hover .trigger{opacity:1;transform:translateY(-1px)}::ng-deep.mat-menu-content:not(:empty){padding:0!important}.mat-menu-item-highlighted:not([disabled]),.mat-menu-item.cdk-keyboard-focused:not([disabled]),.mat-menu-item.cdk-program-focused:not([disabled]),.mat-menu-item:hover:not([disabled]){background-color:inherit}.input-field{margin-top:-15px}.menu-title{font-weight:bolder;top:-8px;position:sticky;background-color:#fff;z-index:1}.menu-action{position:sticky;bottom:-8px;padding-top:10px;padding-bottom:0;background-color:#fff}.menu-action button{width:calc(50% - 10px);margin:5px;border-radius:10px}.filter-panel{border-radius:5px;background-color:#fdfbfb;border:1px solid #efefef;transition:.5s;padding:5px;overflow:hidden;font-size:14px;margin-top:10px;display:flex;flex-direction:column}.filter-panel:nth-child(2){margin-top:0!important}.filter-panel:hover{border:1px solid #d1d1d1}.filter-panel:hover .svg{opacity:1;transform:translateY(-1px)}.or-and{display:inherit!important;text-align:right;margin:-12px 0;height:35px;cursor:inherit;font-size:12px}.svg{opacity:0;transform:translateY(-5px);transition-duration:.4s;transition-property:opacity,transform;margin-left:5px;padding:2px;border-radius:5px;color:#4c4c4c;cursor:pointer;display:inline-block!important;height:24px}.svg mat-icon{margin:0;vertical-align:top;border-radius:5px}.svg mat-icon:hover{color:#fff;background-color:#89898a}.svg:hover{background-color:#f8f8f8}.selected-filter-type{float:left;color:#fff;background-color:#89898a;border-radius:5px;padding:0 4px;line-height:24px}::ng-deep .menu{padding:8px;-webkit-user-select:none;-moz-user-select:none;user-select:none}"]
            }]
    }], function () { return [{ type: TableIntl }, { type: TableService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { filterChanged: [{
            type: Output
        }], filters: [{
            type: Input
        }], hasValue: [{
            type: HostBinding,
            args: ['class.has-value']
        }], showTrigger: [{
            type: HostBinding,
            args: ['class.show-trigger']
        }], field: [{
            type: Input
        }], filterInputList: [{
            type: ContentChildren,
            args: ['filterInput']
        }], menu: [{
            type: ViewChild,
            args: [MatMenuTrigger, { static: true }]
        }] }); })();
if (false) {
    /** @type {?} */
    HeaderFilterComponent.prototype.field;
    /** @type {?} */
    HeaderFilterComponent.prototype.filterChanged;
    /** @type {?} */
    HeaderFilterComponent.prototype.filterInputList;
    /** @type {?} */
    HeaderFilterComponent.prototype.menu;
    /**
     * @type {?}
     * @private
     */
    HeaderFilterComponent.prototype.filterList;
    /**
     * @type {?}
     * @private
     */
    HeaderFilterComponent.prototype.eventsSubscription;
    /** @type {?} */
    HeaderFilterComponent.prototype.languagePack;
    /** @type {?} */
    HeaderFilterComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    HeaderFilterComponent.prototype.cdr;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/print-dialog/print-dialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line:max-line-length
/** @type {?} */
const styles = 'body{margin:15px;}table{width:100%;border-collapse:collapse;}h2{text-align:center;}th.mat-header-cell{text-align:center;}div{text-align:center;margin:30px }tr{border-bottom:1px solid }td,th{padding:10px; text-align: center }.param-list{text-align: left;border:solid gray;border-width: 0px 0px 2px 0;margin-bottom: 10px;padding-bottom: 10px;}.param {display: inline-block;margin: 10px;}';
class PrintTableDialogComponent {
    /**
     * @param {?} dialogRef
     * @param {?} printTable
     */
    constructor(dialogRef, printTable) {
        this.dialogRef = dialogRef;
        this.printTable = printTable;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    print() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const dialogConfig = 'width=600,height=700,scrollbars=no,menubar=no,toolbar=no,location=no,status=no,titlebar=no';
            /** @type {?} */
            const printDoc = `
    <html>
      <head>
        <style> ${styles} </style>
      </head>
      <body onload="window.print();" onafterprint="window.close()">
        ${this.printContentRef.nativeElement.innerHTML}
      </body>
    </html>
    `;
            /** @type {?} */
            const popupWinindow = window.open('', '_blank', dialogConfig);
            popupWinindow.document.write(printDoc);
            popupWinindow.document.close();
        }));
    }
}
PrintTableDialogComponent.ɵfac = function PrintTableDialogComponent_Factory(t) { return new (t || PrintTableDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc10.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA)); };
PrintTableDialogComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PrintTableDialogComponent, selectors: [["print-dialog"]], viewQuery: function PrintTableDialogComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c2, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.printContentRef = _t.first);
    } }, decls: 17, vars: 9, consts: [[3, "dir"], ["printContentRef", ""], [1, "param-list"], ["class", "param", 4, "ngFor", "ngForOf"], ["mat-table", "", 1, "print-table", 3, "dataSource"], [3, "matColumnDef", 4, "ngFor", "ngForOf"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["align", "end"], ["mat-button", "", "mat-dialog-close", ""], ["mat-button", "", "cdkFocusInitial", "", 3, "mat-dialog-close", "click"], [1, "param"], [3, "matColumnDef"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["mat-header-cell", ""], ["mat-cell", ""], ["mat-header-row", ""], ["mat-row", ""]], template: function PrintTableDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-dialog-content");
        ɵngcc0.ɵɵelementStart(1, "div", 0, 1);
        ɵngcc0.ɵɵelementStart(3, "h2");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 2);
        ɵngcc0.ɵɵtemplate(6, PrintTableDialogComponent_div_6_Template, 4, 2, "div", 3);
        ɵngcc0.ɵɵtemplate(7, PrintTableDialogComponent_div_7_Template, 4, 2, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "table", 4);
        ɵngcc0.ɵɵtemplate(9, PrintTableDialogComponent_ng_container_9_Template, 3, 1, "ng-container", 5);
        ɵngcc0.ɵɵtemplate(10, PrintTableDialogComponent_tr_10_Template, 1, 0, "tr", 6);
        ɵngcc0.ɵɵtemplate(11, PrintTableDialogComponent_tr_11_Template, 1, 0, "tr", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "mat-dialog-actions", 8);
        ɵngcc0.ɵɵelementStart(13, "button", 9);
        ɵngcc0.ɵɵtext(14, "Cancel");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "button", 10);
        ɵngcc0.ɵɵlistener("click", function PrintTableDialogComponent_Template_button_click_15_listener() { return ctx.print(); });
        ɵngcc0.ɵɵtext(16, "Print");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("dir", ctx.printTable.direction);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.printTable == null ? null : ctx.printTable.title, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.printTable == null ? null : ctx.printTable.userPrintParameters);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.printTable == null ? null : ctx.printTable.tablePrintParameters);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("dataSource", ctx.printTable.data);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.printTable.columns);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("matHeaderRowDef", ctx.printTable.displayedFields);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("matRowDefColumns", ctx.printTable.displayedFields);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("mat-dialog-close", true);
    } }, directives: [ɵngcc10.MatDialogContent, ɵngcc11.Dir, ɵngcc2.NgForOf, ɵngcc12.MatTable, ɵngcc12.MatHeaderRowDef, ɵngcc12.MatRowDef, ɵngcc10.MatDialogActions, ɵngcc3.MatButton, ɵngcc10.MatDialogClose, ɵngcc12.MatColumnDef, ɵngcc12.MatHeaderCellDef, ɵngcc12.MatCellDef, ɵngcc12.MatHeaderCell, ɵngcc12.MatCell, ɵngcc12.MatHeaderRow, ɵngcc12.MatRow], styles: ["#print-section[_ngcontent-%COMP%]{text-align:center;margin:30px}h2[_ngcontent-%COMP%]{text-align:center}.param-list[_ngcontent-%COMP%]{width:100%;display:inline-block;border:solid gray;border-width:0 0 2px;margin-bottom:10px;padding-bottom:10px}.param[_ngcontent-%COMP%]{display:inline-block;margin:10px}.print-table[_ngcontent-%COMP%]{width:100%}.print-table[_ngcontent-%COMP%]   th.mat-header-cell[_ngcontent-%COMP%]{font-size:initial}"] });
/** @nocollapse */
PrintTableDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
PrintTableDialogComponent.propDecorators = {
    printContentRef: [{ type: ViewChild, args: ['printContentRef', { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PrintTableDialogComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line: component-selector
                selector: 'print-dialog',
                template: "<mat-dialog-content>\r\n<div dir='{{ printTable.direction }}' #printContentRef>\r\n  <h2>\r\n      {{ printTable?.title }}\r\n  </h2>\r\n  <div class=\"param-list\">\r\n      <div class=\"param\" *ngFor='let param of printTable?.userPrintParameters'>\r\n         <b>{{ param.key }} </b> : {{ param.value }}\r\n      </div>\r\n      <div class=\"param\" *ngFor='let param of printTable?.tablePrintParameters'>\r\n        <b>{{ param.key }} </b> : {{ param.value }}\r\n     </div>\r\n  </div>\r\n  <table class=\"print-table\" mat-table [dataSource]=\"printTable.data\">\r\n      <ng-container *ngFor=\"let column of printTable.columns\" matColumnDef=\"{{ column.name }}\">\r\n        <th mat-header-cell *matHeaderCellDef> {{ column.header }} </th>\r\n        <td mat-cell *matCellDef=\"let row\"> {{ row[column.name] }} </td>\r\n      </ng-container>\r\n      <tr mat-header-row *matHeaderRowDef=\"printTable.displayedFields\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: printTable.displayedFields;\"></tr>\r\n  </table>\r\n</div>\r\n\r\n</mat-dialog-content>\r\n\r\n<mat-dialog-actions align=\"end\">\r\n  <button mat-button mat-dialog-close>Cancel</button>\r\n  <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial (click)=\"print()\">Print</button>\r\n</mat-dialog-actions>\r\n\r\n",
                styles: ["#print-section{text-align:center;margin:30px}h2{text-align:center}.param-list{width:100%;display:inline-block;border:solid gray;border-width:0 0 2px;margin-bottom:10px;padding-bottom:10px}.param{display:inline-block;margin:10px}.print-table{width:100%}.print-table th.mat-header-cell{font-size:initial}"]
            }]
    }], function () { return [{ type: ɵngcc10.MatDialogRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }]; }, { printContentRef: [{
            type: ViewChild,
            args: ['printContentRef', { static: true }]
        }] }); })();
if (false) {
    /** @type {?} */
    PrintTableDialogComponent.prototype.printContentRef;
    /** @type {?} */
    PrintTableDialogComponent.prototype.dialogRef;
    /** @type {?} */
    PrintTableDialogComponent.prototype.printTable;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/resize-column.mode.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ResizeColumn {
    constructor() {
        this.resizeHandler = null;
        this.widthUpdate = new Subject();
    }
}
if (false) {
    /** @type {?} */
    ResizeColumn.prototype.startX;
    /** @type {?} */
    ResizeColumn.prototype.startWidth;
    /** @type {?} */
    ResizeColumn.prototype.isResizingRight;
    /** @type {?} */
    ResizeColumn.prototype.currentResizeIndex;
    /** @type {?} */
    ResizeColumn.prototype.resizeHandler;
    /** @type {?} */
    ResizeColumn.prototype.widthUpdate;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utilies/html.helper.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} element
 * @return {?}
 */
function requestFullscreen(element) {
    if (element.nativeElement.requestFullscreen) {
        element.nativeElement.requestFullscreen();
    }
    else if (element.nativeElement.webkitRequestFullscreen) { /* Safari */
        element.nativeElement.webkitRequestFullscreen();
    }
    else if (element.nativeElement.msRequestFullscreen) { /* IE11 */
        element.nativeElement.msRequestFullscreen();
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/dynamic-mat-table.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const tableAnimation = trigger('tableAnimation', [
    transition('void => *', [
        query(':enter', style({ transform: 'translateX(-50%)', opacity: 0 }), {
            //limit: 5,
            optional: true,
        }),
        query(':enter', stagger('0.01s', [
            animate('0.5s ease', style({ transform: 'translateX(0%)', opacity: 1 })),
        ]), {
            //limit: 5, 
            optional: true
        }),
    ]),
]);
/** @type {?} */
const expandAnimation = trigger('detailExpand', [
    state('collapsed', style({ height: '0px', minHeight: '0' })),
    state('expanded', style({ height: '*' })),
    transition('expanded <=> collapsed', animate('100ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
]);
/** @type {?} */
const cellTooltipDefaults = {
    showDelay: 500,
    hideDelay: 400,
    touchendHideDelay: 1000,
    position: 'above',
};
/**
 * @template T
 */
class DynamicMatTableComponent extends TableCoreDirective {
    /**
     * @param {?} dialog
     * @param {?} renderer
     * @param {?} languagePack
     * @param {?} tableService
     * @param {?} cdr
     * @param {?} overlayContainer
     */
    constructor(dialog, renderer, languagePack, tableService, cdr, overlayContainer) {
        super(tableService, cdr);
        this.dialog = dialog;
        this.renderer = renderer;
        this.languagePack = languagePack;
        this.tableService = tableService;
        this.cdr = cdr;
        this.overlayContainer = overlayContainer;
        this.contextMenuPosition = { x: '0px', y: '0px' };
        this.dragDropData = { dragColumnIndex: -1, dropColumnIndex: -1 };
        this.printing = true;
        this.printTemplate = null;
        this.resizeColumn = new ResizeColumn();
        this.indexTrackFn = (/**
         * @param {?} index
         * @return {?}
         */
        (index) => {
            return index;
        });
        this.currentContextMenuSender = {};
        this.overlayContainer.getContainerElement().addEventListener('contextmenu', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.preventDefault();
            return false;
        }));
        this.eventsSubscription = this.resizeColumn.widthUpdate.pipe(delay(100)).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.columns[data.i].width = data.w;
            if (this.tableSetting.columnSetting[data.i]) {
                this.tableSetting.columnSetting[data.i].width = data.w;
            }
            this.refreshGrid();
        }));
    }
    /**
     * @return {?}
     */
    get setting() {
        return this.tableSetting;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setting(value) {
        if (!isNullorUndefined(value)) {
            value.columnSetting = value.columnSetting || this.tableSetting.columnSetting;
            value.alternativeRowStyle = value.alternativeRowStyle || this.tableSetting.alternativeRowStyle;
            value.columnSetting = value.columnSetting || this.tableSetting.columnSetting;
            value.direction = value.direction || this.tableSetting.direction;
            value.normalRowStyle = value.normalRowStyle || this.tableSetting.normalRowStyle;
            value.visibaleActionMenu = value.visibaleActionMenu || this.tableSetting.visibaleActionMenu;
            value.visibleTableMenu = value.visibleTableMenu || this.tableSetting.visibleTableMenu;
            this.tableSetting = value;
            this.setDisplayedColumns();
        }
    }
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    trackColumn(index, item) {
        return `${item.index}`;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.eventsSubscription) {
            this.eventsSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    refreshUI() {
        var _a, _b;
        /** @type {?} */
        const scrollStrategy = this.viewport['_scrollStrategy'];
        (_a = scrollStrategy === null || scrollStrategy === void 0 ? void 0 : scrollStrategy.viewport) === null || _a === void 0 ? void 0 : _a.checkViewportSize();
        (_b = scrollStrategy === null || scrollStrategy === void 0 ? void 0 : scrollStrategy.viewport) === null || _b === void 0 ? void 0 : _b.scrollToOffset(0);
        this.cdr.detectChanges();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const scrollStrategy = this.viewport['_scrollStrategy'];
        scrollStrategy.offsetChange.subscribe((/**
         * @param {?} offset
         * @return {?}
         */
        offset => {
            // console.log(offset);
        }));
        this.viewport.renderedRangeStream.subscribe((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            // in expanding row scrolling make not good apperance therefor close it.
            if (this.expandedElement && this.expandedElement.option && this.expandedElement.option.expand) {
                // console.log('clear', t); 
                // this.expandedElement.option.expand = false;
                // this.expandedElement = null;
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.tvsDataSource.paginator = this.paginator;
        this.tvsDataSource.sort = this.sort;
        this.dataSource.subscribe((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            //console.log(x);      
            this.initSystemField(x);
            this.tvsDataSource.data = x;
            // this.cdr.detectChanges();
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.refreshUI();
            }), 0);
        }));
        this.tvsDataSource.sort.sortChange.subscribe((/**
         * @param {?} sort
         * @return {?}
         */
        sort => {
            this.pagination.pageIndex = 0;
            this.onTableEvent.emit({ event: 'SortChanged', sender: sort });
        }));
        // this.dataSource.dataOfRange$.subscribe((data) => {
        //   // console.log('dataOfRange');
        // });
    }
    /**
     * @return {?}
     */
    get inverseOfTranslation() {
        if (!this.viewport || !this.viewport["_renderedContentOffset"]) {
            return -0;
        }
        /** @type {?} */
        let offset = this.viewport["_renderedContentOffset"];
        return -offset;
    }
    // TO DO
    /**
     * @param {?} cellRef
     * @return {?}
     */
    ellipsis(cellRef) {
        // console.log(cellRef.clientHeight);
        // console.log(cellRef.scrollHeight);
        if (cellRef.clientHeight > this.rowHeight) {
            cellRef.style.maxHeight = '48px';
        }
    }
    /**
     * @param {?} row
     * @return {?}
     */
    rowStyle(row) {
        var _a;
        /** @type {?} */
        let style = ((_a = row === null || row === void 0 ? void 0 : row.option) === null || _a === void 0 ? void 0 : _a.style) || {};
        if (this.setting.alternativeRowStyle && row.id % 2 === 0) {
            // style is high priority
            style = Object.assign(Object.assign({}, this.setting.alternativeRowStyle), style);
        }
        if (this.setting.rowStyle) {
            style = Object.assign(Object.assign({}, this.setting.rowStyle), style);
        }
        return style;
    }
    /**
     * @param {?} option
     * @param {?} column
     * @return {?}
     */
    cellClass(option, column) {
        /** @type {?} */
        let clas = null;
        if (option && column.name) {
            clas = option[column.name] ? option[column.name].style : null;
        }
        if (clas === null) {
            return column.cellClass;
        }
        else {
            return Object.assign(Object.assign({}, clas), column.cellClass);
        }
    }
    /**
     * @param {?} option
     * @param {?} column
     * @return {?}
     */
    cellStyle(option, column) {
        /** @type {?} */
        let style = null;
        if (option && column.name) {
            style = option[column.name] ? option[column.name].style : null;
        }
        if (style === null) {
            return column.cellStyle;
        }
        else {
            return Object.assign(Object.assign({}, style), column.cellStyle);
        }
    }
    /**
     * @param {?} option
     * @param {?} cellName
     * @return {?}
     */
    cellIcon(option, cellName) {
        if (option && cellName) {
            return option[cellName] ? option[cellName].icon : null;
        }
        else {
            return null;
        }
    }
    /**
     * @param {?} column
     * @param {?} filter
     * @return {?}
     */
    filter_onChanged(column, filter) {
        this.pending = true;
        this.tvsDataSource.setFilter(column.name, filter).subscribe((/**
         * @return {?}
         */
        () => {
            this.pending = false;
        }));
    }
    /**
     * @param {?} event
     * @param {?} column
     * @param {?} row
     * @return {?}
     */
    onContextMenu(event, column, row) {
        var _a, _b;
        if (((_a = this.currentContextMenuSender) === null || _a === void 0 ? void 0 : _a.time) && (new Date().getTime() - this.currentContextMenuSender.time) < 500) {
            return;
        }
        this.contextMenu.closeMenu();
        if (((_b = this.contextMenuItems) === null || _b === void 0 ? void 0 : _b.length) === 0) {
            return;
        }
        event.preventDefault();
        this.contextMenuPosition.x = event.clientX + 'px';
        this.contextMenuPosition.y = event.clientY + 'px';
        this.currentContextMenuSender = { column: column, row: row, time: new Date().getTime() };
        this.contextMenu.menuData = this.currentContextMenuSender;
        this.contextMenu.menu.focusFirstItem('mouse');
        this.onRowEvent.emit({ event: 'BeforContextMenuOpen', sender: { row: row, column: column, contextMenu: this.contextMenuItems } });
        this.contextMenu.openMenu();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onContextMenuItemClick(data) {
        this.contextMenu.menuData.item = data;
        this.onRowEvent.emit({ event: 'ContextMenuClick', sender: this.contextMenu.menuData });
    }
    /**
     * @param {?} e
     * @return {?}
     */
    tableMenuActionChange(e) {
        if (e.type === 'TableSetting') {
            this.saveSetting(e.data, false);
        }
        else if (e.type === 'FullScreenMode') {
            requestFullscreen(this.tbl.elementRef);
        }
        else if (e.type === 'Download') {
            if (e.data === 'CSV') {
                this.tableService.exportToCsv(this.columns, this.tvsDataSource.filteredData, this.rowSelectionModel);
            }
            else if (e.data === 'JSON') {
                this.tableService.exportToJson(this.tvsDataSource.filteredData);
            }
        }
        else if (e.type === 'FilterClear') {
            this.tvsDataSource.clearFilter();
            this.headerFilterList.forEach((/**
             * @param {?} hf
             * @return {?}
             */
            (hf) => hf.clearColumn_OnClick()));
        }
        else if (e.type === 'Print') {
            this.printConfig.displayedFields = this.columns
                .filter((/**
             * @param {?} c
             * @return {?}
             */
            (c) => isNullorUndefined(c.printable) || c.printable === true))
                .map((/**
             * @param {?} o
             * @return {?}
             */
            (o) => o.name));
            this.printConfig.title = this.printConfig.title || this.tableName;
            this.printConfig.direction = this.tableSetting.direction || 'ltr';
            this.printConfig.columns = this.tableColumns;
            this.printConfig.data = this.tvsDataSource.filteredData;
            /** @type {?} */
            const params = this.tvsDataSource.toTranslate();
            this.printConfig.tablePrintParameters = [];
            params.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                this.printConfig.tablePrintParameters.push(item);
            }));
            this.dialog.open(PrintTableDialogComponent, {
                width: '90vw',
                data: this.printConfig,
            });
        }
        else if (e.type === 'SaveSetting') {
            this.saveSetting(null, true);
        }
    }
    /**
     * @param {?} contextMenuItem
     * @param {?} row
     * @return {?}
     */
    rowMenuActionChange(contextMenuItem, row) {
        console.log('contextMenuItem');
        this.onRowEvent.emit({ event: 'RowActionMenu', sender: { row: row, action: contextMenuItem } });
        // this.rowActionMenuChange.emit({actionItem: contextMenuItem, rowItem: row });
    }
    /**
     * @param {?} e
     * @return {?}
     */
    doRendering(e) {
        this.pending = false;
        if (this.viewport.getViewportSize() === 0) {
            // console.log('zero');
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    pagination_onChange(e) {
        // console.log(e);
        this.pending = true;
        this.tvsDataSource.refreshFilterPredicate(); // pagination Bugfixed
        this.paginationChange.emit(e);
    }
    /**
     * @return {?}
     */
    reload_onClick() {
        this.onTableEvent.emit({ sender: null, event: 'ReloadData' });
    }
    /////////////////////////////////////////////////////////////////
    /**
     * @param {?} event
     * @param {?} index
     * @param {?} type
     * @return {?}
     */
    onResizeColumn(event, index, type) {
        // console.log(index,type);    
        this.resizeColumn.resizeHandler = type;
        this.resizeColumn.startX = event.pageX;
        // console.log(this.resizeColumn.resizeHandler, this.resizeColumn.startX);
        if (this.resizeColumn.resizeHandler === 'right') {
            this.resizeColumn.startWidth = event.target.parentElement.clientWidth;
            this.resizeColumn.currentResizeIndex = index;
        }
        else {
            if (event.target.parentElement.previousElementSibling === null) {
                // for first column not resize
                return;
            }
            else {
                this.resizeColumn.startWidth =
                    event.target.parentElement.previousElementSibling.clientWidth;
                this.resizeColumn.currentResizeIndex = index;
            }
        }
        event.preventDefault();
        this.mouseMove(index);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    mouseMove(index) {
        this.resizableMousemove = this.renderer.listen('document', 'mousemove', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (this.resizeColumn.resizeHandler !== null && event.buttons) {
                /** @type {?} */
                const rtl = this.direction === 'rtl' ? -1 : 1;
                /** @type {?} */
                let width = 0;
                if (this.resizeColumn.resizeHandler === 'right') {
                    /** @type {?} */
                    const dx = event.pageX - this.resizeColumn.startX;
                    width = this.resizeColumn.startWidth + rtl * dx;
                }
                else {
                    /** @type {?} */
                    const dx = this.resizeColumn.startX - event.pageX;
                    width = this.resizeColumn.startWidth - rtl * dx;
                }
                if (this.resizeColumn.currentResizeIndex === index && width > this.minWidth) {
                    this.resizeColumn.widthUpdate.next({
                        i: index - (this.resizeColumn.resizeHandler === 'left' ? 1 : 0),
                        w: width,
                    });
                }
            }
        }));
        this.resizableMouseup = this.renderer.listen('document', 'mouseup', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (this.resizeColumn.resizeHandler !== null) {
                this.resizeColumn.resizeHandler = null;
                this.resizeColumn.currentResizeIndex = -1;
            }
        }));
    }
    /**
     * @param {?} rowIndex
     * @param {?=} mode
     * @return {?}
     */
    expandRow(rowIndex, mode = true) {
        if (rowIndex === null || rowIndex === undefined) {
            throw 'Row index is not defined.';
        }
        if (this.expandedElement === this.tvsDataSource.allData[rowIndex]) {
            this.expandedElement.option.expand = mode;
            this.expandedElement = this.expandedElement === this.tvsDataSource.allData[rowIndex] ? null : this.tvsDataSource.allData[rowIndex];
        }
        else {
            if (this.expandedElement && this.expandedElement !== this.tvsDataSource.allData[rowIndex]) {
                this.expandedElement.option.expand = false;
            }
            this.expandedElement = null;
            if (mode === true) {
                // this.viewport.scrollToIndex(rowIndex, 'smooth');      
                // setTimeout( () => {
                //   this.expandedElement = this.expandedElement === this.dataSource.allData[rowIndex] ? null : this.dataSource.allData[rowIndex];    
                //   if (this.expandedElement.option === undefined || this.expandedElement.option === null) {
                //     this.expandedElement.option = { expand: false};
                //   }
                //   this.expandedElement.option.expand = true;
                //   this.refreshGrid();
                // }, 300);
                this.expandedElement = this.expandedElement === this.tvsDataSource.allData[rowIndex] ? null : this.tvsDataSource.allData[rowIndex];
                if (this.expandedElement.option === undefined || this.expandedElement.option === null) {
                    this.expandedElement.option = { expand: false };
                }
                this.expandedElement.option.expand = true;
            }
        }
    }
    /**
     * @param {?} e
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    onRowSelection(e, row, column) {
        if (this.rowSelectionMode && this.rowSelectionMode !== 'none' && column.rowSelectionable !== false) {
            this.onRowSelectionChange(e, row);
        }
    }
    /**
     * @param {?} e
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    onCellClick(e, row, column) {
        this.onRowSelection(e, row, column);
        if (column.clickable !== false) {
            this.onRowEvent.emit({ event: 'CellClick', sender: { row: row, column: column } });
        }
    }
    /**
     * @param {?} e
     * @param {?} row
     * @return {?}
     */
    onRowDblClick(e, row) {
        this.onRowEvent.emit({ event: e, sender: { row: row } });
    }
    /**
     * @param {?} e
     * @param {?} row
     * @return {?}
     */
    onRowClick(e, row) {
        this.onRowEvent.emit({ event: 'RowClick', sender: { row: row } });
    }
    /**
     * ********************************* Drag & Drop Column ******************************************
     * @param {?} event
     * @return {?}
     */
    dragStarted(event) {
        // console.log(event);    
        // debugger  
        // this.dragDropData.dragColumnIndex = event.source.;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dropListDropped(event) {
        if (event) {
            this.dragDropData.dropColumnIndex = event.currentIndex;
            this.moveColumn(event.previousIndex, event.currentIndex);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    drop(event) {
        moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);
        // updates moved data and table, but not dynamic if more dropzones
        // this.dataSource.data = clonedeep(this.dataSource.data);
    }
    /**
     * *********************************  ******************************************
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    copyProperty(from, to) {
        /** @type {?} */
        const keys = Object.keys(from);
        keys.forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            if (from[key] !== undefined && from[key] === null) {
                to[key] = Array.isArray(from[key]) ? Object.assign([], from[key]) : Object.assign({}, from[key]);
            }
        }));
    }
}
DynamicMatTableComponent.ɵfac = function DynamicMatTableComponent_Factory(t) { return new (t || DynamicMatTableComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc10.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(TableIntl), ɵngcc0.ɵɵdirectiveInject(TableService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc13.OverlayContainer)); };
DynamicMatTableComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DynamicMatTableComponent, selectors: [["dynamic-mat-table"]], contentQueries: function DynamicMatTableComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, HeaderFilterComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerFilterList = _t);
    } }, viewQuery: function DynamicMatTableComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c3, 7);
        ɵngcc0.ɵɵviewQuery(MatMenuTrigger, 5);
        ɵngcc0.ɵɵviewQuery(_c4, 7);
        ɵngcc0.ɵɵviewQuery(_c2, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tbl = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contextMenu = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.printRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.printContentRef = _t.first);
    } }, inputs: { setting: "setting" }, features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: MAT_TOOLTIP_DEFAULT_OPTIONS, useValue: cellTooltipDefaults }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 23, vars: 31, consts: [[3, "ngClass", "tvsItemSize", "headerHeight", "footerHeight", "headerEnabled", "footerEnabled", "ngStyle", "requestRendering"], ["tbl", ""], ["matSort", "", "multiTemplateDataRows", "", "cdkDropList", "", "cdkDropListOrientation", "horizontal", 1, "table", 3, "cdkDropListDisabled", "trackBy", "dataSource", "cdkDragStarted", "cdkDropListDropped"], ["matColumnDef", "row-checkbox"], ["class", "row-checkbox", "style", "z-index: 2;", 4, "matHeaderCellDef"], ["class", "row-checkbox", 4, "matCellDef"], [3, "matColumnDef", "sticky", "stickyEnd", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["matColumnDef", "progress"], [4, "matHeaderCellDef"], ["matColumnDef", "expandedDetail", 4, "ngIf"], ["matColumnDef", "table-menu", 3, "stickyEnd", 4, "ngIf"], ["class", "table-row", 3, "height", "ngClass", "ngStyle", "expanded-row", "row-selection", "dblclick", "click", "contextmenu", 4, "matRowDef", "matRowDefColumns"], [4, "ngIf"], ["class", "header", 3, "top", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["class", "progress", 3, "top", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["class", "table-paginator", 3, "length", "pageSize", "pageIndex", "pageSizeOptions", "page", 4, "ngIf"], ["class", "no-records", 4, "ngIf"], [2, "visibility", "hidden", "position", "fixed", 3, "matMenuTriggerFor"], ["contextMenu", "matMenu"], ["matMenuContent", ""], [1, "row-checkbox", 2, "z-index", "2"], ["style", "z-index: 10;", 3, "checked", "indeterminate", "change", 4, "ngIf"], [2, "z-index", "10", 3, "checked", "indeterminate", "change"], [1, "row-checkbox"], [3, "checked", "click", "change"], [3, "matColumnDef", "sticky", "stickyEnd"], ["cdkDrag", "", "cdkDragBoundary", "mat-header-row", "cdkDropListLockAxis", "x", "cdkDragBoundary", "mat-header-row", 3, "cdkDragDisabled", "cdkDragData", "maxWidth", "minWidth", "active-resize", 4, "matHeaderCellDef"], [3, "maxWidth", "minWidth", "class", "ngClass", "ngStyle", "click", "contextmenu", 4, "matCellDef"], ["cdkDrag", "", "cdkDragBoundary", "mat-header-row", "cdkDropListLockAxis", "x", "cdkDragBoundary", "mat-header-row", 3, "cdkDragDisabled", "cdkDragData"], [1, "left-resizer-handler", 3, "mousedown"], [3, "field", "filters", "filterChanged"], [1, "column-icon", 3, "ngStyle"], ["class", "drag-indicator", "cdkDragHandle", "", 4, "ngIf"], ["mat-sort-header", "", "matTooltipClass", "cell-tooltip", 1, "header-caption", 3, "matTooltip", "disabled"], [1, "right-resizer-handler", 3, "mousedown"], ["cdkDragHandle", "", 1, "drag-indicator"], [3, "ngClass", "ngStyle", "click", "contextmenu"], [3, "rtl-cell", "ltr-cell", 4, "ngIf"], ["dynamicCell", "", 3, "component", "column", "row", "onRowEvent", 4, "ngIf"], ["dynamicCell", "", 3, "component", "column", "row", "onRowEvent"], ["mode", "indeterminate"], ["matColumnDef", "expandedDetail"], ["mat-cell", "", "class", "expanded-detail-cell", 4, "matCellDef"], ["mat-cell", "", 1, "expanded-detail-cell"], [1, "expanded-detail"], ["dynamicCell", "", 3, "component", "row", "onRowEvent"], ["matColumnDef", "table-menu", 3, "stickyEnd"], ["class", "table-menu", 4, "matHeaderCellDef"], ["class", "table-menu", 4, "matCellDef"], [1, "table-menu"], [3, "tableSetting", "menuActionChange"], [3, "rowActionMenu", "actionMenus", "tableSetting", "rowActionChange", 4, "ngIf"], [3, "rowActionMenu", "actionMenus", "tableSetting", "rowActionChange"], [1, "table-row", 3, "ngClass", "ngStyle", "dblclick", "click", "contextmenu"], ["mat-row", "", "class", "detail-row", 4, "matRowDef", "matRowDefColumns"], ["mat-row", "", 1, "detail-row"], [1, "header"], [1, "progress"], [1, "table-paginator", 3, "length", "pageSize", "pageIndex", "pageSizeOptions", "page"], [1, "no-records"], ["mat-icon-button", "", "color", "primary", 3, "click", 4, "ngIf"], ["mat-icon-button", "", "color", "primary", 3, "click"], [4, "ngFor", "ngForOf"], ["mat-button", "", 1, "button-menu", 3, "color", "disabled", "click"], [1, "text-align-left"]], template: function DynamicMatTableComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "cdk-virtual-scroll-viewport", 0, 1);
        ɵngcc0.ɵɵlistener("requestRendering", function DynamicMatTableComponent_Template_cdk_virtual_scroll_viewport_requestRendering_0_listener($event) { return ctx.doRendering($event); });
        ɵngcc0.ɵɵelementStart(2, "mat-table", 2);
        ɵngcc0.ɵɵlistener("cdkDragStarted", function DynamicMatTableComponent_Template_mat_table_cdkDragStarted_2_listener($event) { return ctx.dragStarted($event); })("cdkDropListDropped", function DynamicMatTableComponent_Template_mat_table_cdkDropListDropped_2_listener($event) { return ctx.dropListDropped($event); });
        ɵngcc0.ɵɵelementContainerStart(3, 3);
        ɵngcc0.ɵɵtemplate(4, DynamicMatTableComponent_mat_header_cell_4_Template, 3, 2, "mat-header-cell", 4);
        ɵngcc0.ɵɵelementContainerStart(5);
        ɵngcc0.ɵɵtemplate(6, DynamicMatTableComponent_mat_cell_6_Template, 2, 1, "mat-cell", 5);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵtemplate(7, DynamicMatTableComponent_ng_container_7_Template, 3, 3, "ng-container", 6);
        ɵngcc0.ɵɵelementContainerStart(8, 7);
        ɵngcc0.ɵɵtemplate(9, DynamicMatTableComponent_mat_header_cell_9_Template, 2, 3, "mat-header-cell", 8);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵtemplate(10, DynamicMatTableComponent_ng_container_10_Template, 2, 0, "ng-container", 9);
        ɵngcc0.ɵɵtemplate(11, DynamicMatTableComponent_ng_container_11_Template, 3, 1, "ng-container", 10);
        ɵngcc0.ɵɵtemplate(12, DynamicMatTableComponent_mat_row_12_Template, 1, 8, "mat-row", 11);
        ɵngcc0.ɵɵtemplate(13, DynamicMatTableComponent_ng_container_13_Template, 2, 1, "ng-container", 12);
        ɵngcc0.ɵɵtemplate(14, DynamicMatTableComponent_mat_header_row_14_Template, 1, 3, "mat-header-row", 13);
        ɵngcc0.ɵɵtemplate(15, DynamicMatTableComponent_mat_header_row_15_Template, 1, 2, "mat-header-row", 14);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(16, DynamicMatTableComponent_mat_paginator_16_Template, 1, 4, "mat-paginator", 15);
        ɵngcc0.ɵɵprojection(17);
        ɵngcc0.ɵɵtemplate(18, DynamicMatTableComponent_div_18_Template, 4, 2, "div", 16);
        ɵngcc0.ɵɵelement(19, "div", 17);
        ɵngcc0.ɵɵelementStart(20, "mat-menu", null, 18);
        ɵngcc0.ɵɵtemplate(22, DynamicMatTableComponent_ng_template_22_Template, 1, 1, "ng-template", 19);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r13 = ɵngcc0.ɵɵreference(21);
        ɵngcc0.ɵɵclassProp("printpreview", ctx.printing);
        ɵngcc0.ɵɵproperty("ngClass", ctx.viewportClass)("tvsItemSize", ctx.rowHeight || 48)("headerHeight", ctx.headerHeight || 56)("footerHeight", ctx.headerHeight || 56)("headerEnabled", ctx.headerEnable || true)("footerEnabled", ctx.footerEnable || false)("ngStyle", ɵngcc0.ɵɵpureFunction1(29, _c7, ctx.backgroundColor || "white"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("cdkDropListDisabled", false)("trackBy", ctx.indexTrackFn)("dataSource", ctx.tvsDataSource);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.columns)("ngForTrackBy", ctx.trackColumn);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.expandColumn.length > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.setting == null ? null : ctx.setting.visibleTableMenu) !== false);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("matRowDefColumns", ctx.displayedColumns);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.expandColumn.length > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("matHeaderRowDef", ctx.displayedColumns)("matHeaderRowDefSticky", ctx.sticky);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("matHeaderRowDef", ctx.progressColumn)("matHeaderRowDefSticky", ctx.sticky);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.pagingMode !== "none");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showNoData === true && (!ctx.tvsDataSource || ctx.tvsDataSource.data.length === 0));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("left", ctx.contextMenuPosition.x)("top", ctx.contextMenuPosition.y);
        ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r13);
    } }, directives: function () { return [ɵngcc14.CdkVirtualScrollViewport, TableItemSizeDirective, ɵngcc2.NgClass, ɵngcc2.NgStyle, ɵngcc12.MatTable, ɵngcc15.MatSort, ɵngcc16.CdkDropList, ɵngcc12.MatColumnDef, ɵngcc12.MatHeaderCellDef, ɵngcc12.MatCellDef, ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc12.MatRowDef, ɵngcc12.MatHeaderRowDef, ɵngcc1.MatMenuTrigger, ɵngcc1.MatMenu, ɵngcc1.MatMenuContent, ɵngcc12.MatHeaderCell, ɵngcc17.MatCheckbox, ɵngcc6.MatIcon, ɵngcc12.MatCell, ɵngcc16.CdkDrag, HeaderFilterComponent, ɵngcc15.MatSortHeader, ɵngcc18.MatTooltip, ɵngcc16.CdkDragHandle, DynamicCellDirective, ɵngcc19.MatProgressBar, TableMenuComponent, RowMenuComponent, ɵngcc12.MatRow, ɵngcc12.MatHeaderRow, ɵngcc20.MatPaginator, ɵngcc3.MatButton, ɵngcc21.MatDivider]; }, styles: ["@media print{.printpreview[_ngcontent-%COMP%]{background-color:#fff;position:fixed;width:100%;height:auto;z-index:99999999;margin:0;padding:0;top:0;left:0;overflow:visible;display:block}}.disable-backdrop-click[_ngcontent-%COMP%]   .cdk-overlay-backdrop.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing[_ngcontent-%COMP%]{pointer-events:none}[_nghost-%COMP%]{display:flex;flex-direction:column;table-layout:fixed;min-height:200px;position:relative;overflow:auto;transition:.3s cubic-bezier(.46,-.72,.46,1.54);background-color:#f3f3f3;border:2px #009688}mat-cell[_ngcontent-%COMP%]:first-of-type, mat-footer-cell[_ngcontent-%COMP%]:first-of-type, mat-header-cell[_ngcontent-%COMP%]:first-of-type:not(.row-checkbox){padding-left:0!important}.rtl-cell[_ngcontent-%COMP%]{padding-right:20px}.ltr-cell[_ngcontent-%COMP%]{padding-left:20px}.viewport[_ngcontent-%COMP%]{height:calc(100% - 0px)}.viewport-with-pagination[_ngcontent-%COMP%]{height:calc(100% - 48px)}.table-paginator[_ngcontent-%COMP%]{position:sticky;bottom:0;display:flex;max-height:48px;align-items:center;overflow:hidden;direction:ltr}mat-footer-row[_ngcontent-%COMP%], mat-row[_ngcontent-%COMP%]{min-height:auto!important}mat-footer-row[_ngcontent-%COMP%], mat-row[_ngcontent-%COMP%], tr.mat-header-row[_ngcontent-%COMP%]{display:flex;border-width:0 0 1px;border-bottom-color:#d2d2d2;border-style:solid;align-items:center;box-sizing:border-box}mat-cell[_ngcontent-%COMP%], mat-footer-cell[_ngcontent-%COMP%], mat-header-cell[_ngcontent-%COMP%]{align-self:stretch;color:inherit;background-color:inherit}.mat-table[_ngcontent-%COMP%]   .row-selection[_ngcontent-%COMP%]{background-color:#f7f5f5}.mat-table[_ngcontent-%COMP%]   .mat-row[_ngcontent-%COMP%]:hover{background-color:#fafafa}.mat-header-row.progress[_ngcontent-%COMP%]{border:none;max-height:4px;min-height:4px;height:0;margin-top:-4px;background-color:transparent}.mat-header-row.progress[_ngcontent-%COMP%]   .mat-header-cell[_ngcontent-%COMP%]{border:0;padding:0}.mat-header-row.progress[_ngcontent-%COMP%]   mat-progress-bar[_ngcontent-%COMP%]{transition:height .3s,opacity .25s linear}.mat-header-row.progress[_ngcontent-%COMP%]   mat-progress-bar[_ngcontent-%COMP%]:not(.show){height:0;opacity:0}.no-records[_ngcontent-%COMP%]{display:flex;align-items:center;top:50%;left:50%;margin:-42px 0 0 -25px;line-height:42px;position:absolute;z-index:1;pointer-events:none}.no-records[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{pointer-events:initial}  .dmf{min-width:100%}  dynamic-mat-table cdk-virtual-scroll-viewport .cdk-virtual-scroll-content-wrapper .mat-table mat-row .mat-cell mat-form-field{max-width:100%}  dynamic-mat-table cdk-virtual-scroll-viewport .cdk-virtual-scroll-content-wrapper .mat-table mat-row .mat-cell mat-form-field .mat-form-field-wrapper{padding-bottom:0!important}  dynamic-mat-table cdk-virtual-scroll-viewport .cdk-virtual-scroll-content-wrapper .mat-table mat-row .mat-cell mat-form-field   .mat-form-field-underline{bottom:0!important}.ltr-menu[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{float:left}.button-menu[_ngcontent-%COMP%]{width:100%;line-height:48px}.button-menu[_ngcontent-%COMP%]  .mat-button-wrapper{display:flex}.button-menu[_ngcontent-%COMP%]  .mat-button-wrapper span{display:inline-block;width:100%;text-align:left}.button-menu[_ngcontent-%COMP%]  .mat-button-wrapper mat-icon{line-height:48px;height:48px;margin:0 5px}mat-button-wrapper[_ngcontent-%COMP%]   .button-menu[_ngcontent-%COMP%]{display:inline-block!important}.text-align-left[_ngcontent-%COMP%]{text-align:left!important}.text-align-right[_ngcontent-%COMP%]{text-align:right!important}.mat-menu-panel[_ngcontent-%COMP%]{min-height:unset!important}cdk-virtual-scroll-viewport[_ngcontent-%COMP%]{min-height:100px;height:inherit;overflow:auto}.header-caption[_ngcontent-%COMP%]{font-weight:bolder;font-size:14px}.header[_ngcontent-%COMP%]{-webkit-user-select:none;-moz-user-select:none;user-select:none;background-color:#fff}.row-checkbox[_ngcontent-%COMP%]{display:contents}.row-checkbox[_ngcontent-%COMP%]   mat-checkbox[_ngcontent-%COMP%]{padding:15px}.row-checkbox[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{padding:15px!important}.table-menu[_ngcontent-%COMP%]{max-width:42px;min-width:initial;padding:0!important;background-color:inherit}[_nghost-%COMP%]   .mat-header-row[_ngcontent-%COMP%] > .mat-header-cell[_ngcontent-%COMP%]:hover   .column-icon[_ngcontent-%COMP%]{opacity:0;transform:translateY(5px);transition:.2s}mat-header-cell[_ngcontent-%COMP%]:hover   .left-resizer-handler[_ngcontent-%COMP%], mat-header-cell[_ngcontent-%COMP%]:hover   .right-resizer-handler[_ngcontent-%COMP%]{height:calc(100% - 10px);transition:height .2s ease-out}.left-resizer-handler[_ngcontent-%COMP%]{display:inline-block;min-width:3px;height:0;border:solid #d2d2d2;position:sticky;cursor:col-resize;border-width:0 0 0 1px;left:0}.right-resizer-handler[_ngcontent-%COMP%]{display:inline-block;min-width:3px;height:0;border:solid #d2d2d2;position:sticky;cursor:col-resize;border-width:0 1px 0 0;right:0}.active-resize[_ngcontent-%COMP%]{background-color:#f5f5f566}.drag-indicator[_ngcontent-%COMP%]{position:absolute;color:rgba(0,0,0,.3);display:flex;opacity:0;transform:translateY(-5px);transition-duration:.4s;transition-property:opacity,transform;cursor:move}[_nghost-%COMP%]   .mat-header-row[_ngcontent-%COMP%] > .mat-header-cell[_ngcontent-%COMP%]:hover   .drag-indicator[_ngcontent-%COMP%]{opacity:1;pointer-events:fill;transform:translateY(0)}.drag-indicator[_ngcontent-%COMP%]:hover{color:#bfc0c0!important}.cdk-drag-preview[_ngcontent-%COMP%]{color:#000;min-height:55px;border:1px solid #d4d4d4;background-color:#f5f5f5;box-sizing:border-box;border-radius:4px;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.cdk-drag-placeholder[_ngcontent-%COMP%]{border:1px dotted #9c9c9c;background-color:#d3d3d3;content:none}.cdk-drag-animating[_ngcontent-%COMP%], .cdk-drop-list-dragging[_ngcontent-%COMP%]{transition:transform 250ms cubic-bezier(0,0,.2,1)}.detail-row[_ngcontent-%COMP%]{height:0;display:inline!important;width:100%}.table-row[_ngcontent-%COMP%]:not(.expanded-row):hover{background:#f5f5f5}.table-row[_ngcontent-%COMP%]:not(.expanded-row):active{background:#efefef}.table-row[_ngcontent-%COMP%]   mat-cell[_ngcontent-%COMP%]{border-bottom-width:0}.expanded-detail[_ngcontent-%COMP%]{overflow:hidden;display:flex;background-color:#fafafa}.expanded-detail-cell[_ngcontent-%COMP%]{display:block;border-width:0;padding:0!important;width:100%;z-index:2}  .cell-tooltip{padding:8px;font-size:12px;min-width:100px;text-align:center;margin-right:-20px}"], data: { animation: [tableAnimation, expandAnimation] } });
/** @nocollapse */
DynamicMatTableComponent.ctorParameters = () => [
    { type: MatDialog },
    { type: Renderer2 },
    { type: TableIntl },
    { type: TableService },
    { type: ChangeDetectorRef },
    { type: OverlayContainer }
];
DynamicMatTableComponent.propDecorators = {
    tbl: [{ type: ViewChild, args: ['tbl', { static: true },] }],
    setting: [{ type: Input }],
    contextMenu: [{ type: ViewChild, args: [MatMenuTrigger,] }],
    printRef: [{ type: ViewChild, args: ['printRef', { static: true },] }],
    printContentRef: [{ type: ViewChild, args: ['printContentRef', { static: true },] }],
    headerFilterList: [{ type: ContentChildren, args: [HeaderFilterComponent,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicMatTableComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line: component-selector
                selector: 'dynamic-mat-table',
                template: "<cdk-virtual-scroll-viewport\r\n  #tbl  \r\n  [ngClass]=\"viewportClass\"\r\n  [tvsItemSize]=\"rowHeight || 48\"\r\n  [headerHeight]=\"headerHeight || 56\"\r\n  [footerHeight]=\"headerHeight || 56\"\r\n  [headerEnabled]=\"headerEnable || true\"\r\n  [footerEnabled]=\"footerEnable || false\"\r\n  [ngStyle]=\"{'background-color': backgroundColor || 'white'}\" \r\n  [class.printpreview]=\"printing\"\r\n  (requestRendering)=\"doRendering($event)\">\r\n\r\n  <mat-table\r\n    matSort \r\n    class=\"table\"    \r\n    multiTemplateDataRows\r\n    [cdkDropListDisabled]=\"false\"    \r\n    cdkDropList \r\n    cdkDropListOrientation=\"horizontal\"    \r\n    (cdkDragStarted)=\"dragStarted($event)\"\r\n    (cdkDropListDropped)=\"dropListDropped($event)\"        \r\n    [trackBy]=\"indexTrackFn\"\r\n    [dataSource]=\"tvsDataSource\">\r\n    <!-- Checkbox Column -->\r\n    <ng-container matColumnDef=\"row-checkbox\">      \r\n        <mat-header-cell *matHeaderCellDef class=\"row-checkbox\" style=\"z-index: 2;\">\r\n          <mat-checkbox style=\"z-index: 10;\"\r\n            (change)=\"$event ? masterToggle() : null\"\r\n            [checked]=\"rowSelectionModel.hasValue() && isAllSelected()\"\r\n            [indeterminate]=\"rowSelectionModel.hasValue() && !isAllSelected()\"         \r\n            *ngIf=\"rowSelectionMode === 'multi'\">\r\n          </mat-checkbox>\r\n          <mat-icon *ngIf=\"rowSelectionMode === 'single'\">indeterminate_check_box</mat-icon>\r\n        </mat-header-cell>\r\n        <ng-container>\r\n          <mat-cell *matCellDef=\"let row\" class=\"row-checkbox\">\r\n            <mat-checkbox\r\n              (click)=\"$event.stopPropagation()\"\r\n              (change)=\"onRowSelectionChange($event, row)\"\r\n              [checked]=\"rowSelectionModel?.isSelected(row)\">\r\n            </mat-checkbox>\r\n          </mat-cell>\r\n        </ng-container>\r\n    </ng-container> \r\n    <!-- Table Columns -->\r\n    <ng-container *ngFor=\"let column of columns; let i = index; trackBy: trackColumn\" [matColumnDef]=\"column.name\"\r\n      [sticky]=\"column.sticky === 'start' ? true : false\" [stickyEnd]=\"column.sticky === 'end' ? true : false\">      \r\n      <!-- ************************** Table Header ************************* -->      \r\n        <mat-header-cell *matHeaderCellDef                \r\n          cdkDrag \r\n          [cdkDragDisabled]=\"column?.draggable === false\"\r\n          cdkDragBoundary=\"mat-header-row\"\r\n          cdkDropListLockAxis=\"x\"        \r\n          [cdkDragData]=\"{name: column.name, columIndex: i}\"        \r\n          [style.maxWidth.px]=\"column.width\"\r\n          [style.minWidth.px]=\"column.width\"        \r\n          [class.active-resize]=\"resizeColumn.currentResizeIndex===i\" cdkDragBoundary=\"mat-header-row\">\r\n          <div class=\"left-resizer-handler\" (mousedown)=\"onResizeColumn($event, i, 'left')\"></div>\r\n          <header-filter [field]=\"column\" (filterChanged)=\"filter_onChanged(column, $event)\" [filters]=\"tvsDataSource.getFilter(column.name)\">\r\n            <mat-icon class=\"column-icon\" [ngStyle]=\"{ 'color': column?.iconColor }\">{{column?.icon}}</mat-icon>          \r\n            <mat-icon *ngIf=\"column?.draggable != false\" class=\"drag-indicator\" cdkDragHandle>drag_indicator</mat-icon>\r\n            <div mat-sort-header [matTooltip]=\"column.header\" matTooltipClass=\"cell-tooltip\" [disabled]=\"column.sortable === false\" class=\"header-caption\">{{ column.header }}</div>\r\n          </header-filter> \r\n          <div\r\n            class=\"right-resizer-handler\"\r\n            (mousedown)=\"onResizeColumn($event, i, 'right')\"\r\n          ></div>\r\n        </mat-header-cell>           \r\n      <!-- ************************** Table Cell ************************* -->\r\n      \r\n      <mat-cell *matCellDef=\"let row;\"                    \r\n                [style.maxWidth.px]=\"column.width\"\r\n                [style.minWidth.px]=\"column.width\"\r\n                [class]=\"row[column.cellClass]\"\r\n                (click)=\"onCellClick($event, row, column)\"                  \r\n                [ngClass]=\"cellClass(row?.option, column)\"\r\n                [ngStyle]=\"cellStyle(row?.option, column)\"\r\n                (contextmenu)=\"onContextMenu($event, column, row)\">          \r\n        <label *ngIf=\"!column.dynamicCellComponent\" [class.rtl-cell]=\"direction === 'rtl'\" [class.ltr-cell]=\"direction === 'ltr'\">{{row[column.name]}}</label>          \r\n        <ng-container *ngIf=\"column.dynamicCellComponent\" dynamicCell [component]=\"column.dynamicCellComponent\" [column]=\"column\" [row]=\"row\" [onRowEvent]=\"onRowEvent\">\r\n        </ng-container> \r\n      </mat-cell>\r\n    </ng-container> \r\n\r\n    <ng-container matColumnDef=\"progress\" > \r\n      <mat-header-cell\r\n        *matHeaderCellDef\r\n        [attr.colspan]=\"displayedColumns.length\">\r\n        <mat-progress-bar mode=\"indeterminate\" [class.show]=\"pending\">\r\n        </mat-progress-bar>\r\n      </mat-header-cell>\r\n    </ng-container>\r\n\r\n    <!-- Expanded Content Column - The detail row is made up of Dynamic Cell -->\r\n    <ng-container *ngIf=\"expandColumn.length > 0\" matColumnDef=\"expandedDetail\">\r\n      <td mat-cell *matCellDef=\"let row\" [attr.colspan]=\"displayedColumns.length\" class=\"expanded-detail-cell\">\r\n        <div class=\"expanded-detail\" [@detailExpand]=\"row == expandedElement ? 'expanded' : 'collapsed'\">\r\n          <ng-container dynamicCell [component]=\"expandComponent\" [row]=\"row\" [onRowEvent]=\"onRowEvent\">\r\n          </ng-container> \r\n        </div>\r\n      </td>\r\n    </ng-container>\r\n    <!-- Table Menu[ Sort, Visible, Export] -->\r\n    <ng-container matColumnDef=\"table-menu\" [stickyEnd]=\"true\" *ngIf=\"setting?.visibleTableMenu !== false\">\r\n      <mat-header-cell *matHeaderCellDef class=\"table-menu\">\r\n        <table-menu\r\n          [tableSetting]=\"tableSetting\"\r\n          (menuActionChange)=\"tableMenuActionChange($event)\"\r\n        ></table-menu> \r\n      </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let row\" class=\"table-menu\">\r\n        <row-menu *ngIf=\"rowContextMenuItems && rowContextMenuItems.length > 0\" [rowActionMenu]=\"row?.actionMenu\" [actionMenus]=\"rowContextMenuItems\" [tableSetting]=\"tableSetting\" (rowActionChange)=\"rowMenuActionChange($event, row)\"></row-menu>\r\n      </mat-cell>\r\n    </ng-container>\r\n    <!-- Row Table[Header, Data, Footer] -->    \r\n    <mat-row \r\n      *matRowDef=\"let row; columns: displayedColumns;\"      \r\n      (dblclick)=\"onRowDblClick($event, row)\"\r\n      (click)=\"onRowClick($event, row)\"\r\n      [style.height.px]=\"rowHeight\"\r\n      class=\"table-row\" \r\n      [ngClass]=\"row?.option?.class\"\r\n      [ngStyle]=\"rowStyle(row)\"      \r\n      [class.expanded-row]=\"expandedElement === row\"\r\n      [class.row-selection]=\"rowSelectionModel ? rowSelectionModel.isSelected(row) : false\"\r\n      (contextmenu)=\"onContextMenu($event, null, row)\">\r\n    </mat-row>\r\n    <ng-container *ngIf=\"expandColumn.length > 0\">      \r\n      <tr mat-row *matRowDef=\"let expandRow; columns: expandColumn\" class=\"detail-row\"></tr>\r\n    </ng-container>    \r\n    <mat-header-row class=\"header\" [@tableAnimation] *matHeaderRowDef=\"displayedColumns; sticky: sticky\" [style.top.px]=\"inverseOfTranslation\"></mat-header-row >\r\n    <mat-header-row class=\"progress\" *matHeaderRowDef=\"progressColumn; sticky: sticky\" [style.top.px]=\"inverseOfTranslation + headerHeight - 5\" ></mat-header-row>\r\n  </mat-table> \r\n</cdk-virtual-scroll-viewport>\r\n<mat-paginator\r\n  *ngIf=\"pagingMode !== 'none'\"\r\n  class=\"table-paginator\"\r\n  [length]=\"pagination?.length\"\r\n  [pageSize]=\"pagination?.pageSize\"\r\n  [pageIndex]=\"pagination?.pageIndex\"\r\n  (page)=\"pagination_onChange($event)\"\r\n  [pageSizeOptions]=\"pagination?.pageSizeOptions\">\r\n</mat-paginator>\r\n<ng-content></ng-content>\r\n \r\n<div class=\"no-records\" *ngIf=\"showNoData === true && (!tvsDataSource || tvsDataSource.data.length === 0)\">\r\n  <!-- <mat-icon>web</mat-icon>  -->\r\n  {{ languagePack?.tableLabels.NoData }}  \r\n  <br>\r\n  <button *ngIf=\"showReload\" mat-icon-button color=\"primary\" (click)=\"reload_onClick()\"><mat-icon>autorenew</mat-icon></button>\r\n</div>\r\n\r\n<!-- Context Menu -->\r\n<div style=\"visibility: hidden; position: fixed\"  \r\n  [style.left]=\"contextMenuPosition.x\"\r\n  [style.top]=\"contextMenuPosition.y\"\r\n  [matMenuTriggerFor]=\"contextMenu\">\r\n</div>\r\n<mat-menu #contextMenu=\"matMenu\">\r\n\t<ng-template matMenuContent let-item=\"item\">\t\t\r\n    <ng-container *ngFor=\"let menu of contextMenuItems\">\r\n      <button mat-button [class.ltr-menu]=\"tableSetting.direction === 'rtl'\" [color]=\"menu.color\" class=\"button-menu\" \r\n        [disabled]=\"menu.disabled\" (click)=\"onContextMenuItemClick(menu)\">\r\n         <mat-icon>{{menu.icon}}</mat-icon>\r\n        <span [class.text-align-right]=\"tableSetting.direction === 'rtl'\" class=\"text-align-left\">{{menu.text}}</span>\r\n      </button>\r\n      <mat-divider *ngIf=\"menu.divider === true\"></mat-divider>\r\n    </ng-container>    \r\n\t</ng-template>\r\n</mat-menu>",
                animations: [tableAnimation, expandAnimation],
                // changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    { provide: MAT_TOOLTIP_DEFAULT_OPTIONS, useValue: cellTooltipDefaults }
                ],
                styles: ["@media print{.printpreview{background-color:#fff;position:fixed;width:100%;height:auto;z-index:99999999;margin:0;padding:0;top:0;left:0;overflow:visible;display:block}}.disable-backdrop-click .cdk-overlay-backdrop.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing{pointer-events:none}:host{display:flex;flex-direction:column;table-layout:fixed;min-height:200px;position:relative;overflow:auto;transition:.3s cubic-bezier(.46,-.72,.46,1.54);background-color:#f3f3f3;border:2px #009688}mat-cell:first-of-type,mat-footer-cell:first-of-type,mat-header-cell:first-of-type:not(.row-checkbox){padding-left:0!important}.rtl-cell{padding-right:20px}.ltr-cell{padding-left:20px}.viewport{height:calc(100% - 0px)}.viewport-with-pagination{height:calc(100% - 48px)}.table-paginator{position:sticky;bottom:0;display:flex;max-height:48px;align-items:center;overflow:hidden;direction:ltr}mat-footer-row,mat-row{min-height:auto!important}mat-footer-row,mat-row,tr.mat-header-row{display:flex;border-width:0 0 1px;border-bottom-color:#d2d2d2;border-style:solid;align-items:center;box-sizing:border-box}mat-cell,mat-footer-cell,mat-header-cell{align-self:stretch;color:inherit;background-color:inherit}.mat-table .row-selection{background-color:#f7f5f5}.mat-table .mat-row:hover{background-color:#fafafa}.mat-header-row.progress{border:none;max-height:4px;min-height:4px;height:0;margin-top:-4px;background-color:transparent}.mat-header-row.progress .mat-header-cell{border:0;padding:0}.mat-header-row.progress mat-progress-bar{transition:height .3s,opacity .25s linear}.mat-header-row.progress mat-progress-bar:not(.show){height:0;opacity:0}.no-records{display:flex;align-items:center;top:50%;left:50%;margin:-42px 0 0 -25px;line-height:42px;position:absolute;z-index:1;pointer-events:none}.no-records button{pointer-events:initial}::ng-deep .dmf{min-width:100%}::ng-deep dynamic-mat-table cdk-virtual-scroll-viewport .cdk-virtual-scroll-content-wrapper .mat-table mat-row .mat-cell mat-form-field{max-width:100%}::ng-deep dynamic-mat-table cdk-virtual-scroll-viewport .cdk-virtual-scroll-content-wrapper .mat-table mat-row .mat-cell mat-form-field .mat-form-field-wrapper{padding-bottom:0!important}::ng-deep dynamic-mat-table cdk-virtual-scroll-viewport .cdk-virtual-scroll-content-wrapper .mat-table mat-row .mat-cell mat-form-field ::ng-deep .mat-form-field-underline{bottom:0!important}.ltr-menu span{float:left}.button-menu{width:100%;line-height:48px}.button-menu::ng-deep .mat-button-wrapper{display:flex}.button-menu::ng-deep .mat-button-wrapper span{display:inline-block;width:100%;text-align:left}.button-menu::ng-deep .mat-button-wrapper mat-icon{line-height:48px;height:48px;margin:0 5px}mat-button-wrapper .button-menu{display:inline-block!important}.text-align-left{text-align:left!important}.text-align-right{text-align:right!important}.mat-menu-panel{min-height:unset!important}cdk-virtual-scroll-viewport{min-height:100px;height:inherit;overflow:auto}.header-caption{font-weight:bolder;font-size:14px}.header{-webkit-user-select:none;-moz-user-select:none;user-select:none;background-color:#fff}.row-checkbox{display:contents}.row-checkbox mat-checkbox{padding:15px}.row-checkbox mat-icon{padding:15px!important}.table-menu{max-width:42px;min-width:initial;padding:0!important;background-color:inherit}:host .mat-header-row>.mat-header-cell:hover .column-icon{opacity:0;transform:translateY(5px);transition:.2s}mat-header-cell:hover .left-resizer-handler,mat-header-cell:hover .right-resizer-handler{height:calc(100% - 10px);transition:height .2s ease-out}.left-resizer-handler{display:inline-block;min-width:3px;height:0;border:solid #d2d2d2;position:sticky;cursor:col-resize;border-width:0 0 0 1px;left:0}.right-resizer-handler{display:inline-block;min-width:3px;height:0;border:solid #d2d2d2;position:sticky;cursor:col-resize;border-width:0 1px 0 0;right:0}.active-resize{background-color:#f5f5f566}.drag-indicator{position:absolute;color:rgba(0,0,0,.3);display:flex;opacity:0;transform:translateY(-5px);transition-duration:.4s;transition-property:opacity,transform;cursor:move}:host .mat-header-row>.mat-header-cell:hover .drag-indicator{opacity:1;pointer-events:fill;transform:translateY(0)}.drag-indicator:hover{color:#bfc0c0!important}.cdk-drag-preview{color:#000;min-height:55px;border:1px solid #d4d4d4;background-color:#f5f5f5;box-sizing:border-box;border-radius:4px;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.cdk-drag-placeholder{border:1px dotted #9c9c9c;background-color:#d3d3d3;content:none}.cdk-drag-animating,.cdk-drop-list-dragging{transition:transform 250ms cubic-bezier(0,0,.2,1)}.detail-row{height:0;display:inline!important;width:100%}.table-row:not(.expanded-row):hover{background:#f5f5f5}.table-row:not(.expanded-row):active{background:#efefef}.table-row mat-cell{border-bottom-width:0}.expanded-detail{overflow:hidden;display:flex;background-color:#fafafa}.expanded-detail-cell{display:block;border-width:0;padding:0!important;width:100%;z-index:2}::ng-deep .cell-tooltip{padding:8px;font-size:12px;min-width:100px;text-align:center;margin-right:-20px}"]
            }]
    }], function () { return [{ type: ɵngcc10.MatDialog }, { type: ɵngcc0.Renderer2 }, { type: TableIntl }, { type: TableService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc13.OverlayContainer }]; }, { setting: [{
            type: Input
        }], tbl: [{
            type: ViewChild,
            args: ['tbl', { static: true }]
        }], contextMenu: [{
            type: ViewChild,
            args: [MatMenuTrigger]
        }], printRef: [{
            type: ViewChild,
            args: ['printRef', { static: true }]
        }], printContentRef: [{
            type: ViewChild,
            args: ['printContentRef', { static: true }]
        }], headerFilterList: [{
            type: ContentChildren,
            args: [HeaderFilterComponent]
        }] }); })();
if (false) {
    /** @type {?} */
    DynamicMatTableComponent.prototype.tbl;
    /** @type {?} */
    DynamicMatTableComponent.prototype.contextMenu;
    /** @type {?} */
    DynamicMatTableComponent.prototype.contextMenuPosition;
    /** @type {?} */
    DynamicMatTableComponent.prototype.printRef;
    /** @type {?} */
    DynamicMatTableComponent.prototype.printContentRef;
    /** @type {?} */
    DynamicMatTableComponent.prototype.headerFilterList;
    /**
     * @type {?}
     * @private
     */
    DynamicMatTableComponent.prototype.dragDropData;
    /**
     * @type {?}
     * @private
     */
    DynamicMatTableComponent.prototype.eventsSubscription;
    /** @type {?} */
    DynamicMatTableComponent.prototype.printing;
    /** @type {?} */
    DynamicMatTableComponent.prototype.printTemplate;
    /** @type {?} */
    DynamicMatTableComponent.prototype.resizeColumn;
    /** @type {?} */
    DynamicMatTableComponent.prototype.resizableMousemove;
    /** @type {?} */
    DynamicMatTableComponent.prototype.resizableMouseup;
    /** @type {?} */
    DynamicMatTableComponent.prototype.indexTrackFn;
    /** @type {?} */
    DynamicMatTableComponent.prototype.currentContextMenuSender;
    /** @type {?} */
    DynamicMatTableComponent.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    DynamicMatTableComponent.prototype.renderer;
    /** @type {?} */
    DynamicMatTableComponent.prototype.languagePack;
    /** @type {?} */
    DynamicMatTableComponent.prototype.tableService;
    /** @type {?} */
    DynamicMatTableComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    DynamicMatTableComponent.prototype.overlayContainer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/cores/dynamic-cell/dynamic-cell.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DynamicCellDirective {
    /**
     * @param {?} compiler
     * @param {?} cfr
     * @param {?} vc
     * @param {?} parent
     */
    constructor(compiler, cfr, vc, parent) {
        this.compiler = compiler;
        this.cfr = cfr;
        this.vc = vc;
        this.parent = parent;
        this.componentRef = null;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.componentRef === null || this.componentRef === undefined) {
            this.initComponent();
        }
        // pass input parameters
        if (changes.column && changes.column.currentValue) {
            this.componentRef.instance.column = this.column;
        }
        if (changes.row && changes.row.currentValue) {
            ((/** @type {?} */ (this.componentRef.instance))).row = this.row;
        }
        if (changes.onRowEvent && changes.onRowEvent.currentValue) {
            ((/** @type {?} */ (this.componentRef.instance))).onRowEvent = this.onRowEvent;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    }
    /**
     * @return {?}
     */
    initComponent() {
        try {
            /** @type {?} */
            const componentFactory = this.cfr.resolveComponentFactory(this.component);
            this.componentRef = this.vc.createComponent(componentFactory);
            this.updateInput();
        }
        catch (e) {
            // console.log(e);
        }
    }
    /**
     * @return {?}
     */
    updateInput() {
        if (this.parent) {
            ((/** @type {?} */ (this.componentRef.instance))).parent = this.parent;
        }
        if (this.column) {
            this.componentRef.instance.column = this.column;
        }
        if (this.row) {
            ((/** @type {?} */ (this.componentRef.instance))).row = this.row;
        }
        if (this.onRowEvent) {
            ((/** @type {?} */ (this.componentRef.instance))).onRowEvent = this.onRowEvent;
        }
    }
}
DynamicCellDirective.ɵfac = function DynamicCellDirective_Factory(t) { return new (t || DynamicCellDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Compiler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DynamicMatTableComponent)); };
DynamicCellDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DynamicCellDirective, selectors: [["", "dynamicCell", ""]], inputs: { component: "component", column: "column", row: "row", onRowEvent: "onRowEvent" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/** @nocollapse */
DynamicCellDirective.ctorParameters = () => [
    { type: Compiler },
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: DynamicMatTableComponent }
];
DynamicCellDirective.propDecorators = {
    component: [{ type: Input }],
    column: [{ type: Input }],
    row: [{ type: Input }],
    onRowEvent: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicCellDirective, [{
        type: Directive,
        args: [{
                selector: '[dynamicCell]'
            }]
    }], function () { return [{ type: ɵngcc0.Compiler }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }, { type: DynamicMatTableComponent }]; }, { component: [{
            type: Input
        }], column: [{
            type: Input
        }], row: [{
            type: Input
        }], onRowEvent: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    DynamicCellDirective.prototype.component;
    /** @type {?} */
    DynamicCellDirective.prototype.column;
    /** @type {?} */
    DynamicCellDirective.prototype.row;
    /** @type {?} */
    DynamicCellDirective.prototype.onRowEvent;
    /** @type {?} */
    DynamicCellDirective.prototype.componentRef;
    /** @type {?} */
    DynamicCellDirective.prototype.compiler;
    /**
     * @type {?}
     * @private
     */
    DynamicCellDirective.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    DynamicCellDirective.prototype.vc;
    /**
     * @type {?}
     * @private
     */
    DynamicCellDirective.prototype.parent;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/row-menu/row-menu.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class RowMenuComponent {
    constructor() {
        // @Output() rowActionChange: EventEmitter<ContextMenuItem> = new EventEmitter<ContextMenuItem>();
        this.rowActionChange = new EventEmitter();
        this.actionMenus = [];
        this.visibleActionMenus = [];
    }
    /**
     * @param {?} e
     * @return {?}
     */
    menuOnClick(e) {
        e.stopPropagation();
        e.preventDefault();
        this.visibleActionMenus = [];
        this.actionMenus.forEach((/**
         * @param {?} menu
         * @return {?}
         */
        menu => {
            /** @type {?} */
            const am = isNullorUndefined(this.rowActionMenu) || isNullorUndefined(this.rowActionMenu[menu.name]) ? menu : this.rowActionMenu[menu.name];
            if (isNullorUndefined(am.visible) || am.visible) {
                this.visibleActionMenus.push({
                    name: menu.name,
                    text: am.text || menu.text,
                    disabled: am.disabled || menu.disabled,
                    icon: am.icon || menu.icon,
                    color: am.color || menu.color
                });
            }
        }));
    }
    /**
     * @param {?} menu
     * @return {?}
     */
    menuButton_OnClick(menu) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.rowActionChange.emit(menu);
        }));
    }
}
RowMenuComponent.ɵfac = function RowMenuComponent_Factory(t) { return new (t || RowMenuComponent)(); };
RowMenuComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: RowMenuComponent, selectors: [["row-menu"]], inputs: { actionMenus: "actionMenus", tableSetting: "tableSetting", rowActionMenu: "rowActionMenu" }, outputs: { rowActionChange: "rowActionChange" }, decls: 7, vars: 4, consts: [["mat-icon-button", "", 1, "clear", 3, "matMenuTriggerFor", "dir", "click"], ["menuTrigger", "matMenuTrigger"], [3, "overlapTrigger", "dir"], ["menu", "matMenu"], ["matMenuContent", ""], ["mat-button", "", "class", "button-menu", 3, "ltr-menu", "color", "disabled", "click", 4, "ngFor", "ngForOf"], ["mat-button", "", 1, "button-menu", 3, "color", "disabled", "click"], [1, "text-align-left"]], template: function RowMenuComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0, 1);
        ɵngcc0.ɵɵlistener("click", function RowMenuComponent_Template_button_click_0_listener($event) { return ctx.menuOnClick($event); });
        ɵngcc0.ɵɵelementStart(2, "mat-icon");
        ɵngcc0.ɵɵtext(3, "more_horiz");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "mat-menu", 2, 3);
        ɵngcc0.ɵɵtemplate(6, RowMenuComponent_ng_template_6_Template, 1, 1, "ng-template", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(5);
        ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r1)("dir", ctx.tableSetting.direction === "rtl" ? "ltr" : "rtl");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("overlapTrigger", false)("dir", ctx.tableSetting.direction === "rtl" ? "ltr" : "rtl");
    } }, directives: [ɵngcc3.MatButton, ɵngcc1.MatMenuTrigger, ɵngcc11.Dir, ɵngcc6.MatIcon, ɵngcc1.MatMenu, ɵngcc1.MatMenuContent, ɵngcc2.NgForOf], styles: ["@media print{.printpreview[_ngcontent-%COMP%]{background-color:#fff;position:fixed;width:100%;height:auto;z-index:99999999;margin:0;padding:0;top:0;left:0;overflow:visible;display:block}}.disable-backdrop-click[_ngcontent-%COMP%]   .cdk-overlay-backdrop.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing[_ngcontent-%COMP%]{pointer-events:none}.ltr-menu[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{float:left}.button-menu[_ngcontent-%COMP%]{width:100%;line-height:48px}.button-menu[_ngcontent-%COMP%]  .mat-button-wrapper{display:flex}.button-menu[_ngcontent-%COMP%]  .mat-button-wrapper span{display:inline-block;width:100%;text-align:left}.button-menu[_ngcontent-%COMP%]  .mat-button-wrapper mat-icon{line-height:48px;height:48px;margin:0 5px}mat-button-wrapper[_ngcontent-%COMP%]   .button-menu[_ngcontent-%COMP%]{display:inline-block!important}.text-align-left[_ngcontent-%COMP%]{text-align:left!important}.text-align-right[_ngcontent-%COMP%]{text-align:right!important}.mat-menu-panel[_ngcontent-%COMP%]{min-height:unset!important}[_nghost-%COMP%]{display:flex;align-items:center;justify-content:space-between}"], changeDetection: 0 });
/** @nocollapse */
RowMenuComponent.ctorParameters = () => [];
RowMenuComponent.propDecorators = {
    rowActionChange: [{ type: Output }],
    actionMenus: [{ type: Input }],
    tableSetting: [{ type: Input }],
    rowActionMenu: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RowMenuComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line: component-selector
                selector: 'row-menu',
                template: "<button class=\"clear\" mat-icon-button #menuTrigger=\"matMenuTrigger\" (click)=\"menuOnClick($event)\"\r\n[matMenuTriggerFor]=\"menu\" [dir]=\"tableSetting.direction === 'rtl' ? 'ltr' : 'rtl'\" >\r\n  <mat-icon>more_horiz</mat-icon>\r\n</button>\r\n\r\n<mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\" [dir]=\"tableSetting.direction === 'rtl' ? 'ltr' : 'rtl'\">\r\n  <ng-template matMenuContent>\r\n    <button mat-button [class.ltr-menu]=\"tableSetting.direction === 'rtl'\" [color]=\"menu.color\" class=\"button-menu\" \r\n      *ngFor=\"let menu of visibleActionMenus\" [disabled]=\"menu.disabled\" (click)=\"menuButton_OnClick(menu)\">\r\n       <mat-icon>{{menu.icon}}</mat-icon>\r\n      <span [class.text-align-right]=\"tableSetting.direction === 'rtl'\" class=\"text-align-left\">{{menu.text}}</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["@media print{.printpreview{background-color:#fff;position:fixed;width:100%;height:auto;z-index:99999999;margin:0;padding:0;top:0;left:0;overflow:visible;display:block}}.disable-backdrop-click .cdk-overlay-backdrop.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing{pointer-events:none}.ltr-menu span{float:left}.button-menu{width:100%;line-height:48px}.button-menu::ng-deep .mat-button-wrapper{display:flex}.button-menu::ng-deep .mat-button-wrapper span{display:inline-block;width:100%;text-align:left}.button-menu::ng-deep .mat-button-wrapper mat-icon{line-height:48px;height:48px;margin:0 5px}mat-button-wrapper .button-menu{display:inline-block!important}.text-align-left{text-align:left!important}.text-align-right{text-align:right!important}.mat-menu-panel{min-height:unset!important}:host{display:flex;align-items:center;justify-content:space-between}"]
            }]
    }], function () { return []; }, { rowActionChange: [{
            type: Output
        }], actionMenus: [{
            type: Input
        }], tableSetting: [{
            type: Input
        }], rowActionMenu: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    RowMenuComponent.prototype.rowActionChange;
    /** @type {?} */
    RowMenuComponent.prototype.actionMenus;
    /** @type {?} */
    RowMenuComponent.prototype.tableSetting;
    /** @type {?} */
    RowMenuComponent.prototype.rowActionMenu;
    /** @type {?} */
    RowMenuComponent.prototype.visibleActionMenus;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/row-menu/row-menu.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const components = [RowMenuComponent];
class RowMenuModule {
}
RowMenuModule.ɵfac = function RowMenuModule_Factory(t) { return new (t || RowMenuModule)(); };
RowMenuModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: RowMenuModule });
RowMenuModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            FormsModule,
            MatButtonModule,
            MatIconModule,
            MatMenuModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RowMenuModule, [{
        type: NgModule,
        args: [{
                declarations: [components],
                exports: components,
                imports: [
                    CommonModule,
                    FormsModule,
                    MatButtonModule,
                    MatIconModule,
                    MatMenuModule
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RowMenuModule, { declarations: function () { return [RowMenuComponent]; }, imports: function () { return [CommonModule,
        FormsModule,
        MatButtonModule,
        MatIconModule,
        MatMenuModule]; }, exports: function () { return [RowMenuComponent]; } }); })();

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/table-menu/table-menu.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TableMenuComponent {
    /**
     * @param {?} languagePack
     * @param {?} tableService
     */
    constructor(languagePack, tableService) {
        this.languagePack = languagePack;
        this.tableService = tableService;
        this.menuActionChange = new EventEmitter();
        this.currentColumn = null;
        this.reverseDirection = null;
    }
    /**
     * @return {?}
     */
    get tableSetting() {
        return this.currentTableSetting;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tableSetting(value) {
        this.originalTableSetting = value;
        this.reverseDirection = value.direction === 'rtl' ? 'ltr' : 'rtl';
        this.currentTableSetting = clone(value);
    }
    /**
     * @return {?}
     */
    screenMode_OnClick() {
        this.menuActionChange.emit({
            type: 'FullScreenMode',
            data: this.currentTableSetting,
        });
    }
    /**
     * ** Column Setting *****
     * @param {?} event
     * @return {?}
     */
    columnMenuDropped(event) {
        moveItemInArray(this.currentTableSetting.columnSetting, event.item.data.columnIndex, event.currentIndex);
    }
    /**
     * @param {?} columnIndex
     * @return {?}
     */
    toggleSelectedColumn(columnIndex) {
        /** @type {?} */
        const colFound = this.currentTableSetting.columnSetting.find((/**
         * @param {?} col
         * @return {?}
         */
        (col) => col.index === columnIndex));
        colFound.display = colFound.display === 'visible' ? 'hiden' : 'visible';
    }
    /**
     * @param {?} e
     * @return {?}
     */
    apply_OnClick(e) {
        e.stopPropagation();
        e.preventDefault();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.menuActionChange.emit({
                type: 'TableSetting',
                data: this.currentTableSetting,
            });
            this.tableService.saveColumnInfo(this.currentTableSetting.columnSetting);
        }));
    }
    /**
     * @param {?} i
     * @return {?}
     */
    setting_onClick(i) {
        this.currentColumn = i;
    }
    /**
     * @return {?}
     */
    cancel_OnClick() {
        this.currentTableSetting = deepClone(this.originalTableSetting);
    }
    /**
     * @param {?} visible
     * @return {?}
     */
    isVisible(visible) {
        return isNullorUndefined(visible) ? true : visible;
    }
    /**
     * **  Save *******
     * @return {?}
     */
    saveSetting_OnClick() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.menuActionChange.emit({ type: 'SaveSetting' });
        }));
    }
    /**
     * **  Filter *******
     * @return {?}
     */
    clearFilter_OnClick() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.menuActionChange.emit({ type: 'FilterClear' });
        }));
    }
    /**
     * **** Save File **********
     * @param {?} type
     * @return {?}
     */
    download_OnClick(type) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.menuActionChange.emit({ type: 'Download', data: type });
        }));
    }
    /**
     * @param {?} menu
     * @return {?}
     */
    print_OnClick(menu) {
        menu._overlayRef._host.parentElement.click();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.menuActionChange.emit({ type: 'Print', data: null });
        }));
    }
}
TableMenuComponent.ɵfac = function TableMenuComponent_Factory(t) { return new (t || TableMenuComponent)(ɵngcc0.ɵɵdirectiveInject(TableIntl), ɵngcc0.ɵɵdirectiveInject(TableService)); };
TableMenuComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TableMenuComponent, selectors: [["table-menu"]], inputs: { tableSetting: "tableSetting" }, outputs: { menuActionChange: "menuActionChange" }, decls: 50, vars: 34, consts: [["mat-icon-button", "", 1, "clear", 3, "matMenuTriggerFor", "dir"], ["menuTrigger", "matMenuTrigger"], [1, "main-menu"], [3, "overlapTrigger", "dir"], ["menu", "matMenu"], ["mat-menu-item", "", 3, "click"], ["mat-menu-item", "", "color", "primary", 3, "matMenuTriggerFor"], ["convertMenu", "matMenu"], ["columnMenu", "matMenu"], [4, "ngIf", "ngIfElse"], ["noColumns", ""], [2, "padding", "10px !important", 3, "overlapTrigger"], ["columnSettingMenu", "matMenu"], ["class", "column-setting", 3, "click", 4, "ngIf"], ["cdkDropList", "", "dkDropListLockAxis", "y", "cdkDropListOrientation", "vertical", "dir", "ltr", 1, "va-mat-table-dragable-container"], ["class", "dragable-row", "cdkDrag", "", 3, "cdkDragData", "click", "cdkDragDropped", 4, "ngFor", "ngForOf"], [2, "border-top", "solid 1px #e7e7e7"], ["mat-menu-item", "", "color", "primary", 1, "done-setting", 3, "click"], ["color", "primary"], ["cdkDrag", "", 1, "dragable-row", 3, "cdkDragData", "click", "cdkDragDropped"], ["cdkDragHandle", ""], [3, "disabled", "checked", "click", "change"], [1, "column-setting-button", 3, "matMenuTriggerFor", "click"], ["class", "va-mat-table-drag-preview", 4, "cdkDragPreview"], [1, "va-mat-table-drag-preview"], [3, "checked"], ["mat-menu-item", ""], [1, "column-setting", 3, "click"], [4, "ngIf"], [1, "column-setting-header", "column-setting-header-first"], [1, "radio", 3, "ngModel", "ngModelChange"], ["value", "client-side", 3, "click"], ["value", "server-side", 3, "click"], [1, "column-setting-header"], [3, "value", "click"], ["value", "none", 3, "click"], ["value", "start", 3, "click"], ["value", "end", 3, "click"]], template: function TableMenuComponent_Template(rf, ctx) { if (rf & 1) {
        const _r46 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "button", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "mat-icon", 2);
        ɵngcc0.ɵɵtext(3, "more_vert");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "mat-menu", 3, 4);
        ɵngcc0.ɵɵelementStart(6, "button", 5);
        ɵngcc0.ɵɵlistener("click", function TableMenuComponent_Template_button_click_6_listener() { return ctx.screenMode_OnClick(); });
        ɵngcc0.ɵɵelementStart(7, "mat-icon");
        ɵngcc0.ɵɵtext(8, "fullscreen");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "span");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "button", 6);
        ɵngcc0.ɵɵelementStart(12, "mat-icon");
        ɵngcc0.ɵɵtext(13, "save");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "span");
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "button", 6);
        ɵngcc0.ɵɵelementStart(17, "mat-icon");
        ɵngcc0.ɵɵtext(18, "view_column");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "span");
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "button", 5);
        ɵngcc0.ɵɵlistener("click", function TableMenuComponent_Template_button_click_21_listener() { return ctx.saveSetting_OnClick(); });
        ɵngcc0.ɵɵelementStart(22, "mat-icon");
        ɵngcc0.ɵɵtext(23, "grading");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(24, "span");
        ɵngcc0.ɵɵtext(25);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "button", 5);
        ɵngcc0.ɵɵlistener("click", function TableMenuComponent_Template_button_click_26_listener() { return ctx.clearFilter_OnClick(); });
        ɵngcc0.ɵɵelementStart(27, "mat-icon");
        ɵngcc0.ɵɵtext(28, "clear");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(29, "span");
        ɵngcc0.ɵɵtext(30);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(31, "mat-menu", null, 7);
        ɵngcc0.ɵɵelementStart(33, "button", 5);
        ɵngcc0.ɵɵlistener("click", function TableMenuComponent_Template_button_click_33_listener() { return ctx.download_OnClick("JSON"); });
        ɵngcc0.ɵɵelementStart(34, "span");
        ɵngcc0.ɵɵtext(35);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(36, "button", 5);
        ɵngcc0.ɵɵlistener("click", function TableMenuComponent_Template_button_click_36_listener() { return ctx.download_OnClick("CSV"); });
        ɵngcc0.ɵɵelementStart(37, "span");
        ɵngcc0.ɵɵtext(38);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(39, "button", 5);
        ɵngcc0.ɵɵlistener("click", function TableMenuComponent_Template_button_click_39_listener() { ɵngcc0.ɵɵrestoreView(_r46); const _r0 = ɵngcc0.ɵɵreference(1); return ctx.print_OnClick(_r0); });
        ɵngcc0.ɵɵelementStart(40, "span");
        ɵngcc0.ɵɵtext(41);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(42, "mat-menu", null, 8);
        ɵngcc0.ɵɵtemplate(44, TableMenuComponent_ng_container_44_Template, 10, 1, "ng-container", 9);
        ɵngcc0.ɵɵtemplate(45, TableMenuComponent_ng_template_45_Template, 2, 1, "ng-template", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(47, "mat-menu", 11, 12);
        ɵngcc0.ɵɵtemplate(49, TableMenuComponent_div_49_Template, 5, 4, "div", 13);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(5);
        const _r2 = ɵngcc0.ɵɵreference(32);
        const _r3 = ɵngcc0.ɵɵreference(43);
        const _r5 = ɵngcc0.ɵɵreference(46);
        ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r1)("dir", ctx.reverseDirection);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("overlapTrigger", false)("dir", ctx.reverseDirection);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassProp("ltr-menu", ctx.currentTableSetting.direction !== "rtl");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ctx.languagePack.menuLabels.fullScreen);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("ltr-menu", ctx.currentTableSetting.direction !== "rtl");
        ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r2);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ctx.languagePack.menuLabels.saveData);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("ltr-menu", ctx.currentTableSetting.direction !== "rtl");
        ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r3);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ctx.languagePack.menuLabels.columnSetting);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("ltr-menu", ctx.currentTableSetting.direction !== "rtl");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ctx.languagePack.menuLabels.saveTableSetting);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("ltr-menu", ctx.currentTableSetting.direction !== "rtl");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ctx.languagePack.menuLabels.clearFilter);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵclassProp("ltr-menu", ctx.currentTableSetting.direction !== "rtl");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.languagePack.menuLabels.jsonFile);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("ltr-menu", ctx.currentTableSetting.direction !== "rtl");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.languagePack.menuLabels.csvFile);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("ltr-menu", ctx.currentTableSetting.direction !== "rtl");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.languagePack.menuLabels.printTable);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.currentTableSetting == null ? null : ctx.currentTableSetting.columnSetting == null ? null : ctx.currentTableSetting.columnSetting.length) > 0)("ngIfElse", _r5);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("overlapTrigger", false);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.currentColumn !== null);
    } }, directives: [ɵngcc3.MatButton, ɵngcc1.MatMenuTrigger, ɵngcc11.Dir, ɵngcc6.MatIcon, ɵngcc1.MatMenu, ɵngcc1.MatMenuItem, ɵngcc2.NgIf, ɵngcc16.CdkDropList, ɵngcc2.NgForOf, ɵngcc16.CdkDrag, ɵngcc16.CdkDragHandle, ɵngcc17.MatCheckbox, ɵngcc16.CdkDragPreview, ɵngcc22.MatRadioGroup, ɵngcc9.NgControlStatus, ɵngcc9.NgModel, ɵngcc22.MatRadioButton], styles: ["[_nghost-%COMP%]{display:flex;align-items:center;justify-content:space-between}.ltr-menu[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{float:left}.main-menu[_ngcontent-%COMP%]{width:38px!important;line-height:24px!important}.va-mat-button-no-input[_ngcontent-%COMP%]{border:none;background-color:transparent;outline:0}.va-mat-table-dragable-container[_ngcontent-%COMP%]{min-width:200px;padding:8px 0;-webkit-user-select:none;-moz-user-select:none;user-select:none}.va-mat-table-dragable-container[_ngcontent-%COMP%]:dir(rtl){background-color:green!important}.dragable-row[_ngcontent-%COMP%]   mat-checkbox[_ngcontent-%COMP%]{width:100%;line-height:28px;display:inline-flex}.va-mat-table-dragable-container[_ngcontent-%COMP%]   .dragable-row[_ngcontent-%COMP%]{background-color:#fff;display:flex;width:100%;height:30px;font-size:14px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.column-setting-button[_ngcontent-%COMP%]{cursor:pointer!important;font-size:24px;margin-right:5px}.va-mat-table-dragable-container[_ngcontent-%COMP%]   .dragable-row[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{line-height:30px;opacity:.15;transition:opacity .5s;color:#616161;cursor:-webkit-grab;cursor:grab;background-color:#fff}.va-mat-table-dragable-container[_ngcontent-%COMP%]   .dragable-row[_ngcontent-%COMP%]:hover   mat-icon[_ngcontent-%COMP%]{opacity:1}.va-mat-table-drag-preview[_ngcontent-%COMP%]{direction:ltr;background-color:#ececec;padding:4px 8px 4px 4px!important;cursor:-webkit-grabbing!important;cursor:grabbing!important;margin-top:-4px;margin-left:-4px;font-size:14px;border-radius:5px}.va-mat-table-drag-preview[_ngcontent-%COMP%]   mat-checkbox[_ngcontent-%COMP%], .va-mat-table-drag-preview[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{vertical-align:top}.va-mat-table-drag-preview[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{padding-left:4px;color:#616161}.cdk-drop-list-dragging[_ngcontent-%COMP%]   .cdk-drag[_ngcontent-%COMP%]{transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag-animating[_ngcontent-%COMP%]{transition:transform .3s cubic-bezier(0,0,.2,1)}.done-setting[_ngcontent-%COMP%]{width:50%!important;display:inline-flex;text-align:center;height:42px}.done-setting[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{line-height:38px!important;opacity:.6;transition:opacity .5s;color:#616161;width:100%;text-align:center;margin:0}.done-setting[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]:hover{opacity:1}.column-setting[_ngcontent-%COMP%]{font-family:Roboto,\"Helvetica Neue\",sans-serif;padding:10px}.column-setting[_ngcontent-%COMP%]   .radio[_ngcontent-%COMP%]{width:100%;display:flex;font-size:12px;margin-top:-2px}.column-setting[_ngcontent-%COMP%]   .radio[_ngcontent-%COMP%]   mat-radio-button[_ngcontent-%COMP%]{padding:5px;width:50%}.column-setting[_ngcontent-%COMP%]   .radio[_ngcontent-%COMP%]   mat-radio-button[_ngcontent-%COMP%]:last-child{margin-right:10px}.column-setting[_ngcontent-%COMP%]   .column-setting-header[_ngcontent-%COMP%]{line-height:30px;padding:5px 5px 0;font-size:14px;border-top:1px solid #f3f3f3;margin-top:5px}.column-setting[_ngcontent-%COMP%]   .column-setting-header[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{opacity:.7;font-size:22px;line-height:30px;float:right;color:#616161}.column-setting-header[_ngcontent-%COMP%]:first-child{border-top:none!important;padding:0 5px!important;margin-top:-5px!important}.first-menu-item[_ngcontent-%COMP%]{width:100px;display:inline-block;text-align:left}  [dir=rtl] .mat-checkbox-inner-container{margin-left:auto!important;margin-right:5px!important}.mat-menu-item[_ngcontent-%COMP%]{display:inline-flex}.mat-menu-item[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{width:100%}.mat-menu-item[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{line-height:48px!important}"], changeDetection: 0 });
/** @nocollapse */
TableMenuComponent.ctorParameters = () => [
    { type: TableIntl },
    { type: TableService }
];
TableMenuComponent.propDecorators = {
    menuActionChange: [{ type: Output }],
    tableSetting: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TableMenuComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line: component-selector
                selector: 'table-menu',
                template: "<button\r\n  class=\"clear\"\r\n  mat-icon-button\r\n  #menuTrigger=\"matMenuTrigger\"\r\n  [matMenuTriggerFor]=\"menu\"\r\n  [dir]=\"reverseDirection\">\r\n  <mat-icon class=\"main-menu\">more_vert</mat-icon>\r\n</button>\r\n\r\n<mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\" [dir]=\"reverseDirection\">\r\n  <button   \r\n    mat-menu-item\r\n    (click)=\"screenMode_OnClick()\"\r\n    [class.ltr-menu]=\"currentTableSetting.direction !== 'rtl'\">\r\n    <mat-icon>fullscreen</mat-icon>\r\n    <span>{{ languagePack.menuLabels.fullScreen }}</span>\r\n  </button>\r\n  <button\r\n    mat-menu-item\r\n    color=\"primary\"\r\n    [matMenuTriggerFor]=\"convertMenu\"\r\n    [class.ltr-menu]=\"currentTableSetting.direction !== 'rtl'\">\r\n    <mat-icon>save</mat-icon>\r\n    <span>{{ languagePack.menuLabels.saveData }}</span>\r\n  </button>\r\n  <button\r\n    mat-menu-item\r\n    color=\"primary\"\r\n    [matMenuTriggerFor]=\"columnMenu\"\r\n    [class.ltr-menu]=\"currentTableSetting.direction !== 'rtl'\">\r\n    <mat-icon>view_column</mat-icon>\r\n    <span>{{ languagePack.menuLabels.columnSetting }}</span>\r\n  </button>\r\n  <button\r\n    mat-menu-item\r\n    (click)=\"saveSetting_OnClick()\"\r\n    [class.ltr-menu]=\"currentTableSetting.direction !== 'rtl'\">\r\n    <mat-icon>grading</mat-icon>\r\n    <span>{{ languagePack.menuLabels.saveTableSetting }}</span>\r\n  </button>\r\n  <button\r\n    mat-menu-item\r\n    (click)=\"clearFilter_OnClick()\"\r\n    [class.ltr-menu]=\"currentTableSetting.direction !== 'rtl'\">\r\n    <mat-icon>clear</mat-icon>\r\n    <span>{{ languagePack.menuLabels.clearFilter }}</span>\r\n  </button>\r\n</mat-menu>\r\n\r\n<!-- Convert Sub Menu -->\r\n\r\n<mat-menu #convertMenu=\"matMenu\">\r\n  <button mat-menu-item (click)=\"download_OnClick('JSON')\" [class.ltr-menu]=\"currentTableSetting.direction !== 'rtl'\">\r\n    <span>{{ languagePack.menuLabels.jsonFile }}</span>\r\n  </button>\r\n  <button mat-menu-item (click)=\"download_OnClick('CSV')\" [class.ltr-menu]=\"currentTableSetting.direction !== 'rtl'\">\r\n    <span>{{ languagePack.menuLabels.csvFile }}</span>\r\n  </button>\r\n  <button mat-menu-item (click)=\"print_OnClick(menuTrigger)\" [class.ltr-menu]=\"currentTableSetting.direction !== 'rtl'\">\r\n    <span>{{ languagePack.menuLabels.printTable }}</span>\r\n  </button>\r\n</mat-menu>\r\n\r\n<!-- Column Setting Sub Menu -->\r\n\r\n<mat-menu #columnMenu=\"matMenu\">\r\n  <ng-container\r\n    *ngIf=\"currentTableSetting?.columnSetting?.length > 0; else noColumns\">\r\n    <div\r\n      class=\"va-mat-table-dragable-container\"\r\n      cdkDropList\r\n      dkDropListLockAxis=\"y\"\r\n      cdkDropListOrientation=\"vertical\"\r\n      dir=\"ltr\">\r\n      <div\r\n        *ngFor=\"let column of currentTableSetting.columnSetting; let i = index\"\r\n        (click)=\"$event.stopPropagation(); $event.preventDefault()\"\r\n        class=\"dragable-row\"\r\n        cdkDrag\r\n        [cdkDragData]=\"{ columnIndex: i, columnTitle: column.header }\"\r\n        (cdkDragDropped)=\"columnMenuDropped($event)\">        \r\n        <mat-icon cdkDragHandle>drag_indicator</mat-icon>\r\n        <mat-checkbox\r\n          [disabled]=\"column?.display === 'prevent-hidden'\"\r\n          [checked]=\"column?.display === 'visible'\"\r\n          (click)=\"$event.stopPropagation()\"\r\n          (change)=\"toggleSelectedColumn(column.index)\">\r\n          {{ column.header }}\r\n        </mat-checkbox> \r\n        <mat-icon class=\"column-setting-button\" (click)=\"setting_onClick(i)\" #menuTrigger=\"matMenuTrigger\"  [matMenuTriggerFor]=\"columnSettingMenu\">settings</mat-icon>\r\n        <!-- <button\r\n          mat-icon-button\r\n          class=\"column-setting-button\"\r\n          (click)=\"setting_onClick(i)\">\r\n          <mat-icon (click)=\"setting_onClick(i)\" #menuTrigger=\"matMenuTrigger\"  [matMenuTriggerFor]=\"columnSettingMenu\">settings</mat-icon>\r\n        </button> -->\r\n\r\n        <div class=\"va-mat-table-drag-preview\" *cdkDragPreview>\r\n          <mat-icon>drag_indicator</mat-icon>\r\n          <mat-checkbox [checked]=\"column?.display === 'visible'\">\r\n            {{ column.header }}\r\n          </mat-checkbox>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div style=\"border-top: solid 1px #e7e7e7\">\r\n      <button\r\n        mat-menu-item\r\n        color=\"primary\"\r\n        class=\"done-setting\"\r\n        (click)=\"apply_OnClick($event)\">\r\n        <mat-icon color=\"primary\">done</mat-icon>\r\n      </button>\r\n      <button\r\n        mat-menu-item\r\n        color=\"primary\"\r\n        class=\"done-setting\"\r\n        (click)=\"cancel_OnClick()\">\r\n        <mat-icon color=\"primary\">clear</mat-icon>\r\n      </button>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-template #noColumns>\r\n    <div mat-menu-item>\r\n      {{ languagePack.menuLabels.thereIsNoColumn }}\r\n    </div>\r\n  </ng-template>\r\n</mat-menu>\r\n\r\n<mat-menu\r\n  #columnSettingMenu=\"matMenu\"\r\n  [overlapTrigger]=\"false\"\r\n  style=\"padding: 10px !important\">\r\n  <div\r\n    *ngIf=\"currentColumn !== null\"\r\n    (click)=\"$event.stopPropagation(); $event.preventDefault()\"\r\n    class=\"column-setting\">\r\n    <ng-container\r\n      *ngIf=\"isVisible(currentTableSetting?.visibaleActionMenu?.columnSettingFilter)\">\r\n      <div class=\"column-setting-header column-setting-header-first\">\r\n        <mat-icon color=\"primary\">filter_alt</mat-icon>{{ languagePack.menuLabels.filterMode }}\r\n      </div>\r\n      <mat-radio-group class=\"radio\" [(ngModel)]=\"currentTableSetting.columnSetting[currentColumn].filter\">\r\n        <mat-radio-button value='client-side' (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.filterLocalMode }}</mat-radio-button>\r\n        <mat-radio-button value='server-side' (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.filterServerMode }}</mat-radio-button>\r\n      </mat-radio-group>\r\n    </ng-container>\r\n\r\n    <ng-container\r\n      *ngIf=\"isVisible(currentTableSetting?.visibaleActionMenu?.columnSettingSort)\">\r\n      <div class=\"column-setting-header\">\r\n        <mat-icon color=\"primary\">sort</mat-icon>{{ languagePack.menuLabels.sortMode }}\r\n      </div>\r\n      <mat-radio-group class=\"radio\" [(ngModel)]=\"currentTableSetting.columnSetting[currentColumn].sort\">\r\n        <mat-radio-button value='client-side' (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.sortLocalMode }}</mat-radio-button>\r\n        <mat-radio-button value='server-side' (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.sortServerMode }}</mat-radio-button>\r\n      </mat-radio-group>\r\n    </ng-container>\r\n\r\n    <ng-container \r\n      *ngIf=\"isVisible(currentTableSetting?.visibaleActionMenu?.columnSettingFilter)\">\r\n      <div class=\"column-setting-header\">\r\n        <mat-icon color=\"primary\">print</mat-icon>{{ languagePack.menuLabels.printMode }}\r\n      </div>\r\n      <mat-radio-group class=\"radio\" [(ngModel)]=\"currentTableSetting.columnSetting[currentColumn].printable\">\r\n        <mat-radio-button [value]=\"true\" (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.printYesMode }}</mat-radio-button>\r\n        <mat-radio-button [value]=\"false\" (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.printNoMode }}</mat-radio-button>\r\n      </mat-radio-group>\r\n    </ng-container>\r\n\r\n    <ng-container\r\n      *ngIf=\"isVisible(currentTableSetting?.visibaleActionMenu?.columnSettingPin)\">\r\n      <div class=\"column-setting-header\">\r\n        <mat-icon color=\"primary\">push_pin</mat-icon>{{ languagePack.menuLabels.pinMode }}\r\n      </div>\r\n      <mat-radio-group class=\"radio\" [(ngModel)]=\"currentTableSetting.columnSetting[currentColumn].sticky\">\r\n        <mat-radio-button value='none' (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.pinNoneMode }}</mat-radio-button>\r\n        <mat-radio-button value='start' (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.pinStartMode }}</mat-radio-button>\r\n        <mat-radio-button value='end' (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.pinEndMode }}</mat-radio-button>\r\n      </mat-radio-group>\r\n    </ng-container>\r\n  </div>\r\n</mat-menu>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:flex;align-items:center;justify-content:space-between}.ltr-menu span{float:left}.main-menu{width:38px!important;line-height:24px!important}.va-mat-button-no-input{border:none;background-color:transparent;outline:0}.va-mat-table-dragable-container{min-width:200px;padding:8px 0;-webkit-user-select:none;-moz-user-select:none;user-select:none}.va-mat-table-dragable-container:dir(rtl){background-color:green!important}.dragable-row mat-checkbox{width:100%;line-height:28px;display:inline-flex}.va-mat-table-dragable-container .dragable-row{background-color:#fff;display:flex;width:100%;height:30px;font-size:14px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.column-setting-button{cursor:pointer!important;font-size:24px;margin-right:5px}.va-mat-table-dragable-container .dragable-row mat-icon{line-height:30px;opacity:.15;transition:opacity .5s;color:#616161;cursor:-webkit-grab;cursor:grab;background-color:#fff}.va-mat-table-dragable-container .dragable-row:hover mat-icon{opacity:1}.va-mat-table-drag-preview{direction:ltr;background-color:#ececec;padding:4px 8px 4px 4px!important;cursor:-webkit-grabbing!important;cursor:grabbing!important;margin-top:-4px;margin-left:-4px;font-size:14px;border-radius:5px}.va-mat-table-drag-preview mat-checkbox,.va-mat-table-drag-preview mat-icon{vertical-align:top}.va-mat-table-drag-preview mat-icon{padding-left:4px;color:#616161}.cdk-drop-list-dragging .cdk-drag{transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag-animating{transition:transform .3s cubic-bezier(0,0,.2,1)}.done-setting{width:50%!important;display:inline-flex;text-align:center;height:42px}.done-setting mat-icon{line-height:38px!important;opacity:.6;transition:opacity .5s;color:#616161;width:100%;text-align:center;margin:0}.done-setting mat-icon:hover{opacity:1}.column-setting{font-family:Roboto,\"Helvetica Neue\",sans-serif;padding:10px}.column-setting .radio{width:100%;display:flex;font-size:12px;margin-top:-2px}.column-setting .radio mat-radio-button{padding:5px;width:50%}.column-setting .radio mat-radio-button:last-child{margin-right:10px}.column-setting .column-setting-header{line-height:30px;padding:5px 5px 0;font-size:14px;border-top:1px solid #f3f3f3;margin-top:5px}.column-setting .column-setting-header mat-icon{opacity:.7;font-size:22px;line-height:30px;float:right;color:#616161}.column-setting-header:first-child{border-top:none!important;padding:0 5px!important;margin-top:-5px!important}.first-menu-item{width:100px;display:inline-block;text-align:left}::ng-deep [dir=rtl] .mat-checkbox-inner-container{margin-left:auto!important;margin-right:5px!important}.mat-menu-item{display:inline-flex}.mat-menu-item span{width:100%}.mat-menu-item mat-icon{line-height:48px!important}"]
            }]
    }], function () { return [{ type: TableIntl }, { type: TableService }]; }, { menuActionChange: [{
            type: Output
        }], tableSetting: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    TableMenuComponent.prototype.menuActionChange;
    /** @type {?} */
    TableMenuComponent.prototype.currentColumn;
    /** @type {?} */
    TableMenuComponent.prototype.reverseDirection;
    /** @type {?} */
    TableMenuComponent.prototype.originalTableSetting;
    /** @type {?} */
    TableMenuComponent.prototype.currentTableSetting;
    /** @type {?} */
    TableMenuComponent.prototype.languagePack;
    /** @type {?} */
    TableMenuComponent.prototype.tableService;
}
/**
 * @record
 */
function TableMenuActionChange() { }
if (false) {
    /** @type {?} */
    TableMenuActionChange.prototype.type;
    /** @type {?|undefined} */
    TableMenuActionChange.prototype.data;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/table-menu/table-menu.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const components$1 = [TableMenuComponent];
class TableMenuModule {
}
TableMenuModule.ɵfac = function TableMenuModule_Factory(t) { return new (t || TableMenuModule)(); };
TableMenuModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TableMenuModule });
TableMenuModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            FormsModule,
            MatButtonModule,
            MatCheckboxModule,
            MatIconModule,
            DragDropModule,
            MatMenuModule,
            MatRadioModule,
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TableMenuModule, [{
        type: NgModule,
        args: [{
                declarations: [components$1],
                exports: components$1,
                imports: [
                    CommonModule,
                    FormsModule,
                    MatButtonModule,
                    MatCheckboxModule,
                    MatIconModule,
                    DragDropModule,
                    MatMenuModule,
                    MatRadioModule,
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TableMenuModule, { declarations: function () { return [TableMenuComponent]; }, imports: function () { return [CommonModule,
        FormsModule,
        MatButtonModule,
        MatCheckboxModule,
        MatIconModule,
        DragDropModule,
        MatMenuModule,
        MatRadioModule]; }, exports: function () { return [TableMenuComponent]; } }); })();

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/filter/filter-event.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterEventDirective {
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
        e.stopPropagation();
        e.preventDefault();
        return false;
    }
}
FilterEventDirective.ɵfac = function FilterEventDirective_Factory(t) { return new (t || FilterEventDirective)(); };
FilterEventDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FilterEventDirective, selectors: [["", "filter-event", ""]], hostBindings: function FilterEventDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function FilterEventDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } } });
FilterEventDirective.propDecorators = {
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FilterEventDirective, [{
        type: Directive,
        args: [{
                selector: '[filter-event]'
            }]
    }], null, { 
    /**
     * @param {?} e
     * @return {?}
     */
    onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/filter/header-filter.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const components$2 = [HeaderFilterComponent, FilterEventDirective];
class HeaderFilterModule {
}
HeaderFilterModule.ɵfac = function HeaderFilterModule_Factory(t) { return new (t || HeaderFilterModule)(); };
HeaderFilterModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HeaderFilterModule });
HeaderFilterModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            MatFormFieldModule,
            MatIconModule,
            MatInputModule,
            MatMenuModule,
            MatSelectModule,
            ReactiveFormsModule,
            MatButtonModule,
            FormsModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderFilterModule, [{
        type: NgModule,
        args: [{
                declarations: components$2,
                exports: components$2,
                imports: [
                    CommonModule,
                    MatFormFieldModule,
                    MatIconModule,
                    MatInputModule,
                    MatMenuModule,
                    MatSelectModule,
                    ReactiveFormsModule,
                    MatButtonModule,
                    FormsModule
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HeaderFilterModule, { declarations: function () { return [HeaderFilterComponent, FilterEventDirective]; }, imports: function () { return [CommonModule,
        MatFormFieldModule,
        MatIconModule,
        MatInputModule,
        MatMenuModule,
        MatSelectModule,
        ReactiveFormsModule,
        MatButtonModule,
        FormsModule]; }, exports: function () { return [HeaderFilterComponent, FilterEventDirective]; } }); })();

/**
 * @fileoverview added by tsickle
 * Generated from: lib/cores/fixed-size-table-virtual-scroll-strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function TSVStrategyConfigs() { }
if (false) {
    /** @type {?} */
    TSVStrategyConfigs.prototype.rowHeight;
    /** @type {?} */
    TSVStrategyConfigs.prototype.headerHeight;
    /** @type {?} */
    TSVStrategyConfigs.prototype.footerHeight;
    /** @type {?} */
    TSVStrategyConfigs.prototype.bufferMultiplier;
}
class FixedSizeTableVirtualScrollStrategy {
    constructor() {
        this.length = 0;
        this.indexChange = new Subject();
        this.stickyChange = new Subject();
        this.scrollStrategyMode = 'fixed-size';
        this.renderedRangeStream = new BehaviorSubject({ start: 0, end: 0 });
        this.offsetChange = new BehaviorSubject(0);
        this.scrolledIndexChange = this.indexChange.pipe(distinctUntilChanged());
    }
    /**
     * @return {?}
     */
    get dataLength() {
        return this.length;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dataLength(value) {
        this.length = value;
        this.onDataLengthChanged();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.eventsSubscription.unsubscribe();
    }
    /**
     * @param {?} viewport
     * @return {?}
     */
    attach(viewport) {
        this.viewport = viewport;
        this.eventsSubscription = this.viewport.renderedRangeStream.subscribe(this.renderedRangeStream);
        this.onDataLengthChanged();
    }
    /**
     * @return {?}
     */
    detach() {
        this.indexChange.complete();
        this.stickyChange.complete();
        this.renderedRangeStream.complete();
    }
    /**
     * @return {?}
     */
    onContentScrolled() {
        this.updateContent();
    }
    /**
     * @return {?}
     */
    onDataLengthChanged() {
        if (this.viewport) {
            this.viewport.setTotalContentSize(this.dataLength * this.rowHeight + this.headerHeight + this.footerHeight);
        }
        this.updateContent();
    }
    /**
     * @return {?}
     */
    onContentRendered() {
        // no-op
    }
    /**
     * @return {?}
     */
    onRenderedOffsetChanged() {
        // no-op
    }
    /**
     * @param {?} index
     * @param {?} behavior
     * @return {?}
     */
    scrollToIndex(index, behavior) {
        // if (this.viewport) {
        //   this.viewport.scrollToOffset( this.rowHeight * index , behavior);
        // }    
        if (!this.viewport || !this.rowHeight) {
            return;
        }
        this.viewport.scrollToOffset((index - 1) * this.rowHeight + this.headerHeight);
    }
    /**
     * @param {?} configs
     * @return {?}
     */
    setConfig(configs) {
        const { rowHeight, headerHeight, footerHeight, bufferMultiplier } = configs;
        if (this.rowHeight === rowHeight
            && this.headerHeight === headerHeight
            && this.footerHeight === footerHeight
            && this.bufferMultiplier === bufferMultiplier) {
            return;
        }
        this.rowHeight = rowHeight;
        this.headerHeight = headerHeight;
        this.footerHeight = footerHeight;
        this.bufferMultiplier = bufferMultiplier;
        this.onDataLengthChanged();
    }
    // bug fixed some time viewport is zero height (i dont know why!)
    /**
     * @return {?}
     */
    getViewportSize() {
        if (this.viewport.getViewportSize() === 0) {
            return this.viewport.elementRef.nativeElement.clientHeight + 52;
        }
        else {
            return this.viewport.getViewportSize();
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateContent() {
        if (!this.viewport || !this.rowHeight) {
            return;
        }
        /** @type {?} */
        let start = 0;
        /** @type {?} */
        let end = this.dataLength;
        if (this.scrollStrategyMode === 'none' && this.viewport.getRenderedRange().start === start && this.viewport.getRenderedRange().end === end) {
            return;
        }
        /** @type {?} */
        const scrollOffset = this.viewport.measureScrollOffset();
        /** @type {?} */
        const amount = Math.ceil(this.getViewportSize() / this.rowHeight);
        /** @type {?} */
        const offset = Math.max(scrollOffset - this.headerHeight, 0);
        /** @type {?} */
        const buffer = Math.ceil(amount * this.bufferMultiplier);
        /** @type {?} */
        const skip = Math.round(offset / this.rowHeight);
        /** @type {?} */
        const index = Math.max(0, skip);
        if (this.scrollStrategyMode === 'fixed-size') {
            start = Math.max(0, index - buffer);
            end = Math.min(this.dataLength, index + amount + buffer);
        }
        /** @type {?} */
        const renderedOffset = start * this.rowHeight;
        this.viewport.setRenderedContentOffset(renderedOffset);
        this.viewport.setRenderedRange({ start, end });
        this.indexChange.next(index);
        this.stickyChange.next(renderedOffset);
        this.offsetChange.next(offset);
    }
}
FixedSizeTableVirtualScrollStrategy.ɵfac = function FixedSizeTableVirtualScrollStrategy_Factory(t) { return new (t || FixedSizeTableVirtualScrollStrategy)(); };
FixedSizeTableVirtualScrollStrategy.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FixedSizeTableVirtualScrollStrategy, factory: FixedSizeTableVirtualScrollStrategy.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FixedSizeTableVirtualScrollStrategy, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    FixedSizeTableVirtualScrollStrategy.prototype.eventsSubscription;
    /**
     * @type {?}
     * @private
     */
    FixedSizeTableVirtualScrollStrategy.prototype.length;
    /**
     * @type {?}
     * @private
     */
    FixedSizeTableVirtualScrollStrategy.prototype.rowHeight;
    /**
     * @type {?}
     * @private
     */
    FixedSizeTableVirtualScrollStrategy.prototype.headerHeight;
    /**
     * @type {?}
     * @private
     */
    FixedSizeTableVirtualScrollStrategy.prototype.footerHeight;
    /**
     * @type {?}
     * @private
     */
    FixedSizeTableVirtualScrollStrategy.prototype.bufferMultiplier;
    /**
     * @type {?}
     * @private
     */
    FixedSizeTableVirtualScrollStrategy.prototype.indexChange;
    /** @type {?} */
    FixedSizeTableVirtualScrollStrategy.prototype.stickyChange;
    /** @type {?} */
    FixedSizeTableVirtualScrollStrategy.prototype.scrollStrategyMode;
    /** @type {?} */
    FixedSizeTableVirtualScrollStrategy.prototype.viewport;
    /** @type {?} */
    FixedSizeTableVirtualScrollStrategy.prototype.renderedRangeStream;
    /** @type {?} */
    FixedSizeTableVirtualScrollStrategy.prototype.offsetChange;
    /** @type {?} */
    FixedSizeTableVirtualScrollStrategy.prototype.scrolledIndexChange;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/cores/table-item-size.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} tableDir
 * @return {?}
 */
function _tableVirtualScrollDirectiveStrategyFactory(tableDir) {
    return tableDir.scrollStrategy;
}
/** @type {?} */
const stickyHeaderSelector = '.mat-header-row .mat-table-sticky';
/** @type {?} */
const stickyFooterSelector = '.mat-footer-row .mat-table-sticky';
/** @type {?} */
const defaults = {
    rowHeight: 48,
    headerHeight: 56,
    headerEnabled: true,
    footerHeight: 48,
    footerEnabled: false,
    bufferMultiplier: 0.7
};
class TableItemSizeDirective {
    /**
     * @param {?} zone
     */
    constructor(zone) {
        this.zone = zone;
        this.alive = true;
        // tslint:disable-next-line:no-input-rename
        this.rowHeight = defaults.rowHeight;
        this.headerEnabled = defaults.headerEnabled;
        this.headerHeight = defaults.headerHeight;
        this.footerEnabled = defaults.footerEnabled;
        this.footerHeight = defaults.footerHeight;
        this.bufferMultiplier = defaults.bufferMultiplier;
        // @Output() requestRendering: EventEmitter<any> = new EventEmitter();
        this.scrollStrategy = new FixedSizeTableVirtualScrollStrategy();
        this.dataSourceChanges = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.alive = false;
        this.dataSourceChanges.complete();
    }
    /**
     * @private
     * @return {?}
     */
    isAlive() {
        return (/**
         * @return {?}
         */
        () => this.alive);
    }
    /**
     * @private
     * @return {?}
     */
    isStickyEnabled() {
        return !!this.scrollStrategy.viewport && ((/** @type {?} */ (((/** @type {?} */ (this.table)))._headerRowDefs)))
            .map((/**
         * @param {?} def
         * @return {?}
         */
        def => def.sticky))
            .reduce((/**
         * @param {?} prevState
         * @param {?} state
         * @return {?}
         */
        (prevState, state) => prevState && state), true);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        /** @type {?} */
        const switchDataSourceOrigin = ((/** @type {?} */ (this.table)))._switchDataSource;
        ((/** @type {?} */ (this.table)))._switchDataSource = (/**
         * @param {?} dataSource
         * @return {?}
         */
        (dataSource) => {
            switchDataSourceOrigin.call(this.table, dataSource);
            this.connectDataSource(dataSource);
        });
        this.connectDataSource(this.table.dataSource);
        this.scrollStrategy.stickyChange
            .pipe(filter((/**
         * @return {?}
         */
        () => this.isStickyEnabled())), tap((/**
         * @return {?}
         */
        () => {
            if (!this.stickyPositions) {
                this.initStickyPositions();
            }
        })), takeWhile(this.isAlive()))
            .subscribe((/**
         * @param {?} stickyOffset
         * @return {?}
         */
        (stickyOffset) => {
            this.setSticky(stickyOffset);
        }));
    }
    /**
     * @param {?} dataSource
     * @return {?}
     */
    connectDataSource(dataSource) {
        this.dataSourceChanges.next();
        if (dataSource instanceof TableVirtualScrollDataSource) {
            dataSource
                .dataToRender$
                .pipe(distinctUntilChanged(), takeUntil(this.dataSourceChanges), takeWhile(this.isAlive()), tap((/**
             * @param {?} data
             * @return {?}
             */
            data => this.scrollStrategy.dataLength = data.length)), switchMap((/**
             * @param {?} data
             * @return {?}
             */
            data => this.scrollStrategy
                .renderedRangeStream
                .pipe(map((/**
             * @param {?} __0
             * @return {?}
             */
            ({ start, end }) => {
                // this.requestRendering.emit({from: start, to: end});
                return typeof start !== 'number' || typeof end !== 'number' ? data : data.slice(start, end);
            }))))))
                .subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.zone.run((/**
                 * @return {?}
                 */
                () => {
                    dataSource.dataOfRange$.next(data);
                }));
            }));
        }
        else {
            throw new Error('[tvsItemSize] requires TableVirtualScrollDataSource be set as [dataSource] of [mat-table]');
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        /** @type {?} */
        const config = {
            rowHeight: +this.rowHeight || defaults.rowHeight,
            headerHeight: this.headerEnabled ? +this.headerHeight || defaults.headerHeight : 0,
            footerHeight: this.footerEnabled ? +this.footerHeight || defaults.footerHeight : 0,
            bufferMultiplier: +this.bufferMultiplier || defaults.bufferMultiplier
        };
        this.scrollStrategy.setConfig(config);
    }
    // setSticky(offset) {
    //   // fixed bug when sticky true for header and one column. column scroll front of header. becuse of z-index
    //   let topOffset = -offset;
    //   this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll('mat-header-row.mat-table-sticky')
    //     .forEach((el: HTMLElement) => {
    //       el.style.top = `${topOffset}px`;
    //       topOffset += el.offsetHeight;
    //       if (el.style.zIndex !== null ) {
    //         el.style.zIndex = '1000';
    //       }
    //     });
    // }
    /**
     * @param {?} offset
     * @return {?}
     */
    setSticky(offset) {
        this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll(stickyHeaderSelector)
            .forEach((/**
         * @param {?} el
         * @return {?}
         */
        (el) => {
            /** @type {?} */
            const parent = el.parentElement;
            /** @type {?} */
            let baseOffset = 0;
            if (this.stickyPositions.has(parent)) {
                baseOffset = this.stickyPositions.get(parent);
            }
            el.style.top = `${baseOffset - offset}px`;
        }));
        this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll(stickyFooterSelector)
            .forEach((/**
         * @param {?} el
         * @return {?}
         */
        (el) => {
            /** @type {?} */
            const parent = el.parentElement;
            /** @type {?} */
            let baseOffset = 0;
            if (this.stickyPositions.has(parent)) {
                baseOffset = this.stickyPositions.get(parent);
            }
            el.style.bottom = `${-baseOffset + offset}px`;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    initStickyPositions() {
        this.stickyPositions = new Map();
        this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll(stickyHeaderSelector)
            .forEach((/**
         * @param {?} el
         * @return {?}
         */
        el => {
            /** @type {?} */
            const parent = el.parentElement;
            if (!this.stickyPositions.has(parent)) {
                this.stickyPositions.set(parent, parent.offsetTop);
            }
        }));
    }
}
TableItemSizeDirective.ɵfac = function TableItemSizeDirective_Factory(t) { return new (t || TableItemSizeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
TableItemSizeDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TableItemSizeDirective, selectors: [["cdk-virtual-scroll-viewport", "tvsItemSize", ""]], contentQueries: function TableItemSizeDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MatTable, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.table = _t.first);
    } }, inputs: { rowHeight: ["tvsItemSize", "rowHeight"], headerEnabled: "headerEnabled", headerHeight: "headerHeight", footerEnabled: "footerEnabled", footerHeight: "footerHeight", bufferMultiplier: "bufferMultiplier" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: VIRTUAL_SCROLL_STRATEGY,
                useFactory: _tableVirtualScrollDirectiveStrategyFactory,
                deps: [forwardRef(( /**
                         * @return {?}
                         */() => TableItemSizeDirective))]
            }]), ɵngcc0.ɵɵNgOnChangesFeature] });
/** @nocollapse */
TableItemSizeDirective.ctorParameters = () => [
    { type: NgZone }
];
TableItemSizeDirective.propDecorators = {
    rowHeight: [{ type: Input, args: ['tvsItemSize',] }],
    headerEnabled: [{ type: Input }],
    headerHeight: [{ type: Input }],
    footerEnabled: [{ type: Input }],
    footerHeight: [{ type: Input }],
    bufferMultiplier: [{ type: Input }],
    table: [{ type: ContentChild, args: [MatTable, { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TableItemSizeDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'cdk-virtual-scroll-viewport[tvsItemSize]',
                providers: [{
                        provide: VIRTUAL_SCROLL_STRATEGY,
                        useFactory: _tableVirtualScrollDirectiveStrategyFactory,
                        deps: [forwardRef(( /**
                                 * @return {?}
                                 */() => TableItemSizeDirective))]
                    }]
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }]; }, { rowHeight: [{
            type: Input,
            args: ['tvsItemSize']
        }], headerEnabled: [{
            type: Input
        }], headerHeight: [{
            type: Input
        }], footerEnabled: [{
            type: Input
        }], footerHeight: [{
            type: Input
        }], bufferMultiplier: [{
            type: Input
        }], table: [{
            type: ContentChild,
            args: [MatTable, { static: true }]
        }] }); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    TableItemSizeDirective.prototype.alive;
    /** @type {?} */
    TableItemSizeDirective.prototype.rowHeight;
    /** @type {?} */
    TableItemSizeDirective.prototype.headerEnabled;
    /** @type {?} */
    TableItemSizeDirective.prototype.headerHeight;
    /** @type {?} */
    TableItemSizeDirective.prototype.footerEnabled;
    /** @type {?} */
    TableItemSizeDirective.prototype.footerHeight;
    /** @type {?} */
    TableItemSizeDirective.prototype.bufferMultiplier;
    /** @type {?} */
    TableItemSizeDirective.prototype.table;
    /** @type {?} */
    TableItemSizeDirective.prototype.scrollStrategy;
    /** @type {?} */
    TableItemSizeDirective.prototype.dataSourceChanges;
    /**
     * @type {?}
     * @private
     */
    TableItemSizeDirective.prototype.stickyPositions;
    /**
     * @type {?}
     * @private
     */
    TableItemSizeDirective.prototype.zone;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/cores/table-virtual-scroll.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TableVirtualScrollModule {
}
TableVirtualScrollModule.ɵfac = function TableVirtualScrollModule_Factory(t) { return new (t || TableVirtualScrollModule)(); };
TableVirtualScrollModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TableVirtualScrollModule });
TableVirtualScrollModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TableVirtualScrollModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    TableItemSizeDirective
                ],
                imports: [],
                exports: [TableItemSizeDirective]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TableVirtualScrollModule, { declarations: [TableItemSizeDirective], exports: [TableItemSizeDirective] }); })();

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/extensions/toolbar/toolbar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ToolbarComponent {
    /**
     * @param {?} _el
     */
    constructor(_el) {
        this._el = _el;
        this.itemList = [];
        this.color = null;
        this.direction = 'ltr';
        this.actionClick = new EventEmitter();
        this.normalItemList = [];
        this.floatItemList = [];
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyup(e) {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.itemList && this.itemList) {
            this.normalItemList = this.itemList.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.float === undefined || item.float == false));
            this.floatItemList = this.itemList.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => (item === null || item === void 0 ? void 0 : item.float) == true));
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} item
     * @return {?}
     */
    item_onClick(item) {
        this.actionClick.emit(item);
    }
}
ToolbarComponent.ɵfac = function ToolbarComponent_Factory(t) { return new (t || ToolbarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ToolbarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ToolbarComponent, selectors: [["dm-toolbar"]], hostBindings: function ToolbarComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup", function ToolbarComponent_keyup_HostBindingHandler($event) { return ctx.onKeyup($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } }, inputs: { itemList: "itemList", color: "color", direction: "direction" }, outputs: { actionClick: "actionClick" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 6, consts: [[1, "toolbar"], ["class", "item", 4, "ngFor", "ngForOf"], [4, "ngFor", "ngForOf"], [1, "item"], ["class", "splitter", 4, "ngIf"], ["matRipple", "", "matTooltipClass", "custom-tooltip", 1, "toolbar-item", 3, "matRippleColor", "matTooltip", "click"], [3, "color", 4, "ngIf"], [1, "splitter"]], template: function ToolbarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ToolbarComponent_div_1_Template, 4, 4, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div");
        ɵngcc0.ɵɵtemplate(3, ToolbarComponent_div_3_Template, 4, 4, "div", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.normalItemList);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("float-right", ctx.direction === "ltr")("float-left", ctx.direction === "rtl");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.floatItemList);
    } }, directives: [ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc7.MatRipple, ɵngcc18.MatTooltip, ɵngcc6.MatIcon], styles: ["[_nghost-%COMP%]{background-image:linear-gradient(#f5f5f5,#e4e3e3,#fafafa);min-height:42px;border-radius:8px;border:1px solid #adadad;box-sizing:border-box;overflow:hidden}.toolbar[_ngcontent-%COMP%]{display:flex;align-items:center;flex-direction:row;align-self:stretch;height:calc(100% - 8px);margin-top:3px}.item[_ngcontent-%COMP%]{height:100%}.toolbar-item[_ngcontent-%COMP%]{width:34px;height:100%;border-radius:8px;background-color:#ffffffa6;border:1px solid #b0b0b0;margin-right:8px;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:pointer}.toolbar-item[_ngcontent-%COMP%]:hover{background-color:#fff!important}.toolbar-item[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{font-size:32px;height:100%;width:100%;text-align:center}.splitter[_ngcontent-%COMP%]{background-color:#b0b0b0;min-height:100%;min-width:2px;margin-right:8px;float:left;-webkit-user-select:none;-moz-user-select:none;user-select:none}  .custom-tooltip{background-color:#fff!important;color:#000!important;border:1px solid #adadad;margin-top:-1px!important;margin-left:5px!important;text-align:center!important;font-family:IRANSans;font-weight:700;font-size:12px;min-width:100px}.float-right[_ngcontent-%COMP%]{margin-left:auto;display:flex;height:100%}.float-right[_ngcontent-%COMP%]   .toolbar-item[_ngcontent-%COMP%]{margin-right:4px}.float-left[_ngcontent-%COMP%]{margin-right:auto;display:flex;height:100%}.float-left[_ngcontent-%COMP%]   .toolbar-item[_ngcontent-%COMP%]{margin-left:4px}"] });
/** @nocollapse */
ToolbarComponent.ctorParameters = () => [
    { type: ElementRef }
];
ToolbarComponent.propDecorators = {
    itemList: [{ type: Input }],
    color: [{ type: Input }],
    direction: [{ type: Input }],
    actionClick: [{ type: Output }],
    onKeyup: [{ type: HostListener, args: ['document:keyup', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToolbarComponent, [{
        type: Component,
        args: [{
                selector: 'dm-toolbar',
                template: "<div class=\"toolbar\">\n  <div *ngFor=\"let item of normalItemList\" class=\"item\">\n    <a *ngIf=\"item?.splitter\" class=\"splitter\"></a>\n    <div  \n      matRipple\n      [matRippleColor]=\"color\"\n      class=\"toolbar-item\"\n      (click)=\"item_onClick(item)\"    \n      [matTooltip]=\"item?.tooltip\" \n      matTooltipClass=\"custom-tooltip\">  \n      <mat-icon *ngIf=\"item.matIcon\" [style.color]=\"item?.matIconColor\">{{\n        item.matIcon\n      }}</mat-icon>\n    </div>\n  </div>\n  <div [class.float-right]=\"direction === 'ltr'\" [class.float-left]=\"direction === 'rtl'\">\n    <div *ngFor=\"let item of floatItemList\">\n      <a *ngIf=\"item?.splitter\" class=\"splitter\"></a>\n      <div  \n        matRipple\n        [matRippleColor]=\"color\"\n        class=\"toolbar-item\"\n        (click)=\"item_onClick(item)\"    \n        [matTooltip]=\"item?.tooltip\" \n        matTooltipClass=\"custom-tooltip\">  \n        <mat-icon *ngIf=\"item.matIcon\" [style.color]=\"item?.matIconColor\">\n          {{item.matIcon}}</mat-icon>\n      </div>\n    </div>\n  </div>\n</div> \n<!-- {{ _el?.nativeElement?.scrollWidth}} \n{{ _el?.nativeElement?.offsetWidth}}  -->",
                styles: [":host{background-image:linear-gradient(#f5f5f5,#e4e3e3,#fafafa);min-height:42px;border-radius:8px;border:1px solid #adadad;box-sizing:border-box;overflow:hidden}.toolbar{display:flex;align-items:center;flex-direction:row;align-self:stretch;height:calc(100% - 8px);margin-top:3px}.item{height:100%}.toolbar-item{width:34px;height:100%;border-radius:8px;background-color:#ffffffa6;border:1px solid #b0b0b0;margin-right:8px;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:pointer}.toolbar-item:hover{background-color:#fff!important}.toolbar-item mat-icon{font-size:32px;height:100%;width:100%;text-align:center}.splitter{background-color:#b0b0b0;min-height:100%;min-width:2px;margin-right:8px;float:left;-webkit-user-select:none;-moz-user-select:none;user-select:none}::ng-deep .custom-tooltip{background-color:#fff!important;color:#000!important;border:1px solid #adadad;margin-top:-1px!important;margin-left:5px!important;text-align:center!important;font-family:IRANSans;font-weight:700;font-size:12px;min-width:100px}.float-right{margin-left:auto;display:flex;height:100%}.float-right .toolbar-item{margin-right:4px}.float-left{margin-right:auto;display:flex;height:100%}.float-left .toolbar-item{margin-left:4px}"]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { itemList: [{
            type: Input
        }], color: [{
            type: Input
        }], direction: [{
            type: Input
        }], actionClick: [{
            type: Output
        }], 
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyup: [{
            type: HostListener,
            args: ['document:keyup', ['$event']]
        }] }); })();
if (false) {
    /** @type {?} */
    ToolbarComponent.prototype.itemList;
    /** @type {?} */
    ToolbarComponent.prototype.color;
    /** @type {?} */
    ToolbarComponent.prototype.direction;
    /** @type {?} */
    ToolbarComponent.prototype.actionClick;
    /** @type {?} */
    ToolbarComponent.prototype.normalItemList;
    /** @type {?} */
    ToolbarComponent.prototype.floatItemList;
    /** @type {?} */
    ToolbarComponent.prototype._el;
}
/**
 * @record
 */
function ToolbarItem() { }
if (false) {
    /** @type {?} */
    ToolbarItem.prototype.id;
    /** @type {?|undefined} */
    ToolbarItem.prototype.name;
    /** @type {?|undefined} */
    ToolbarItem.prototype.tooltip;
    /** @type {?|undefined} */
    ToolbarItem.prototype.matIcon;
    /** @type {?|undefined} */
    ToolbarItem.prototype.matIconColor;
    /** @type {?|undefined} */
    ToolbarItem.prototype.svgIcon;
    /** @type {?|undefined} */
    ToolbarItem.prototype.splitter;
    /** @type {?|undefined} */
    ToolbarItem.prototype.disable;
    /** @type {?|undefined} */
    ToolbarItem.prototype.float;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-mat-table/dynamic-mat-table.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} compilerFactory
 * @return {?}
 */
function createCompiler(compilerFactory) {
    return compilerFactory.createCompiler();
}
/**
 * @param {?} tableIntl
 * @return {?}
 */
function paginatorLabels(tableIntl) {
    /** @type {?} */
    const paginatorIntl = new MatPaginatorIntl();
    // paginatorIntl.itemsPerPageLabel = 'آیتم در هر صفحه:';
    // paginatorIntl.nextPageLabel = 'صفحه بعد';
    // paginatorIntl.previousPageLabel = 'صفحه قبل';
    paginatorIntl.getRangeLabel = paginatorIntl.getRangeLabel;
    return paginatorIntl || null;
}
/** @type {?} */
const ExtentionsModule = [HeaderFilterModule, RowMenuModule];
const ɵ0 = {};
class DynamicMatTableModule {
}
DynamicMatTableModule.ɵfac = function DynamicMatTableModule_Factory(t) { return new (t || DynamicMatTableModule)(); };
DynamicMatTableModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DynamicMatTableModule });
DynamicMatTableModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        // bugfixed in library compiler not load and must create library
        { provide: COMPILER_OPTIONS, useValue: ɵ0, multi: true },
        { provide: CompilerFactory, useClass: JitCompilerFactory, deps: [COMPILER_OPTIONS] },
        { provide: Compiler, useFactory: createCompiler, deps: [CompilerFactory] },
        TableIntl,
        {
            provide: MatPaginatorIntl,
            useFactory: paginatorLabels,
            deps: [TableIntl]
        },
    ], imports: [[
            CommonModule,
            MatTableModule,
            ScrollingModule,
            TableVirtualScrollModule,
            MatCheckboxModule,
            MatFormFieldModule,
            MatInputModule,
            MatSortModule,
            MatProgressBarModule,
            MatIconModule,
            DragDropModule,
            TableMenuModule,
            MatPaginatorModule,
            MatDialogModule,
            MatButtonModule,
            MatMenuModule,
            MatDividerModule,
            MatTooltipModule,
            MatRippleModule,
            ExtentionsModule,
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicMatTableModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MatTableModule,
                    ScrollingModule,
                    TableVirtualScrollModule,
                    MatCheckboxModule,
                    MatFormFieldModule,
                    MatInputModule,
                    MatSortModule,
                    MatProgressBarModule,
                    MatIconModule,
                    DragDropModule,
                    TableMenuModule,
                    MatPaginatorModule,
                    MatDialogModule,
                    MatButtonModule,
                    MatMenuModule,
                    MatDividerModule,
                    MatTooltipModule,
                    MatRippleModule,
                    ExtentionsModule,
                ],
                exports: [DynamicMatTableComponent, ToolbarComponent],
                providers: [
                    // bugfixed in library compiler not load and must create library
                    { provide: COMPILER_OPTIONS, useValue: ɵ0, multi: true },
                    { provide: CompilerFactory, useClass: JitCompilerFactory, deps: [COMPILER_OPTIONS] },
                    { provide: Compiler, useFactory: createCompiler, deps: [CompilerFactory] },
                    TableIntl,
                    {
                        provide: MatPaginatorIntl,
                        useFactory: paginatorLabels,
                        deps: [TableIntl]
                    },
                ],
                declarations: [
                    DynamicMatTableComponent,
                    PrintTableDialogComponent,
                    ToolbarComponent,
                    TableCoreDirective,
                    DynamicCellDirective
                ],
                entryComponents: [PrintTableDialogComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DynamicMatTableModule, { declarations: function () { return [DynamicMatTableComponent, PrintTableDialogComponent, ToolbarComponent, TableCoreDirective, DynamicCellDirective]; }, imports: function () { return [CommonModule,
        MatTableModule,
        ScrollingModule, TableVirtualScrollModule, MatCheckboxModule,
        MatFormFieldModule,
        MatInputModule,
        MatSortModule,
        MatProgressBarModule,
        MatIconModule,
        DragDropModule, TableMenuModule, MatPaginatorModule,
        MatDialogModule,
        MatButtonModule,
        MatMenuModule,
        MatDividerModule,
        MatTooltipModule,
        MatRippleModule, HeaderFilterModule, RowMenuModule]; }, exports: function () { return [DynamicMatTableComponent, ToolbarComponent]; } }); })();

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/language-pack.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function LanguagePack() { }
if (false) {
    /** @type {?} */
    LanguagePack.prototype.tableLabels;
    /** @type {?} */
    LanguagePack.prototype.filterLabels;
    /** @type {?} */
    LanguagePack.prototype.paginatorLabels;
    /** @type {?} */
    LanguagePack.prototype.menuLabels;
}
/**
 * @record
 */
function TableLabels() { }
if (false) {
    /** @type {?} */
    TableLabels.prototype.NoData;
}
/**
 * @record
 */
function PaginatorLabels() { }
if (false) {
    /** @type {?} */
    PaginatorLabels.prototype.itemsPerPageLabel;
    /** @type {?} */
    PaginatorLabels.prototype.nextPageLabel;
    /** @type {?} */
    PaginatorLabels.prototype.previousPageLabel;
    /** @type {?} */
    PaginatorLabels.prototype.firstPageLabel;
    /** @type {?} */
    PaginatorLabels.prototype.lastPageLabel;
    /** @type {?} */
    PaginatorLabels.prototype.getRangeLabel;
}
/**
 * @record
 */
function FilterLabels() { }
if (false) {
    /** @type {?} */
    FilterLabels.prototype.Clear;
    /** @type {?} */
    FilterLabels.prototype.Search;
    /** @type {?} */
    FilterLabels.prototype.And;
    /** @type {?} */
    FilterLabels.prototype.Or;
    /** @type {?} */
    FilterLabels.prototype.Text;
    /** @type {?} */
    FilterLabels.prototype.TextContains;
    /** @type {?} */
    FilterLabels.prototype.TextEquals;
    /** @type {?} */
    FilterLabels.prototype.TextStartsWith;
    /** @type {?} */
    FilterLabels.prototype.TextEndsWith;
    /** @type {?} */
    FilterLabels.prototype.TextEmpty;
    /** @type {?} */
    FilterLabels.prototype.TextNotEmpty;
    /** @type {?} */
    FilterLabels.prototype.Number;
    /** @type {?} */
    FilterLabels.prototype.NumberEquals;
    /** @type {?} */
    FilterLabels.prototype.NumberNotEquals;
    /** @type {?} */
    FilterLabels.prototype.NumberGreaterThan;
    /** @type {?} */
    FilterLabels.prototype.NumberLessThan;
    /** @type {?} */
    FilterLabels.prototype.NumberEmpty;
    /** @type {?} */
    FilterLabels.prototype.NumberNotEmpty;
    /** @type {?} */
    FilterLabels.prototype.CategoryContains;
    /** @type {?} */
    FilterLabels.prototype.CategoryNotContains;
}
/**
 * @record
 */
function MenuLabels() { }
if (false) {
    /** @type {?} */
    MenuLabels.prototype.saveData;
    /** @type {?} */
    MenuLabels.prototype.columnSetting;
    /** @type {?} */
    MenuLabels.prototype.saveTableSetting;
    /** @type {?} */
    MenuLabels.prototype.fullScreen;
    /** @type {?} */
    MenuLabels.prototype.clearFilter;
    /** @type {?} */
    MenuLabels.prototype.jsonFile;
    /** @type {?} */
    MenuLabels.prototype.csvFile;
    /** @type {?} */
    MenuLabels.prototype.printTable;
    /** @type {?} */
    MenuLabels.prototype.filterMode;
    /** @type {?} */
    MenuLabels.prototype.filterLocalMode;
    /** @type {?} */
    MenuLabels.prototype.filterServerMode;
    /** @type {?} */
    MenuLabels.prototype.sortMode;
    /** @type {?} */
    MenuLabels.prototype.sortLocalMode;
    /** @type {?} */
    MenuLabels.prototype.sortServerMode;
    /** @type {?} */
    MenuLabels.prototype.printMode;
    /** @type {?} */
    MenuLabels.prototype.printYesMode;
    /** @type {?} */
    MenuLabels.prototype.printNoMode;
    /** @type {?} */
    MenuLabels.prototype.pinMode;
    /** @type {?} */
    MenuLabels.prototype.pinNoneMode;
    /** @type {?} */
    MenuLabels.prototype.pinStartMode;
    /** @type {?} */
    MenuLabels.prototype.pinEndMode;
    /** @type {?} */
    MenuLabels.prototype.thereIsNoColumn;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/context-menu.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function ContextMenuItem() { }
if (false) {
    /** @type {?} */
    ContextMenuItem.prototype.name;
    /** @type {?} */
    ContextMenuItem.prototype.text;
    /** @type {?} */
    ContextMenuItem.prototype.color;
    /** @type {?|undefined} */
    ContextMenuItem.prototype.icon;
    /** @type {?|undefined} */
    ContextMenuItem.prototype.disabled;
    /** @type {?|undefined} */
    ContextMenuItem.prototype.visible;
    /** @type {?|undefined} */
    ContextMenuItem.prototype.divider;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/table-row.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function TableRow() { }
if (false) {
    /** @type {?|undefined} */
    TableRow.prototype.id;
    /** @type {?|undefined} */
    TableRow.prototype.rowActionMenu;
    /** @type {?|undefined} */
    TableRow.prototype.option;
}
/**
 * @record
 */
function IRowEvent() { }
if (false) {
    /** @type {?} */
    IRowEvent.prototype.event;
    /** @type {?} */
    IRowEvent.prototype.sender;
}
/**
 * @record
 */
function ITableEvent() { }
if (false) {
    /** @type {?} */
    ITableEvent.prototype.event;
    /** @type {?} */
    ITableEvent.prototype.sender;
}
/**
 * @record
 * @template T
 */
function IRowActionMenuEvent() { }
if (false) {
    /** @type {?} */
    IRowActionMenuEvent.prototype.actionItem;
    /** @type {?} */
    IRowActionMenuEvent.prototype.rowItem;
}
/**
 * @record
 */
function RowOption() { }
if (false) {
    /** @type {?|undefined} */
    RowOption.prototype.style;
    /** @type {?|undefined} */
    RowOption.prototype.class;
    /** @type {?|undefined} */
    RowOption.prototype.selected;
    /** @type {?|undefined} */
    RowOption.prototype.expand;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/table-field.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 * @template R
 */
function TableField() { }
if (false) {
    /** @type {?|undefined} */
    TableField.prototype.classNames;
    /** @type {?|undefined} */
    TableField.prototype.rowClass;
    /** @type {?|undefined} */
    TableField.prototype.customSortFunction;
    /** @type {?|undefined} */
    TableField.prototype.customFilterFunction;
    /** @type {?|undefined} */
    TableField.prototype.toPrint;
    /** @type {?|undefined} */
    TableField.prototype.toExport;
}
/**
 * @record
 */
function AbstractField() { }
if (false) {
    /** @type {?|undefined} */
    AbstractField.prototype.index;
    /** @type {?} */
    AbstractField.prototype.name;
    /** @type {?|undefined} */
    AbstractField.prototype.type;
    /** @type {?|undefined} */
    AbstractField.prototype.width;
    /** @type {?|undefined} */
    AbstractField.prototype.header;
    /** @type {?|undefined} */
    AbstractField.prototype.isKey;
    /** @type {?|undefined} */
    AbstractField.prototype.inlineEdit;
    /** @type {?|undefined} */
    AbstractField.prototype.display;
    /** @type {?|undefined} */
    AbstractField.prototype.sticky;
    /** @type {?|undefined} */
    AbstractField.prototype.filter;
    /** @type {?|undefined} */
    AbstractField.prototype.sort;
    /** @type {?|undefined} */
    AbstractField.prototype.cellClass;
    /** @type {?|undefined} */
    AbstractField.prototype.cellStyle;
    /** @type {?|undefined} */
    AbstractField.prototype.icon;
    /** @type {?|undefined} */
    AbstractField.prototype.iconColor;
    /** @type {?|undefined} */
    AbstractField.prototype.dynamicCellComponent;
    /** @type {?|undefined} */
    AbstractField.prototype.draggable;
    /** @type {?|undefined} */
    AbstractField.prototype.filterable;
    /** @type {?|undefined} */
    AbstractField.prototype.sortable;
    /** @type {?|undefined} */
    AbstractField.prototype.clickable;
    /** @type {?|undefined} */
    AbstractField.prototype.printable;
    /** @type {?|undefined} */
    AbstractField.prototype.exportable;
    /** @type {?|undefined} */
    AbstractField.prototype.enableContextMenu;
    /** @type {?|undefined} */
    AbstractField.prototype.rowSelectionable;
    /** @type {?|undefined} */
    AbstractField.prototype.option;
    /** @type {?|undefined} */
    AbstractField.prototype.categoryData;
    /** @type {?|undefined} */
    AbstractField.prototype.toString;
    /** @type {?|undefined} */
    AbstractField.prototype.customSort;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/print-config.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function PrintConfig() { }
if (false) {
    /** @type {?|undefined} */
    PrintConfig.prototype.displayedFields;
    /** @type {?|undefined} */
    PrintConfig.prototype.title;
    /** @type {?|undefined} */
    PrintConfig.prototype.userPrintParameters;
    /** @type {?|undefined} */
    PrintConfig.prototype.tablePrintParameters;
    /** @type {?|undefined} */
    PrintConfig.prototype.showParameters;
    /** @type {?|undefined} */
    PrintConfig.prototype.data;
    /** @type {?|undefined} */
    PrintConfig.prototype.columns;
    /** @type {?|undefined} */
    PrintConfig.prototype.direction;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/table-pagination.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function TablePagination() { }
if (false) {
    /** @type {?|undefined} */
    TablePagination.prototype.length;
    /** @type {?|undefined} */
    TablePagination.prototype.pageIndex;
    /** @type {?|undefined} */
    TablePagination.prototype.pageSize;
    /** @type {?|undefined} */
    TablePagination.prototype.pageSizeOptions;
    /** @type {?|undefined} */
    TablePagination.prototype.showFirstLastButtons;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/table-setting.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function TableSetting() { }
if (false) {
    /** @type {?|undefined} */
    TableSetting.prototype.direction;
    /** @type {?|undefined} */
    TableSetting.prototype.columnSetting;
    /** @type {?|undefined} */
    TableSetting.prototype.visibaleActionMenu;
    /** @type {?|undefined} */
    TableSetting.prototype.visibleTableMenu;
    /** @type {?|undefined} */
    TableSetting.prototype.alternativeRowStyle;
    /** @type {?|undefined} */
    TableSetting.prototype.normalRowStyle;
    /** @type {?|undefined} */
    TableSetting.prototype.scrollStrategy;
    /** @type {?|undefined} */
    TableSetting.prototype.rowStyle;
    /** @type {?|undefined} */
    TableSetting.prototype.enableContextMenu;
}
/**
 * @record
 */
function VisibleActionMenu() { }
if (false) {
    /** @type {?|undefined} */
    VisibleActionMenu.prototype.json;
    /** @type {?|undefined} */
    VisibleActionMenu.prototype.csv;
    /** @type {?|undefined} */
    VisibleActionMenu.prototype.print;
    /** @type {?|undefined} */
    VisibleActionMenu.prototype.columnSettingPin;
    /** @type {?|undefined} */
    VisibleActionMenu.prototype.columnSettingOrder;
    /** @type {?|undefined} */
    VisibleActionMenu.prototype.columnSettingFilter;
    /** @type {?|undefined} */
    VisibleActionMenu.prototype.columnSettingSort;
    /** @type {?|undefined} */
    VisibleActionMenu.prototype.columnSettingPrint;
    /** @type {?|undefined} */
    VisibleActionMenu.prototype.saveTableSetting;
    /** @type {?|undefined} */
    VisibleActionMenu.prototype.clearFilter;
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: dynamic-mat-table.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DynamicCellDirective, DynamicMatTableComponent, DynamicMatTableModule, TableIntl, TableService, TableVirtualScrollDataSource, ToolbarComponent, cellTooltipDefaults, clone, copy, createCompiler, deepClone, expandAnimation, getObjectProp, isNullorUndefined, paginatorLabels, tableAnimation, textify, titleCase, TableCoreDirective as ɵa, HeaderFilterComponent as ɵb, TableVirtualScrollModule as ɵc, _tableVirtualScrollDirectiveStrategyFactory as ɵd, TableItemSizeDirective as ɵe, TableMenuModule as ɵf, TableMenuComponent as ɵg, HeaderFilterModule as ɵh, FilterEventDirective as ɵi, RowMenuModule as ɵj, RowMenuComponent as ɵk, PrintTableDialogComponent as ɵl };

//# sourceMappingURL=dynamic-mat-table.js.map