(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/material/table'), require('@angular/cdk/scrolling'), require('@angular/cdk/drag-drop'), require('@angular/cdk/collections'), require('@angular/material/sort'), require('@angular/material/paginator'), require('@angular/animations'), require('@angular/material/menu'), require('@angular/material/dialog'), require('@angular/cdk/overlay'), require('@angular/material/tooltip'), require('@angular/common'), require('@angular/material/icon'), require('@angular/material/input'), require('@angular/material/button'), require('@angular/material/checkbox'), require('@angular/material/form-field'), require('@angular/material/progress-bar'), require('@angular/material/divider'), require('@angular/forms'), require('@angular/material/radio'), require('@angular/material/select'), require('@angular/platform-browser-dynamic'), require('@angular/material/core')) :
    typeof define === 'function' && define.amd ? define('dynamic-mat-table', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/material/table', '@angular/cdk/scrolling', '@angular/cdk/drag-drop', '@angular/cdk/collections', '@angular/material/sort', '@angular/material/paginator', '@angular/animations', '@angular/material/menu', '@angular/material/dialog', '@angular/cdk/overlay', '@angular/material/tooltip', '@angular/common', '@angular/material/icon', '@angular/material/input', '@angular/material/button', '@angular/material/checkbox', '@angular/material/form-field', '@angular/material/progress-bar', '@angular/material/divider', '@angular/forms', '@angular/material/radio', '@angular/material/select', '@angular/platform-browser-dynamic', '@angular/material/core'], factory) :
    (global = global || self, factory(global['dynamic-mat-table'] = {}, global.ng.core, global.rxjs, global.rxjs.operators, global.ng.material.table, global.ng.cdk.scrolling, global.ng.cdk['drag-drop'], global.ng.cdk.collections, global.ng.material.sort, global.ng.material.paginator, global.ng.animations, global.ng.material.menu, global.ng.material.dialog, global.ng.cdk.overlay, global.ng.material.tooltip, global.ng.common, global.ng.material.icon, global.ng.material.input, global.ng.material.button, global.ng.material.checkbox, global.ng.material['form-field'], global.ng.material['progress-bar'], global.ng.material.divider, global.ng.forms, global.ng.material.radio, global.ng.material.select, global.ng.platformBrowserDynamic, global.ng.material.core));
}(this, (function (exports, core, rxjs, operators, table, scrolling, dragDrop, collections, sort, paginator, animations, menu, dialog, overlay, tooltip, common, icon, input, button, checkbox, formField, progressBar, divider, forms, radio, select, platformBrowserDynamic, core$1) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/cores/type.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    // |||||||||||||||||||||||||||||||||||||| Utils ||||||||||||||||||||||||||||||||||||||||||||||||||
    /**
     * check object is null or undefined
     * @param {?} value
     * @return {?}
     */
    function isNullorUndefined(value) {
        if (value === null || value === undefined) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * clone object but refrence variable not change
     * @template T
     * @param {?} obj
     * @return {?}
     */
    function clone(obj) {
        if (obj === null || obj === undefined) {
            return obj;
        }
        else if (Array.isArray(obj)) {
            /** @type {?} */
            var array_1 = [];
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return array_1.push(Object.assign({}, item)); }));
            return array_1;
        }
        else {
            return Object.assign({}, obj);
        }
    }
    /**
     * clone object and all refrence variable but may be there is a circle loop.
     * @template T
     * @param {?} obj
     * @return {?}
     */
    function deepClone(obj) {
        if (obj === null || obj === undefined) {
            return obj;
        }
        else if (Array.isArray(obj)) {
            /** @type {?} */
            var array_2 = [];
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return array_2.push(deepClone(item)); }));
            return (/** @type {?} */ (array_2));
        }
        else {
            /** @type {?} */
            var c_1 = Object.assign((/** @type {?} */ ({})), obj);
            /** @type {?} */
            var fields = Object.getOwnPropertyNames(obj);
            fields.forEach((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                /** @type {?} */
                var field = obj[f];
                if (field !== null && typeof field === 'object') {
                    c_1[f] = deepClone(field);
                }
            }));
            return c_1;
        }
    }
    /**
     * @param {?} fieldName
     * @param {?} defaultValue
     * @param {...?} variable
     * @return {?}
     */
    function getObjectProp(fieldName, defaultValue) {
        var variable = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            variable[_i - 2] = arguments[_i];
        }
        for (var v in variable) {
            if (variable[v] && !isNullorUndefined(variable[v][fieldName])) {
                return variable[v][fieldName];
            }
        }
        return defaultValue;
    }
    /**
     * @param {?} from
     * @param {?} to
     * @param {?=} forced
     * @param {?=} nullSkip
     * @param {?=} undefinedSkip
     * @return {?}
     */
    function copy(from, to, forced, nullSkip, undefinedSkip) {
        if (forced === void 0) { forced = false; }
        if (nullSkip === void 0) { nullSkip = true; }
        if (undefinedSkip === void 0) { undefinedSkip = true; }
        if (from === null || from === undefined) {
            return;
        }
        if (to === null || to === undefined) {
            to = {};
        }
        /** @type {?} */
        var f = Object.keys(from);
        /** @type {?} */
        var t = Object.keys(to);
        f.forEach((/**
         * @param {?} fi
         * @return {?}
         */
        function (fi) {
            if (forced === true || t.includes(fi) === true) {
                if (!(from[fi] === null && nullSkip === true) && !(from[fi] === undefined && undefinedSkip === true)) {
                    to[fi] = from[fi];
                }
            }
        }));
    }
    // |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    // |||||||||||||||||||||||||||||||||||| Text Utils |||||||||||||||||||||||||||||||||||||||||||||||
    /**
     * Transforms a camelCase string into a readable text format
     * \@example textify('helloWorld!')
     * // Hello world!
     * @param {?} text
     * @return {?}
     */
    function textify(text) {
        return text
            .replace(/([A-Z])/g, (/**
         * @param {?} char
         * @return {?}
         */
        function (char) { return " " + char.toLowerCase(); }))
            .replace(/^([a-z])/, (/**
         * @param {?} char
         * @return {?}
         */
        function (char) { return char.toUpperCase(); }));
    }
    /**
     * Transforms a text string into a title case text format
     * \@example titleCase('hello world!')
     * // Hello Workd!
     * @param {?} value
     * @return {?}
     */
    function titleCase(value) {
        /** @type {?} */
        var sentence = value.toLowerCase().split(' ');
        for (var i = 0; i < sentence.length; i++) {
            sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);
        }
        return sentence.join(' ');
    }
    /**
     * @record
     * @template T
     */
    function Dictionary() { }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/cores/dynamic-cell/IDynamicCell.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function IDynamicCell() { }
    if (false) {
        /** @type {?} */
        IDynamicCell.prototype.row;
        /** @type {?} */
        IDynamicCell.prototype.column;
        /** @type {?} */
        IDynamicCell.prototype.parent;
        /** @type {?|undefined} */
        IDynamicCell.prototype.onRowEvent;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/utilies/text.utils.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Simplifies a string (trims and lowerCases)
     * @param {?} s
     * @return {?}
     */
    function simplify(s) {
        return ("" + s).trim().toLowerCase();
    }
    /**
     * Transforms a camelCase string into a readable text format
     * \@example textify('helloWorld!')
     * // Hello world!
     * @param {?} text
     * @return {?}
     */
    function textify$1(text) {
        return text
            .replace(/([A-Z])/g, (/**
         * @param {?} char
         * @return {?}
         */
        function (char) { return " " + char.toLowerCase(); }))
            .replace(/^([a-z])/, (/**
         * @param {?} char
         * @return {?}
         */
        function (char) { return char.toUpperCase(); }));
    }
    /**
     * Transforms a text string into a title case text format
     * \@example titleCase('hello world!')
     * // Hello Workd!
     * @param {?} value
     * @return {?}
     */
    function titleCase$1(value) {
        /** @type {?} */
        var sentence = value.toLowerCase().split(' ');
        for (var i = 0; i < sentence.length; i++) {
            sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);
        }
        return sentence.join(' ');
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/cores/table-data-source.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     */
    var   /**
     * @template T
     */
    TableVirtualScrollDataSource = /** @class */ (function (_super) {
        __extends(TableVirtualScrollDataSource, _super);
        function TableVirtualScrollDataSource() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.filterMap = {};
            return _this;
        }
        Object.defineProperty(TableVirtualScrollDataSource.prototype, "allData", {
            get: /**
             * @return {?}
             */
            function () {
                return this.data;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TableVirtualScrollDataSource.prototype.toTranslate = /**
         * @return {?}
         */
        function () {
            var e_1, _a, e_2, _b;
            /** @type {?} */
            var tranList = [];
            /** @type {?} */
            var keys = Object.keys(this.filterMap);
            try {
                for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var k = keys_1_1.value;
                    /** @type {?} */
                    var fieldTotalTran = '';
                    try {
                        for (var _c = (e_2 = void 0, __values(this.filterMap[k])), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var f = _d.value;
                            fieldTotalTran += f.toPrint();
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    if (fieldTotalTran !== '') {
                        tranList.push({ key: titleCase$1(k), value: fieldTotalTran });
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return tranList;
        };
        /**
         * @param {?} fieldName
         * @return {?}
         */
        TableVirtualScrollDataSource.prototype.getFilter = /**
         * @param {?} fieldName
         * @return {?}
         */
        function (fieldName) {
            return this.filterMap[fieldName];
        };
        /**
         * @param {?} fieldName
         * @param {?} filters
         * @return {?}
         */
        TableVirtualScrollDataSource.prototype.setFilter = /**
         * @param {?} fieldName
         * @param {?} filters
         * @return {?}
         */
        function (fieldName, filters) {
            var _this = this;
            this.filterMap[fieldName] = filters;
            return new rxjs.Observable((/**
             * @param {?} subscriber
             * @return {?}
             */
            function (subscriber) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.refreshFilterPredicate();
                    subscriber.next();
                    subscriber.complete();
                }), 200); // for show progress
            }));
        };
        /**
         * @param {?=} fieldName
         * @return {?}
         */
        TableVirtualScrollDataSource.prototype.clearFilter = /**
         * @param {?=} fieldName
         * @return {?}
         */
        function (fieldName) {
            if (fieldName === void 0) { fieldName = null; }
            if (fieldName != null) {
                delete this.filterMap[fieldName];
            }
            else {
                this.filterMap = {};
            }
            this.refreshFilterPredicate();
        };
        /**
         * @return {?}
         */
        TableVirtualScrollDataSource.prototype.clearData = /**
         * @return {?}
         */
        function () {
            this.data = [];
        };
        /**
         * @return {?}
         */
        TableVirtualScrollDataSource.prototype.refreshFilterPredicate = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var conditionsString = '';
            Object.keys(this.filterMap).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                /** @type {?} */
                var fieldCondition = '';
                _this.filterMap[key].forEach((/**
                 * @param {?} fieldFilter
                 * @param {?} row
                 * @param {?} array
                 * @return {?}
                 */
                function (fieldFilter, row, array) {
                    if (row < array.length - 1) {
                        fieldCondition += fieldFilter.toString(key) + (fieldFilter.type === 'and' ? ' && ' : ' || ');
                    }
                    else {
                        fieldCondition += fieldFilter.toString(key);
                    }
                }));
                if (fieldCondition !== '') {
                    conditionsString += " " + (conditionsString === '' ? '' : ' && ') + " ( " + fieldCondition + " )";
                }
            }));
            if (conditionsString !== '') {
                /** @type {?} */
                var filterFunction_1 = new Function('_a$', 'return ' + conditionsString);
                this.filterPredicate = (/**
                 * @param {?} data
                 * @param {?} filter
                 * @return {?}
                 */
                function (data, filter) { return (/** @type {?} */ (filterFunction_1(data))); });
            }
            else {
                this.filterPredicate = (/**
                 * @param {?} data
                 * @param {?} filter
                 * @return {?}
                 */
                function (data, filter) { return true; });
            }
            this.filter = conditionsString;
        };
        // When client paging active use for reterive paging data
        // When client paging active use for reterive paging data
        /**
         * @param {?} data
         * @return {?}
         */
        TableVirtualScrollDataSource.prototype.pagingData = 
        // When client paging active use for reterive paging data
        /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var p = ((/** @type {?} */ (this)))._paginator;
            if (p && p !== null) {
                /** @type {?} */
                var end = (p.pageIndex + 1) * p.pageSize;
                /** @type {?} */
                var start = p.pageIndex * p.pageSize;
                return data.slice(start, end);
            }
            return data;
        };
        /**
         * @return {?}
         */
        TableVirtualScrollDataSource.prototype._updateChangeSubscription = /**
         * @return {?}
         */
        function () {
            var _this = this;
            var _a;
            this.initStreams();
            /** @type {?} */
            var sort = ((/** @type {?} */ (this)))._sort;
            /** @type {?} */
            var paginator = ((/** @type {?} */ (this)))._paginator;
            /** @type {?} */
            var internalPageChanges = ((/** @type {?} */ (this)))._internalPageChanges;
            /** @type {?} */
            var filter = ((/** @type {?} */ (this)))._filter;
            /** @type {?} */
            var renderData = ((/** @type {?} */ (this)))._renderData;
            /** @type {?} */
            var dataStream = ((/** @type {?} */ (this)))._data;
            /** @type {?} */
            var sortChange = sort ?
                (/** @type {?} */ (rxjs.merge(sort.sortChange, sort.initialized))) : rxjs.of(null);
            /** @type {?} */
            var pageChange = paginator ?
                (/** @type {?} */ (rxjs.merge(paginator.page, internalPageChanges, paginator.initialized))) : rxjs.of(null);
            // First Filter
            /** @type {?} */
            var filteredData = rxjs.combineLatest([dataStream, filter]).pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 1), data = _b[0];
                return _this._filterData(data);
            })));
            // Second Order
            /** @type {?} */
            var orderedData = rxjs.combineLatest([filteredData, sortChange]).pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 1), data = _b[0];
                return _this._orderData(data);
            })));
            // Last Paging
            /** @type {?} */
            var paginatedData = rxjs.combineLatest([orderedData, pageChange]).pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 1), data = _b[0];
                return _this.pagingData(data);
            })));
            (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
            this._renderChangesSubscription = new rxjs.Subscription();
            this._renderChangesSubscription.add(paginatedData.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return _this.dataToRender$.next(data); })));
            this._renderChangesSubscription.add(this.dataOfRange$.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return renderData.next(data); })));
        };
        /**
         * @private
         * @return {?}
         */
        TableVirtualScrollDataSource.prototype.initStreams = /**
         * @private
         * @return {?}
         */
        function () {
            if (!this.streamsReady) {
                this.dataToRender$ = new rxjs.ReplaySubject(1);
                this.dataOfRange$ = new rxjs.ReplaySubject(1);
                this.streamsReady = true;
            }
        };
        return TableVirtualScrollDataSource;
    }(table.MatTableDataSource));
    if (false) {
        /** @type {?} */
        TableVirtualScrollDataSource.prototype.dataToRender$;
        /** @type {?} */
        TableVirtualScrollDataSource.prototype.dataOfRange$;
        /**
         * @type {?}
         * @private
         */
        TableVirtualScrollDataSource.prototype.streamsReady;
        /**
         * @type {?}
         * @private
         */
        TableVirtualScrollDataSource.prototype.filterMap;
    }
    /**
     * @record
     * @template T
     */
    function HashMap() { }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dynamic-mat-table/dynamic-mat-table.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TableService = /** @class */ (function () {
        function TableService() {
        }
        /************************************* Local Export *****************************************/
        /**
         * ********************************** Local Export ****************************************
         * @return {?}
         */
        TableService.getFormattedTime = /**
         * ********************************** Local Export ****************************************
         * @return {?}
         */
        function () {
            /** @type {?} */
            var today = new Date();
            /** @type {?} */
            var y = today.getFullYear();
            /** @type {?} */
            var m = today.getMonth() + 1;
            /** @type {?} */
            var d = today.getDate();
            /** @type {?} */
            var h = today.getHours();
            /** @type {?} */
            var mi = today.getMinutes();
            /** @type {?} */
            var s = today.getSeconds();
            return y + "-" + m + "-" + d + "-" + h + "-" + mi + "-" + s;
        };
        // private downloadBlob(blob: any, filename: string) {
        //   if (navigator.msSaveBlob) { // IE 10+
        //     navigator.msSaveBlob(blob, filename);
        //   } else {
        //     const link = document.createElement('a');
        //     if (link.download !== undefined) {
        //       // Browsers that support HTML5 download attribute
        //       const link = window.document.createElement('a');
        //       const date = new Date();
        //       link.className = 'download' + date.getUTCFullYear() + date.getUTCMonth() + date.getUTCSeconds();
        //       link.setAttribute('href', blob);
        //       link.setAttribute('download', filename);
        //       link.style.visibility = 'hidden';
        //       link.click();
        //       // setTimeout(() => {
        //       //   const g = document.body.getElementsByClassName(link.className);
        //       //   document.body.removeChild(link);
        //       // });
        //     }
        //   }
        // }
        // private downloadBlob(blob: any, filename: string) {
        //   if (navigator.msSaveBlob) { // IE 10+
        //     navigator.msSaveBlob(blob, filename);
        //   } else {
        //     const link = document.createElement('a');
        //     if (link.download !== undefined) {
        //       // Browsers that support HTML5 download attribute
        //       const link = window.document.createElement('a');
        //       const date = new Date();
        //       link.className = 'download' + date.getUTCFullYear() + date.getUTCMonth() + date.getUTCSeconds();
        //       link.setAttribute('href', blob);
        //       link.setAttribute('download', filename);
        //       link.style.visibility = 'hidden';
        //       link.click();
        //       // setTimeout(() => {
        //       //   const g = document.body.getElementsByClassName(link.className);
        //       //   document.body.removeChild(link);
        //       // });
        //     }
        //   }
        // }
        /**
         * @private
         * @param {?} blob
         * @param {?} filename
         * @return {?}
         */
        TableService.prototype.downloadBlob = 
        // private downloadBlob(blob: any, filename: string) {
        //   if (navigator.msSaveBlob) { // IE 10+
        //     navigator.msSaveBlob(blob, filename);
        //   } else {
        //     const link = document.createElement('a');
        //     if (link.download !== undefined) {
        //       // Browsers that support HTML5 download attribute
        //       const link = window.document.createElement('a');
        //       const date = new Date();
        //       link.className = 'download' + date.getUTCFullYear() + date.getUTCMonth() + date.getUTCSeconds();
        //       link.setAttribute('href', blob);
        //       link.setAttribute('download', filename);
        //       link.style.visibility = 'hidden';
        //       link.click();
        //       // setTimeout(() => {
        //       //   const g = document.body.getElementsByClassName(link.className);
        //       //   document.body.removeChild(link);
        //       // });
        //     }
        //   }
        // }
        /**
         * @private
         * @param {?} blob
         * @param {?} filename
         * @return {?}
         */
        function (blob, filename) {
            if (navigator.msSaveBlob) {
                // IE 10+
                navigator.msSaveBlob(blob, filename);
            }
            else {
                /** @type {?} */
                var link = document.createElement("a");
                if (link.download !== undefined) {
                    // Browsers that support HTML5 download attribute
                    /** @type {?} */
                    var url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", filename);
                    link.style.visibility = "hidden";
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
            }
        };
        /**
         * @template T
         * @param {?} columns
         * @param {?} rows
         * @param {?} selectionModel
         * @param {?=} filename
         * @return {?}
         */
        TableService.prototype.exportToCsv = /**
         * @template T
         * @param {?} columns
         * @param {?} rows
         * @param {?} selectionModel
         * @param {?=} filename
         * @return {?}
         */
        function (columns, rows, selectionModel, filename) {
            if (filename === void 0) { filename = ""; }
            filename = filename === "" ? this.tableName + TableService.getFormattedTime() + ".csv" : filename;
            if (!rows || !rows.length) {
                return;
            }
            /** @type {?} */
            var fields = columns.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.exportable !== false && c.display !== 'hiden'; }));
            /** @type {?} */
            var separator = ",";
            /** @type {?} */
            var CR_LF = "\n";
            //'\u0D0A';
            /** @type {?} */
            var keys = fields.map((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return f.name; }));
            /** @type {?} */
            var headers = fields.map((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return f.header; }));
            /** @type {?} */
            var csvContent = headers.join(separator) + CR_LF +
                rows
                    .map((/**
                 * @param {?} row
                 * @return {?}
                 */
                function (row) {
                    return fields.map((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) {
                        /** @type {?} */
                        var cell = f.toExport(row, "csv") || "";
                        cell = cell instanceof Date ? cell.toLocaleString() : cell.toString().replace(/"/g, '""');
                        if (cell.search(/("|,|\n)/g) >= 0) {
                            cell = "\"" + cell + "\"";
                        }
                        return cell;
                    })).join(separator);
                })).join(CR_LF);
            /** @type {?} */
            var blob = new Blob([
                new Uint8Array([0xEF, 0xBB, 0xBF]),
                csvContent
            ], { type: 'text/csv;charset=utf-8' });
            this.downloadBlob(blob, filename);
        };
        /**
         * @param {?} rows
         * @param {?=} filename
         * @return {?}
         */
        TableService.prototype.exportToJson = /**
         * @param {?} rows
         * @param {?=} filename
         * @return {?}
         */
        function (rows, filename) {
            if (filename === void 0) { filename = ""; }
            filename =
                filename === ""
                    ? this.tableName + TableService.getFormattedTime() + ".json"
                    : filename;
            /** @type {?} */
            var blob = new Blob([JSON.stringify(rows)], {
                type: "text/csv;charset=utf-8;",
            });
            this.downloadBlob(blob, filename);
        };
        /************************************* Save Setting into storage *****************************************/
        /**
         * ********************************** Save Setting into storage ****************************************
         * @param {?} columnInfo
         * @param {?=} saveName
         * @return {?}
         */
        TableService.prototype.loadSavedColumnInfo = /**
         * ********************************** Save Setting into storage ****************************************
         * @param {?} columnInfo
         * @param {?=} saveName
         * @return {?}
         */
        function (columnInfo, saveName) {
            // Only load if a save name is passed in
            if (saveName) {
                if (!localStorage) {
                    return;
                }
                /** @type {?} */
                var loadedInfo = localStorage.getItem(saveName + "-columns");
                if (loadedInfo) {
                    return JSON.parse(loadedInfo);
                }
                this.saveColumnInfo(columnInfo);
                return columnInfo;
            }
        };
        /**
         * @param {?} columnInfo
         * @param {?=} saveName
         * @return {?}
         */
        TableService.prototype.saveColumnInfo = /**
         * @param {?} columnInfo
         * @param {?=} saveName
         * @return {?}
         */
        function (columnInfo, saveName) {
            if (saveName === void 0) { saveName = this.tableName; }
            // console.log(saveName);
            if (saveName) {
                if (!localStorage) {
                    return;
                }
                localStorage.setItem(saveName + "-columns", JSON.stringify(columnInfo));
            }
        };
        TableService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: "root",
                    },] }
        ];
        /** @nocollapse */
        TableService.ctorParameters = function () { return []; };
        /** @nocollapse */ TableService.ɵprov = core.ɵɵdefineInjectable({ factory: function TableService_Factory() { return new TableService(); }, token: TableService, providedIn: "root" });
        return TableService;
    }());
    if (false) {
        /** @type {?} */
        TableService.prototype.tableName;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/cores/table.core.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     */
    var TableCoreDirective = /** @class */ (function () {
        function TableCoreDirective(tableService, cdr) {
            this.tableService = tableService;
            this.cdr = cdr;
            this.backgroundColor = null;
            this.contextMenuItems = [];
            this.expandColumn = [];
            this.defaultWidth = null;
            this.minWidth = 120;
            /**
             * ************************************ I/O parameters ********************************
             */
            this.printConfig = {};
            this.rowHeight = 48;
            this.headerHeight = 56;
            this.footerHeight = 48;
            this.headerEnable = true;
            this.footerEnable = false;
            // tslint:disable-next-line: no-output-on-prefix
            this.onTableEvent = new core.EventEmitter();
            this.onRowEvent = new core.EventEmitter();
            this.settingChange = new core.EventEmitter();
            this.paginationChange = new core.EventEmitter();
            // Variables //
            this.progressColumn = [];
            this.displayedColumns = [];
            this.tvsDataSource = new TableVirtualScrollDataSource([]);
            this._rowSelectionModel = new collections.SelectionModel(true, []);
            this._tablePagination = {};
            this.tablePagingMode = 'none';
            this.viewportClass = 'viewport-with-pagination';
            this.showProgress = true;
            this.tableSetting = {
                direction: 'ltr',
                columnSetting: null,
                visibaleActionMenu: null
            };
        }
        Object.defineProperty(TableCoreDirective.prototype, "direction", {
            get: /**
             * @return {?}
             */
            function () {
                var _a;
                return (_a = this.tableSetting) === null || _a === void 0 ? void 0 : _a.direction;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.tableSetting.direction = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCoreDirective.prototype, "ScrollStrategyType", {
            get: /**
             * @return {?}
             */
            function () {
                return this.tableSetting.scrollStrategy;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.viewport['_scrollStrategy'].scrollStrategyMode = value;
                this.tableSetting.scrollStrategy = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCoreDirective.prototype, "pagingMode", {
            get: /**
             * @return {?}
             */
            function () {
                return this.tablePagingMode;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.tablePagingMode = value;
                this.updatePagination();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCoreDirective.prototype, "pagination", {
            get: /**
             * @return {?}
             */
            function () {
                return this._tablePagination;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value && value !== null) {
                    this._tablePagination = value;
                    if (isNullorUndefined(this._tablePagination.pageSizeOptions)) {
                        this._tablePagination.pageSizeOptions = [5, 10, 25, 100];
                    }
                    if (isNullorUndefined(this._tablePagination.pageSizeOptions)) {
                        this._tablePagination.pageSize = this._tablePagination.pageSizeOptions[0];
                    }
                    this.updatePagination();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCoreDirective.prototype, "rowSelectionModel", {
            get: /**
             * @return {?}
             */
            function () {
                return this._rowSelectionModel;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (!isNullorUndefined(value)) {
                    if (this._rowSelectionMode && value && this._rowSelectionMode !== 'none') {
                        this._rowSelectionMode = (value.isMultipleSelection() === true ? 'multi' : 'single');
                    }
                    this._rowSelectionModel = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCoreDirective.prototype, "rowSelectionMode", {
            get: /**
             * @return {?}
             */
            function () {
                return this._rowSelectionMode;
            },
            set: /**
             * @param {?} selection
             * @return {?}
             */
            function (selection) {
                selection = selection || 'none';
                this._rowSelectionModel = selection === 'none' ? null : new collections.SelectionModel(selection === 'multi', []);
                if (selection === 'none' && this._rowSelectionMode !== 'none' && this.displayedColumns[0] === 'row-checkbox') {
                    this.displayedColumns.shift();
                    this.saveSetting(this.tableSetting, false);
                }
                else if (selection !== 'none' && this._rowSelectionMode === 'none') {
                    this.displayedColumns.unshift('row-checkbox');
                    this.saveSetting(this.tableSetting, false);
                }
                this._rowSelectionMode = selection;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCoreDirective.prototype, "tableName", {
            get: /**
             * @return {?}
             */
            function () {
                return this.tableService.tableName;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.tableService.tableName = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCoreDirective.prototype, "showProgress", {
            get: /**
             * @return {?}
             */
            function () {
                return this.progressColumn.length > 0;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.progressColumn = [];
                if (value === true) {
                    this.progressColumn.push('progress');
                }
            },
            enumerable: true,
            configurable: true
        });
        // private totalRecord = 0;
        // @Input() 
        // get dataSource() {    
        //   if(isNullorUndefined(this.tvsDataSource)) {      
        //     return null;
        //   }    
        //   if (this.totalRecord !== this.tvsDataSource.allData.length) {      
        //     this.initSystemField(this.tvsDataSource.allData);
        //   }
        //   return this.tvsDataSource;
        // } 
        // set dataSource(value: TableVirtualScrollDataSource<T>) {           
        //   this.clear();    
        //   if (!isNullorUndefined(value)) {      
        //     this.initSystemField(value.data);
        //     this.tvsDataSource = value;
        //     this.tvsDataSource.sort = this.sort;
        //     (this.tvsDataSource as any)._paginator = value;      
        //   } 
        // }
        // private totalRecord = 0;
        // @Input() 
        // get dataSource() {    
        //   if(isNullorUndefined(this.tvsDataSource)) {      
        //     return null;
        //   }    
        //   if (this.totalRecord !== this.tvsDataSource.allData.length) {      
        //     this.initSystemField(this.tvsDataSource.allData);
        //   }
        //   return this.tvsDataSource;
        // } 
        // set dataSource(value: TableVirtualScrollDataSource<T>) {           
        //   this.clear();    
        //   if (!isNullorUndefined(value)) {      
        //     this.initSystemField(value.data);
        //     this.tvsDataSource = value;
        //     this.tvsDataSource.sort = this.sort;
        //     (this.tvsDataSource as any)._paginator = value;      
        //   } 
        // }
        /**
         * @protected
         * @param {?} data
         * @return {?}
         */
        TableCoreDirective.prototype.initSystemField = 
        // private totalRecord = 0;
        // @Input() 
        // get dataSource() {    
        //   if(isNullorUndefined(this.tvsDataSource)) {      
        //     return null;
        //   }    
        //   if (this.totalRecord !== this.tvsDataSource.allData.length) {      
        //     this.initSystemField(this.tvsDataSource.allData);
        //   }
        //   return this.tvsDataSource;
        // } 
        // set dataSource(value: TableVirtualScrollDataSource<T>) {           
        //   this.clear();    
        //   if (!isNullorUndefined(value)) {      
        //     this.initSystemField(value.data);
        //     this.tvsDataSource = value;
        //     this.tvsDataSource.sort = this.sort;
        //     (this.tvsDataSource as any)._paginator = value;      
        //   } 
        // }
        /**
         * @protected
         * @param {?} data
         * @return {?}
         */
        function (data) {
            data = data.map((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            function (item, index) {
                item.id = index;
                item.option = item.option || {};
                return item;
            }));
        };
        Object.defineProperty(TableCoreDirective.prototype, "expandComponent", {
            get: /**
             * @return {?}
             */
            function () {
                return this._expandComponent;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._expandComponent = value;
                if (this._expandComponent !== null && this._expandComponent !== undefined) {
                    this.expandColumn = ['expandedDetail'];
                }
                else {
                    this.expandColumn = [];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCoreDirective.prototype, "columns", {
            get: /**
             * @return {?}
             */
            function () {
                return this.tableColumns;
            },
            set: /**
             * @param {?} fields
             * @return {?}
             */
            function (fields) {
                var _this = this;
                (fields || []).forEach((/**
                 * @param {?} f
                 * @param {?} i
                 * @return {?}
                 */
                function (f, i) {
                    // key name error //
                    if (f.name.toLowerCase() === 'id') {
                        throw 'Field name is reserved.["id"]';
                    }
                    /** @type {?} */
                    var settingFields = (_this.tableSetting.columnSetting || []).filter((/**
                     * @param {?} s
                     * @return {?}
                     */
                    function (s) { return s.name === f.name; }));
                    /** @type {?} */
                    var settingField = settingFields.length > 0 ? settingFields[0] : null;
                    // default value for fields
                    f.printable = f.printable || true;
                    f.exportable = f.exportable || true;
                    f.toExport = f.toExport || ((/**
                     * @param {?} value
                     * @param {?} type
                     * @return {?}
                     */
                    function (value, type) { return typeof value === 'object' ? null : value || ''; }));
                    f.toPrint = (/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) { return typeof value === 'object' ? null : value || ''; });
                    f.enableContextMenu = f.enableContextMenu || true;
                    f.header = f.header || titleCase$1(f.name);
                    f.display = getObjectProp('display', 'visible', settingField, f);
                    f.filter = getObjectProp('filter', 'client-side', settingField, f);
                    f.sort = getObjectProp('sort', 'client-side', settingField, f);
                    f.sticky = getObjectProp('sticky', 'none', settingField, f);
                    f.width = getObjectProp('width', _this.defaultWidth, settingField, f);
                }));
                this.tableColumns = fields;
                this.updateColumn();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TableCoreDirective.prototype.updateColumn = /**
         * @return {?}
         */
        function () {
            if (isNullorUndefined(this.tableSetting.columnSetting)) {
                this.tableSetting.columnSetting = clone(this.tableColumns);
                this.refreshTableSetting();
            }
            this.setDisplayedColumns();
        };
        /**************************************** Methods **********************************************/
        /**
         * ************************************* Methods *********************************************
         * @return {?}
         */
        TableCoreDirective.prototype.refreshTableSetting = /**
         * ************************************* Methods *********************************************
         * @return {?}
         */
        function () {
            // this.tableSetting = clone(this.tableSetting);
        };
        /**
         * @return {?}
         */
        TableCoreDirective.prototype.updatePagination = /**
         * @return {?}
         */
        function () {
            if (isNullorUndefined(this.tvsDataSource)) {
                return;
            }
            if (this.tablePagingMode === 'client-side' || this.tablePagingMode === 'server-side') {
                this.viewportClass = 'viewport-with-pagination';
                if (!isNullorUndefined(this.tvsDataSource.paginator)) {
                    /** @type {?} */
                    var dataLen = this.tvsDataSource.paginator.length;
                    if (!isNullorUndefined(this._tablePagination.length) && this._tablePagination.length > dataLen) {
                        dataLen = this._tablePagination.length;
                    }
                    this.tvsDataSource.paginator.length = dataLen;
                }
            }
            else {
                this.viewportClass = 'viewport';
                if (((/** @type {?} */ (this.tvsDataSource)))._paginator !== undefined) {
                    delete ((/** @type {?} */ (this.tvsDataSource)))._paginator;
                }
            }
            this.tvsDataSource.refreshFilterPredicate();
        };
        /**
         * @return {?}
         */
        TableCoreDirective.prototype.clear = /**
         * @return {?}
         */
        function () {
            if (!isNullorUndefined(this.tvsDataSource)) {
                if (this.viewport) {
                    this.viewport.scrollTo({ top: 0, behavior: 'auto' });
                }
                this.tvsDataSource.clearData();
                this.expandedElement = null;
            }
            if (this._rowSelectionModel) {
                this._rowSelectionModel.clear();
            }
            this.cdr.detectChanges();
        };
        /**
         * @return {?}
         */
        TableCoreDirective.prototype.setDisplayedColumns = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.columns) {
                this.displayedColumns = [];
                this.columns.forEach((/**
                 * @param {?} colunm
                 * @param {?} index
                 * @return {?}
                 */
                function (colunm, index) {
                    colunm.index = index;
                    if (colunm.display === undefined || colunm.display === 'visible' || colunm.display === 'prevent-hidden') {
                        _this.displayedColumns.push(colunm.name);
                    }
                }));
                //bugfixed because of double header show
                // if ((this._rowSelectionMode === 'multi' || this._rowSelectionMode === 'single') && this.displayedColumns.indexOf('row-checkbox') === -1) {
                //   this.displayedColumns.unshift('row-checkbox');
                // } 
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    if ((_this._rowSelectionMode === 'multi' || _this._rowSelectionMode === 'single') && _this.displayedColumns.indexOf('row-checkbox') === -1) {
                        _this.displayedColumns.unshift('row-checkbox');
                    }
                }), 0);
                if (this.tableSetting.visibleTableMenu !== false) {
                    this.displayedColumns.push('table-menu');
                }
            }
            // this.updatePagination();
        };
        /************************************ Drag & Drop Column *******************************************/
        /**
         * ********************************* Drag & Drop Column ******************************************
         * @return {?}
         */
        TableCoreDirective.prototype.refreshGrid = /**
         * ********************************* Drag & Drop Column ******************************************
         * @return {?}
         */
        function () {
            this.cdr.detectChanges();
            this.table.renderRows();
        };
        /**
         * @param {?} from
         * @param {?} to
         * @return {?}
         */
        TableCoreDirective.prototype.moveRow = /**
         * @param {?} from
         * @param {?} to
         * @return {?}
         */
        function (from, to) {
            if (from >= 0 && from < this.tvsDataSource.data.length && to >= 0 && to < this.tvsDataSource.data.length) {
                this.tvsDataSource.data[from].id = to;
                this.tvsDataSource.data[to].id = from;
                dragDrop.moveItemInArray(this.tvsDataSource.data, from, to);
                this.tvsDataSource.data = Object.assign([], this.tvsDataSource.data);
            }
        };
        /**
         * @param {?} from
         * @param {?} to
         * @return {?}
         */
        TableCoreDirective.prototype.moveColumn = /**
         * @param {?} from
         * @param {?} to
         * @return {?}
         */
        function (from, to) {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                dragDrop.moveItemInArray(_this.columns, from, to);
                _this.refreshColumn(_this.columns);
            }));
        };
        /**
         * @param {?} columns
         * @return {?}
         */
        TableCoreDirective.prototype.refreshColumn = /**
         * @param {?} columns
         * @return {?}
         */
        function (columns) {
            var _this = this;
            if (this.viewport) {
                /** @type {?} */
                var currentOffset_1 = this.viewport.measureScrollOffset();
                this.columns = columns;
                this.setDisplayedColumns();
                setTimeout((/**
                 * @return {?}
                 */
                function () { return _this.viewport.scrollTo({ top: currentOffset_1, behavior: 'auto' }); }), 0);
            }
        };
        /**
         * @param {?} tableSetting
         * @param {?=} raiseEvent
         * @return {?}
         */
        TableCoreDirective.prototype.saveSetting = /**
         * @param {?} tableSetting
         * @param {?=} raiseEvent
         * @return {?}
         */
        function (tableSetting, raiseEvent) {
            if (raiseEvent === void 0) { raiseEvent = false; }
            if (tableSetting !== null) {
                this.tableSetting = tableSetting;
                this.refreshColumn(tableSetting.columnSetting);
            }
            if (raiseEvent === true) {
                this.settingChange.emit(this.tableSetting);
            }
        };
        /************************************ Selection Table Row *******************************************/
        /** Whether the number of selected elements matches the total number of rows. */
        /************************************ Selection Table Row *******************************************/
        /**
         * Whether the number of selected elements matches the total number of rows.
         * @return {?}
         */
        TableCoreDirective.prototype.isAllSelected = /************************************ Selection Table Row *******************************************/
        /**
         * Whether the number of selected elements matches the total number of rows.
         * @return {?}
         */
        function () {
            /** @type {?} */
            var numSelected = this._rowSelectionModel.selected.length;
            /** @type {?} */
            var numRows = this.tvsDataSource.data.length;
            return numSelected === numRows;
        };
        /** Selects all rows if they are not all selected; otherwise clear selection. */
        /**
         * Selects all rows if they are not all selected; otherwise clear selection.
         * @return {?}
         */
        TableCoreDirective.prototype.masterToggle = /**
         * Selects all rows if they are not all selected; otherwise clear selection.
         * @return {?}
         */
        function () {
            var _this = this;
            this.isAllSelected() ?
                this._rowSelectionModel.clear() :
                this.tvsDataSource.data.forEach((/**
                 * @param {?} row
                 * @return {?}
                 */
                function (row) { return _this._rowSelectionModel.select(row); }));
            this.onRowEvent.emit({ event: 'MasterSelectionChange', sender: this._rowSelectionModel });
        };
        /**
         * @param {?} e
         * @param {?} row
         * @return {?}
         */
        TableCoreDirective.prototype.onRowSelectionChange = /**
         * @param {?} e
         * @param {?} row
         * @return {?}
         */
        function (e, row) {
            if (e) {
                this._rowSelectionModel.toggle(row);
                this.onRowEvent.emit({ event: 'RowSelectionChange', sender: this._rowSelectionModel });
            }
        };
        TableCoreDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: '[core]'
                    },] }
        ];
        /** @nocollapse */
        TableCoreDirective.ctorParameters = function () { return [
            { type: TableService },
            { type: core.ChangeDetectorRef }
        ]; };
        TableCoreDirective.propDecorators = {
            sort: [{ type: core.ViewChild, args: [sort.MatSort, { static: true },] }],
            paginator: [{ type: core.ViewChild, args: [paginator.MatPaginator, { static: true },] }],
            dataSource: [{ type: core.Input }],
            backgroundColor: [{ type: core.Input }],
            direction: [{ type: core.Input }, { type: core.HostBinding, args: ['style.direction',] }],
            contextMenuItems: [{ type: core.Input }],
            ScrollStrategyType: [{ type: core.Input }],
            pagingMode: [{ type: core.Input }],
            pagination: [{ type: core.Input }],
            rowSelectionModel: [{ type: core.Input }],
            rowSelectionMode: [{ type: core.Input }],
            tableName: [{ type: core.Input }],
            showProgress: [{ type: core.Input }],
            expandComponent: [{ type: core.Input }],
            rowContextMenuItems: [{ type: core.Input }],
            defaultWidth: [{ type: core.Input }],
            minWidth: [{ type: core.Input }],
            columns: [{ type: core.Input }],
            printConfig: [{ type: core.Input }],
            sticky: [{ type: core.Input }],
            pending: [{ type: core.Input }],
            rowHeight: [{ type: core.Input }],
            headerHeight: [{ type: core.Input }],
            footerHeight: [{ type: core.Input }],
            headerEnable: [{ type: core.Input }],
            footerEnable: [{ type: core.Input }],
            showNoData: [{ type: core.Input }],
            showReload: [{ type: core.Input }],
            onTableEvent: [{ type: core.Output }],
            onRowEvent: [{ type: core.Output }],
            settingChange: [{ type: core.Output }],
            paginationChange: [{ type: core.Output }],
            table: [{ type: core.ViewChild, args: [table.MatTable, { static: true },] }],
            viewport: [{ type: core.ViewChild, args: [scrolling.CdkVirtualScrollViewport, { static: true },] }]
        };
        return TableCoreDirective;
    }());
    if (false) {
        /** @type {?} */
        TableCoreDirective.prototype.sort;
        /** @type {?} */
        TableCoreDirective.prototype.paginator;
        /** @type {?} */
        TableCoreDirective.prototype.dataSource;
        /** @type {?} */
        TableCoreDirective.prototype.backgroundColor;
        /** @type {?} */
        TableCoreDirective.prototype.contextMenuItems;
        /** @type {?} */
        TableCoreDirective.prototype.expandColumn;
        /**
         * @type {?}
         * @private
         */
        TableCoreDirective.prototype._expandComponent;
        /** @type {?} */
        TableCoreDirective.prototype.rowContextMenuItems;
        /** @type {?} */
        TableCoreDirective.prototype.defaultWidth;
        /** @type {?} */
        TableCoreDirective.prototype.minWidth;
        /**
         * ************************************ I/O parameters ********************************
         * @type {?}
         */
        TableCoreDirective.prototype.printConfig;
        /** @type {?} */
        TableCoreDirective.prototype.sticky;
        /** @type {?} */
        TableCoreDirective.prototype.pending;
        /** @type {?} */
        TableCoreDirective.prototype.rowHeight;
        /** @type {?} */
        TableCoreDirective.prototype.headerHeight;
        /** @type {?} */
        TableCoreDirective.prototype.footerHeight;
        /** @type {?} */
        TableCoreDirective.prototype.headerEnable;
        /** @type {?} */
        TableCoreDirective.prototype.footerEnable;
        /** @type {?} */
        TableCoreDirective.prototype.showNoData;
        /** @type {?} */
        TableCoreDirective.prototype.showReload;
        /** @type {?} */
        TableCoreDirective.prototype.onTableEvent;
        /** @type {?} */
        TableCoreDirective.prototype.onRowEvent;
        /** @type {?} */
        TableCoreDirective.prototype.settingChange;
        /** @type {?} */
        TableCoreDirective.prototype.paginationChange;
        /**
         * ************************************ Expand Row ********************************
         * @type {?}
         */
        TableCoreDirective.prototype.expandedElement;
        /** @type {?} */
        TableCoreDirective.prototype.progressColumn;
        /** @type {?} */
        TableCoreDirective.prototype.displayedColumns;
        /** @type {?} */
        TableCoreDirective.prototype.tableColumns;
        /** @type {?} */
        TableCoreDirective.prototype.tvsDataSource;
        /**
         * @type {?}
         * @private
         */
        TableCoreDirective.prototype._rowSelectionMode;
        /**
         * @type {?}
         * @private
         */
        TableCoreDirective.prototype._rowSelectionModel;
        /**
         * @type {?}
         * @private
         */
        TableCoreDirective.prototype._tablePagination;
        /** @type {?} */
        TableCoreDirective.prototype.tablePagingMode;
        /** @type {?} */
        TableCoreDirective.prototype.viewportClass;
        /** @type {?} */
        TableCoreDirective.prototype.tableSetting;
        /**
         * ************************************* Refrence Variables **************************************
         * @type {?}
         */
        TableCoreDirective.prototype.table;
        /** @type {?} */
        TableCoreDirective.prototype.viewport;
        /** @type {?} */
        TableCoreDirective.prototype.tableService;
        /** @type {?} */
        TableCoreDirective.prototype.cdr;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dynamic-mat-table/extensions/filter/compare/abstract-filter.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     * @template T
     */
    var /**
     * @abstract
     * @template T
     */
    AbstractFilter = /** @class */ (function () {
        function AbstractFilter() {
        }
        /**
         * @return {?}
         */
        AbstractFilter.prototype.hasValue = /**
         * @return {?}
         */
        function () {
            if (this.parameters !== null) {
                return this.parameters.filter((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.value != null && p.value !== undefined && p.value.toString() !== ''; })).length > 0;
            }
        };
        return AbstractFilter;
    }());
    if (false) {
        /** @type {?} */
        AbstractFilter.prototype.parameters;
        /** @type {?} */
        AbstractFilter.prototype.type;
        /** @type {?} */
        AbstractFilter.prototype.selectedIndex;
        /** @type {?} */
        AbstractFilter.prototype.selectedValue;
        /**
         * @abstract
         * @param {?} dynamicVariable
         * @return {?}
         */
        AbstractFilter.prototype.toString = function (dynamicVariable) { };
        /**
         * @abstract
         * @return {?}
         */
        AbstractFilter.prototype.toPrint = function () { };
        /**
         * @abstract
         * @return {?}
         */
        AbstractFilter.prototype.toSql = function () { };
        /**
         * @abstract
         * @return {?}
         */
        AbstractFilter.prototype.getOperations = function () { };
    }
    /**
     * @record
     */
    function FilterOperation() { }
    if (false) {
        /** @type {?} */
        FilterOperation.prototype.predicate;
        /** @type {?} */
        FilterOperation.prototype.text;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dynamic-mat-table/extensions/filter/compare/text-filter.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var contains = 'a.toString().includes(b)';
    /** @type {?} */
    var equals = 'a.toString() === b.toString()';
    /** @type {?} */
    var startsWith = 'a.toString().startsWith(b)';
    /** @type {?} */
    var endsWith = 'a.toString().endsWith(b.toString())';
    /** @type {?} */
    var empty = '!a';
    /** @type {?} */
    var notEmpty = '!!a';
    /** @type {?} */
    var operations = [contains, equals, startsWith, endsWith, empty, notEmpty];
    var TextFilter = /** @class */ (function (_super) {
        __extends(TextFilter, _super);
        function TextFilter(languagePack) {
            var _this = _super.call(this) || this;
            _this.languagePack = languagePack;
            // tslint:disable-next-line:variable-name
            _this._selectedIndex = null;
            _this._selectedIndex = 0;
            if (TextFilter.operationList.length === 0) { // init for first time
                operations.forEach((/**
                 * @param {?} fn
                 * @return {?}
                 */
                function (fn) {
                    TextFilter.operationList.push({ predicate: fn, text: null });
                }));
            }
            TextFilter.operationList[0].text = languagePack.filterLabels.TextContains; // contains //
            TextFilter.operationList[1].text = languagePack.filterLabels.TextEquals; // equals //
            TextFilter.operationList[2].text = languagePack.filterLabels.TextStartsWith; // startsWith //
            TextFilter.operationList[3].text = languagePack.filterLabels.TextEndsWith; // endsWith //
            TextFilter.operationList[4].text = languagePack.filterLabels.TextEmpty; // empty //
            TextFilter.operationList[5].text = languagePack.filterLabels.TextNotEmpty; // notEmpty //
            return _this;
        }
        Object.defineProperty(TextFilter.prototype, "selectedIndex", {
            get: /**
             * @return {?}
             */
            function () {
                return this._selectedIndex;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._selectedIndex = value;
                // init filter parameters
                if (value === 0 || value === 1 || value === 2 || value === 3) { // contains equals startsWith endsWith
                    this.parameters = [{ value: '', text: this.languagePack.filterLabels.Text }];
                }
                else { // empty notEmpty
                    this.parameters = null;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextFilter.prototype, "selectedValue", {
            get: /**
             * @return {?}
             */
            function () {
                if (this._selectedIndex !== null) {
                    return TextFilter.operationList[this._selectedIndex];
                }
                else {
                    return null;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TextFilter.prototype.getOperations = /**
         * @return {?}
         */
        function () {
            return TextFilter.operationList;
        };
        /**
         * @param {?} dynamicVariable
         * @return {?}
         */
        TextFilter.prototype.toString = /**
         * @param {?} dynamicVariable
         * @return {?}
         */
        function (dynamicVariable) {
            /** @type {?} */
            var a = '_a$';
            /** @type {?} */
            var b = '_b$';
            /** @type {?} */
            var predicate = this.selectedValue.predicate.replace('a', a).replace('b', b);
            /** @type {?} */
            var statement = predicate.replace(a, a + "['" + dynamicVariable + "']?.toString()?.toLowerCase()");
            // one static parameters equals  notEquals greaterThan lessThan //
            if (this._selectedIndex === 0 ||
                this._selectedIndex === 1 ||
                this._selectedIndex === 2 ||
                this._selectedIndex === 3) {
                /** @type {?} */
                var value = '\'' + (this.parameters[0].value !== null ? this.parameters[0].value.toLowerCase() : ' null ') + '\'';
                return statement.replace('_b$', value);
            }
            else { // without static parameters
                return statement;
            }
        };
        /**
         * @return {?}
         */
        TextFilter.prototype.toPrint = /**
         * @return {?}
         */
        function () {
            return TextFilter.operationList[this._selectedIndex].text + ' ' + this.parameters[0].value + ' ' + (this.type || '') + ' ';
        };
        /**
         * @return {?}
         */
        TextFilter.prototype.toSql = /**
         * @return {?}
         */
        function () {
            return TextFilter.sql[this._selectedIndex].replace('[*]', (this.parameters[0].value || '')) + (this.type || '') + ' ';
        };
        TextFilter.sql = ['LIKE "%[*]%"', '= "[*]"', 'LIKE "%[*]"', 'LIKE "[*]%"', 'IS NULL', 'IS NOT NULL'];
        TextFilter.operationList = [];
        return TextFilter;
    }(AbstractFilter));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        TextFilter.sql;
        /**
         * @type {?}
         * @private
         */
        TextFilter.operationList;
        /**
         * @type {?}
         * @private
         */
        TextFilter.prototype._selectedIndex;
        /** @type {?} */
        TextFilter.prototype.languagePack;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dynamic-mat-table/extensions/filter/compare/number-filter.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var equals$1 = 'a === b';
    /** @type {?} */
    var notEquals = 'a !== b';
    /** @type {?} */
    var greaterThan = 'a > b';
    /** @type {?} */
    var lessThan = 'a < b';
    /** @type {?} */
    var empty$1 = '!a';
    /** @type {?} */
    var notEmpty$1 = '!!a';
    /** @type {?} */
    var operations$1 = [equals$1, notEquals, greaterThan, lessThan, empty$1, notEmpty$1];
    var NumberFilter = /** @class */ (function (_super) {
        __extends(NumberFilter, _super);
        // private languageText: LanguagePack;
        function NumberFilter(languagePack) {
            var _this = _super.call(this) || this;
            _this.languagePack = languagePack;
            // tslint:disable-next-line:variable-name
            _this._selectedIndex = null;
            if (NumberFilter.operationList.length === 0) {
                operations$1.forEach((/**
                 * @param {?} fn
                 * @return {?}
                 */
                function (fn) {
                    NumberFilter.operationList.push({ predicate: fn, text: null });
                }));
            }
            NumberFilter.operationList[0].text = languagePack.filterLabels.NumberEquals; // equals //
            NumberFilter.operationList[1].text = languagePack.filterLabels.NumberNotEquals; // notEquals //
            NumberFilter.operationList[2].text = languagePack.filterLabels.NumberGreaterThan; // greaterThan //
            NumberFilter.operationList[3].text = languagePack.filterLabels.NumberLessThan; // lessThan //
            NumberFilter.operationList[4].text = languagePack.filterLabels.NumberEmpty; // empty //
            NumberFilter.operationList[5].text = languagePack.filterLabels.NumberNotEmpty; // notEmpty //
            return _this;
        }
        Object.defineProperty(NumberFilter.prototype, "selectedIndex", {
            get: /**
             * @return {?}
             */
            function () {
                return this._selectedIndex;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._selectedIndex = value;
                // init filter parameters
                if (value === 0 || value === 1 || value === 2 || value === 3) { // equals notEquals greaterThan lessThan
                    this.parameters = [{ value: null, text: this.languagePack.filterLabels.Number }];
                }
                else { // empty notEmpty
                    this.parameters = null;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NumberFilter.prototype, "selectedValue", {
            get: /**
             * @return {?}
             */
            function () {
                if (this._selectedIndex !== null) {
                    return NumberFilter.operationList[this._selectedIndex];
                }
                else {
                    return null;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NumberFilter.prototype.getOperations = /**
         * @return {?}
         */
        function () {
            return NumberFilter.operationList;
        };
        /**
         * @param {?} dynamicVariable
         * @return {?}
         */
        NumberFilter.prototype.toString = /**
         * @param {?} dynamicVariable
         * @return {?}
         */
        function (dynamicVariable) {
            /** @type {?} */
            var a = '_a$';
            /** @type {?} */
            var b = '_b$';
            /** @type {?} */
            var predicate = this.selectedValue.predicate.replace('a', a).replace('b', b);
            /** @type {?} */
            var statement = predicate.replace(a, a + "['" + dynamicVariable + "']");
            // one static variable (equals, notEquals,greaterThan,lessThan)
            if (this._selectedIndex === 0 ||
                this._selectedIndex === 1 ||
                this._selectedIndex === 2 ||
                this._selectedIndex === 3) {
                /** @type {?} */
                var value = this.parameters[0].value ? this.parameters[0].value.toString() : ' null ';
                return statement.replace(b, value);
            }
            else { // none static variable (empty, notEmpty)
                return statement;
            }
        };
        /**
         * @return {?}
         */
        NumberFilter.prototype.toPrint = /**
         * @return {?}
         */
        function () {
            return NumberFilter.operationList[this._selectedIndex].text + ' ' + this.parameters[0].value + ' ' + (this.type || '') + ' ';
        };
        /**
         * @return {?}
         */
        NumberFilter.prototype.toSql = /**
         * @return {?}
         */
        function () {
            return NumberFilter.sql[this._selectedIndex] + ' ' + (this.parameters[0].value || '') + ' ' + (this.type || '') + ' ';
        };
        NumberFilter.sql = ['=', '<>', '>', '<', 'IS NULL', 'IS NOT NULL'];
        NumberFilter.operationList = [];
        return NumberFilter;
    }(AbstractFilter));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NumberFilter.sql;
        /**
         * @type {?}
         * @private
         */
        NumberFilter.operationList;
        /**
         * @type {?}
         * @private
         */
        NumberFilter.prototype._selectedIndex;
        /** @type {?} */
        NumberFilter.prototype.languagePack;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/international/table-Intl.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TableIntl = /** @class */ (function () {
        function TableIntl() {
            this.menuLabels = {
                saveData: 'Save Data',
                fullScreen: 'Full Screen',
                columnSetting: 'Column Setting',
                saveTableSetting: 'Save Table Setting',
                clearFilter: 'Clear Filter',
                jsonFile: 'Json File',
                csvFile: 'CSV File',
                printTable: 'Print Table',
                filterMode: 'Filter Mode:',
                filterLocalMode: 'Local',
                filterServerMode: 'Server',
                sortMode: 'Sort Mode:',
                sortLocalMode: 'Local',
                sortServerMode: 'Server',
                printMode: 'Print Mode',
                printYesMode: 'Yes',
                printNoMode: 'No',
                pinMode: 'Pin Mode:',
                pinNoneMode: 'None',
                pinStartMode: 'Start',
                pinEndMode: 'End',
                thereIsNoColumn: 'There is no column.'
            };
            this.paginatorLabels = {
                changes: new rxjs.Subject(),
                itemsPerPageLabel: 'Items per page:',
                nextPageLabel: 'Next Page:',
                previousPageLabel: 'Previous Page:',
                firstPageLabel: 'First Page:',
                lastPageLabel: 'Last Page:',
                getRangeLabel: (/**
                 * @param {?} page
                 * @param {?} pageSize
                 * @param {?} length
                 * @return {?}
                 */
                function (page, pageSize, length) {
                    if (length === 0 || pageSize === 0) {
                        return "0 of " + length;
                    }
                    length = Math.max(length, 0);
                    /** @type {?} */
                    var startIndex = page * pageSize;
                    /** @type {?} */
                    var endIndex = startIndex < length ?
                        Math.min(startIndex + pageSize, length) :
                        startIndex + pageSize;
                    return startIndex + 1 + " - " + endIndex + " of " + length;
                })
            };
            this.tableLabels = {
                NoData: 'No records found.'
            };
            this.filterLabels = {
                Clear: 'Clear',
                Search: 'Search',
                And: 'And',
                Or: 'Or',
                /* Text Compare */
                Text: 'Text',
                TextContains: 'Contains',
                TextEmpty: 'Empty',
                TextStartsWith: 'Starts With',
                TextEndsWith: 'Ends With',
                TextEquals: 'Equals',
                TextNotEmpty: 'Not Empty',
                /* Number Compare */
                Number: 'Number',
                NumberEquals: 'Equals',
                NumberNotEquals: 'Not Equals',
                NumberGreaterThan: 'Greater Than',
                NumberLessThan: 'Less Than',
                NumberEmpty: 'Empty',
                NumberNotEmpty: 'Not Empty',
                /* Category List Compare */
                CategoryContains: 'Contains',
                CategoryNotContains: 'Not Contains',
            };
        }
        TableIntl.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ TableIntl.ɵprov = core.ɵɵdefineInjectable({ factory: function TableIntl_Factory() { return new TableIntl(); }, token: TableIntl, providedIn: "root" });
        return TableIntl;
    }());
    if (false) {
        /** @type {?} */
        TableIntl.prototype.menuLabels;
        /** @type {?} */
        TableIntl.prototype.paginatorLabels;
        /** @type {?} */
        TableIntl.prototype.tableLabels;
        /** @type {?} */
        TableIntl.prototype.filterLabels;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dynamic-mat-table/extensions/filter/header-filter.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var listAnimation = animations.trigger('listAnimation', [
        animations.transition('* <=> *', [
            animations.query(':enter', [animations.style({ opacity: 0 }), animations.stagger('10ms', animations.animate('400ms ease-out', animations.style({ opacity: 1 })))], { optional: true }),
        ])
    ]);
    var HeaderFilterComponent = /** @class */ (function () {
        function HeaderFilterComponent(languagePack, service, cdr) {
            this.languagePack = languagePack;
            this.service = service;
            this.cdr = cdr;
            this.filterChanged = new core.EventEmitter();
            this.filterList = [];
        }
        Object.defineProperty(HeaderFilterComponent.prototype, "filters", {
            get: /**
             * @return {?}
             */
            function () {
                if (isNullorUndefined(this.filterList) === true || this.filterList.length === 0) {
                    this.filterList = [];
                    this.addNewFilter(this.field.type || 'text');
                }
                return this.filterList;
            },
            set: /**
             * @param {?} values
             * @return {?}
             */
            function (values) {
                this.filterList = values;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeaderFilterComponent.prototype, "hasValue", {
            get: /**
             * @return {?}
             */
            function () {
                return this.filters && this.filters.filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return f.hasValue() === true; })).length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeaderFilterComponent.prototype, "showTrigger", {
            get: /**
             * @return {?}
             */
            function () {
                if (this.menu === undefined) {
                    return false;
                }
                else {
                    return this.menu.menuOpen || this.hasValue;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        HeaderFilterComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.eventsSubscription) {
                this.eventsSubscription.unsubscribe();
            }
        };
        /**
         * @return {?}
         */
        HeaderFilterComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            if (isNullorUndefined(this.filters)) {
                this.filters = [];
                this.addNewFilter(this.field.type);
            }
        };
        /**
         * @param {?=} type
         * @return {?}
         */
        HeaderFilterComponent.prototype.addNewFilter = /**
         * @param {?=} type
         * @return {?}
         */
        function (type) {
            if (type === void 0) { type = 'text'; }
            switch (type || 'text') {
                case 'text': {
                    this.filterList.push(new TextFilter(this.languagePack));
                    break;
                }
                case 'number': {
                    this.filterList.push(new NumberFilter(this.languagePack));
                    break;
                }
                case 'date': {
                    // this.compare = new DateCompare(service);
                    break;
                }
                case 'boolean': {
                    // this.compare = new BooleanCompare(service);
                    break;
                }
                default: this.filterList.push(new TextFilter(this.languagePack));
            }
            this.filters[this.filters.length - 1].selectedIndex = 0;
            return this.filters[this.filters.length - 1];
        };
        /**
         * @return {?}
         */
        HeaderFilterComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.menu) {
                this.eventsSubscription = this.menu.menuOpened.subscribe((/**
                 * @return {?}
                 */
                function () { return _this.focusToLastInput(); }));
            }
        };
        /**
         * @return {?}
         */
        HeaderFilterComponent.prototype.focusToLastInput = /**
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.filterInputList.length > 0) {
                    _this.filterInputList.last.focus();
                }
            }));
        };
        /**
         * @param {?} index
         * @param {?} action
         * @return {?}
         */
        HeaderFilterComponent.prototype.filterAction_OnClick = /**
         * @param {?} index
         * @param {?} action
         * @return {?}
         */
        function (index, action) {
            var _this = this;
            if (action === 0 || action === 1) { // and or
                this.filters[index].type = action === 0 ? 'and' : 'or';
                if (this.filters.length === index + 1) {
                    this.addNewFilter(this.field.type);
                    this.focusToLastInput();
                }
            }
            else if (action === 2 && this.filters.length > 1) { // delete
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.filters.splice(index, 1);
                    _this.cdr.detectChanges();
                    _this.focusToLastInput();
                })); // bug for delete filter item(unwanted reaction close menu)
            }
        };
        /**
         * @return {?}
         */
        HeaderFilterComponent.prototype.clearColumn_OnClick = /**
         * @return {?}
         */
        function () {
            this.filterList = [];
            this.filterChanged.emit(this.filterList);
        };
        /**
         * @return {?}
         */
        HeaderFilterComponent.prototype.applyFilter_OnClick = /**
         * @return {?}
         */
        function () {
            this.filterChanged.emit(this.filterList);
        };
        HeaderFilterComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'header-filter',
                        template: "<ng-content></ng-content>\r\n\r\n<mat-menu filter-event #filterMenu=\"matMenu\" class=\"menu\" >\r\n  <ng-template matMenuContent>\r\n\r\n  <div filter-event class=\"menu-title\">\r\n    {{field?.header}}\r\n  </div>\r\n  <div [@listAnimation]=\"filters.length\" filter-event *ngFor=\"let filter of filters; let index = index\" class=\"filter-panel\">\r\n\r\n    <mat-form-field>\r\n      <mat-select [value]=\"filter.selectedIndex\" [panelClass]=\"'mat-elevation-z10'\" (selectionChange)=\"filter.selectedIndex = $event.value;\" placeholder='Conditions' (keyup.enter)=\"applyFilter_OnClick()\">\r\n        <mat-option *ngFor=\"let op of filter.getOperations(); let selectedIndex=index\" [value]=\"selectedIndex\">\r\n          {{ op.text }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <div *ngFor=\"let ctrl of filter?.parameters\">\r\n      <mat-form-field class=\"input-field\">\r\n        <mat-label>{{ctrl.text}}</mat-label>\r\n        <input matInput #filterInput=\"matInput\" [(ngModel)]=\"ctrl.value\" [placeholder]=\"\" (keyup.enter)=\"applyFilter_OnClick()\" autocomplete=\"off\"/>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div class=\"or-and\">\r\n      <span *ngIf=\"filters?.length !== index+1\" class=\"selected-filter-type\">{{ filter?.type === 'and' ? languagePack.filterLabels.And : languagePack.filterLabels.Or}}</span>\r\n      <span class=\"svg\">\r\n        <mat-icon (click)=\"filterAction_OnClick(index,0)\">add</mat-icon>\r\n      </span>\r\n      <span class=\"svg\">\r\n        <mat-icon (click)=\"filterAction_OnClick(index,1)\" style=\"transform: rotate(90deg);\">drag_handle</mat-icon>\r\n      </span>\r\n      <span class=\"svg\">\r\n        <mat-icon (click)=\"filterAction_OnClick(index,2)\">clear</mat-icon>\r\n      </span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div filter-event class=\"menu-action\">\r\n    <button mat-raised-button (click)=\"clearColumn_OnClick()\">{{ languagePack.filterLabels.Clear }}</button>\r\n    <button mat-raised-button color=\"primary\" (click)=\"applyFilter_OnClick()\">{{ languagePack.filterLabels.Search}}</button>\r\n  </div>\r\n</ng-template>\r\n</mat-menu>\r\n\r\n<span class=\"trigger\" [matMenuTriggerFor]=\"filterMenu\" *ngIf=\"field.filterable !== false\">\r\n  <mat-icon>filter_list</mat-icon>\r\n</span>\r\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        animations: [listAnimation],
                        styles: ["@media print{.printpreview{background-color:#fff;position:fixed;width:100%;height:auto;z-index:99999999;margin:0;padding:0;top:0;left:0;overflow:visible;display:block}}.disable-backdrop-click .cdk-overlay-backdrop.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing{pointer-events:none}:host{display:flex;align-items:center;width:100%;align-self:stretch}.trigger{color:rgba(0,0,0,.3);display:flex;opacity:0;transform:translateY(-5px);cursor:pointer;transition-duration:.4s;transition-property:opacity,transform;position:sticky;right:0;z-index:1;padding-left:0 8px}:host.has-value .trigger{color:rgba(0,0,0,.54)}:host.show-trigger .trigger,:host:hover .trigger{opacity:1;transform:translateY(-1px)}::ng-deep.mat-menu-content:not(:empty){padding:0!important}.mat-menu-item-highlighted:not([disabled]),.mat-menu-item.cdk-keyboard-focused:not([disabled]),.mat-menu-item.cdk-program-focused:not([disabled]),.mat-menu-item:hover:not([disabled]){background-color:inherit}.input-field{margin-top:-15px}.menu-title{font-weight:bolder;top:-8px;position:sticky;background-color:#fff;z-index:1}.menu-action{position:sticky;bottom:-8px;padding-top:10px;padding-bottom:0;background-color:#fff}.menu-action button{width:calc(50% - 10px);margin:5px;border-radius:10px}.filter-panel{border-radius:5px;background-color:#fdfbfb;border:1px solid #efefef;transition:.5s;padding:5px;overflow:hidden;font-size:14px;margin-top:10px;display:flex;flex-direction:column}.filter-panel:nth-child(2){margin-top:0!important}.filter-panel:hover{border:1px solid #d1d1d1}.filter-panel:hover .svg{opacity:1;transform:translateY(-1px)}.or-and{display:inherit!important;text-align:right;margin:-12px 0;height:35px;cursor:inherit;font-size:12px}.svg{opacity:0;transform:translateY(-5px);transition-duration:.4s;transition-property:opacity,transform;margin-left:5px;padding:2px;border-radius:5px;color:#4c4c4c;cursor:pointer;display:inline-block!important;height:24px}.svg mat-icon{margin:0;vertical-align:top;border-radius:5px}.svg mat-icon:hover{color:#fff;background-color:#89898a}.svg:hover{background-color:#f8f8f8}.selected-filter-type{float:left;color:#fff;background-color:#89898a;border-radius:5px;padding:0 4px;line-height:24px}::ng-deep .menu{padding:8px;-webkit-user-select:none;-moz-user-select:none;user-select:none}"]
                    }] }
        ];
        /** @nocollapse */
        HeaderFilterComponent.ctorParameters = function () { return [
            { type: TableIntl },
            { type: TableService },
            { type: core.ChangeDetectorRef }
        ]; };
        HeaderFilterComponent.propDecorators = {
            field: [{ type: core.Input }],
            filterChanged: [{ type: core.Output }],
            filterInputList: [{ type: core.ContentChildren, args: ['filterInput',] }],
            menu: [{ type: core.ViewChild, args: [menu.MatMenuTrigger, { static: true },] }],
            filters: [{ type: core.Input }],
            hasValue: [{ type: core.HostBinding, args: ['class.has-value',] }],
            showTrigger: [{ type: core.HostBinding, args: ['class.show-trigger',] }]
        };
        return HeaderFilterComponent;
    }());
    if (false) {
        /** @type {?} */
        HeaderFilterComponent.prototype.field;
        /** @type {?} */
        HeaderFilterComponent.prototype.filterChanged;
        /** @type {?} */
        HeaderFilterComponent.prototype.filterInputList;
        /** @type {?} */
        HeaderFilterComponent.prototype.menu;
        /**
         * @type {?}
         * @private
         */
        HeaderFilterComponent.prototype.filterList;
        /**
         * @type {?}
         * @private
         */
        HeaderFilterComponent.prototype.eventsSubscription;
        /** @type {?} */
        HeaderFilterComponent.prototype.languagePack;
        /** @type {?} */
        HeaderFilterComponent.prototype.service;
        /**
         * @type {?}
         * @private
         */
        HeaderFilterComponent.prototype.cdr;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dynamic-mat-table/extensions/print-dialog/print-dialog.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // tslint:disable-next-line:max-line-length
    /** @type {?} */
    var styles = 'body{margin:15px;}table{width:100%;border-collapse:collapse;}h2{text-align:center;}th.mat-header-cell{text-align:center;}div{text-align:center;margin:30px }tr{border-bottom:1px solid }td,th{padding:10px; text-align: center }.param-list{text-align: left;border:solid gray;border-width: 0px 0px 2px 0;margin-bottom: 10px;padding-bottom: 10px;}.param {display: inline-block;margin: 10px;}';
    var PrintTableDialogComponent = /** @class */ (function () {
        function PrintTableDialogComponent(dialogRef, printTable) {
            this.dialogRef = dialogRef;
            this.printTable = printTable;
        }
        /**
         * @return {?}
         */
        PrintTableDialogComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
        };
        /**
         * @return {?}
         */
        PrintTableDialogComponent.prototype.print = /**
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var dialogConfig = 'width=600,height=700,scrollbars=no,menubar=no,toolbar=no,location=no,status=no,titlebar=no';
                /** @type {?} */
                var printDoc = "\n    <html>\n      <head>\n        <style> " + styles + " </style>\n      </head>\n      <body onload=\"window.print();\" onafterprint=\"window.close()\">\n        " + _this.printContentRef.nativeElement.innerHTML + "\n      </body>\n    </html>\n    ";
                /** @type {?} */
                var popupWinindow = window.open('', '_blank', dialogConfig);
                popupWinindow.document.write(printDoc);
                popupWinindow.document.close();
            }));
        };
        PrintTableDialogComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line: component-selector
                        selector: 'print-dialog',
                        template: "<mat-dialog-content>\r\n<div dir='{{ printTable.direction }}' #printContentRef>\r\n  <h2>\r\n      {{ printTable?.title }}\r\n  </h2>\r\n  <div class=\"param-list\">\r\n      <div class=\"param\" *ngFor='let param of printTable?.userPrintParameters'>\r\n         <b>{{ param.key }} </b> : {{ param.value }}\r\n      </div>\r\n      <div class=\"param\" *ngFor='let param of printTable?.tablePrintParameters'>\r\n        <b>{{ param.key }} </b> : {{ param.value }}\r\n     </div>\r\n  </div>\r\n  <table class=\"print-table\" mat-table [dataSource]=\"printTable.data\">\r\n      <ng-container *ngFor=\"let column of printTable.columns\" matColumnDef=\"{{ column.name }}\">\r\n        <th mat-header-cell *matHeaderCellDef> {{ column.header }} </th>\r\n        <td mat-cell *matCellDef=\"let row\"> {{ row[column.name] }} </td>\r\n      </ng-container>\r\n      <tr mat-header-row *matHeaderRowDef=\"printTable.displayedFields\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: printTable.displayedFields;\"></tr>\r\n  </table>\r\n</div>\r\n\r\n</mat-dialog-content>\r\n\r\n<mat-dialog-actions align=\"end\">\r\n  <button mat-button mat-dialog-close>Cancel</button>\r\n  <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial (click)=\"print()\">Print</button>\r\n</mat-dialog-actions>\r\n\r\n",
                        styles: ["#print-section{text-align:center;margin:30px}h2{text-align:center}.param-list{width:100%;display:inline-block;border:solid gray;border-width:0 0 2px;margin-bottom:10px;padding-bottom:10px}.param{display:inline-block;margin:10px}.print-table{width:100%}.print-table th.mat-header-cell{font-size:initial}"]
                    }] }
        ];
        /** @nocollapse */
        PrintTableDialogComponent.ctorParameters = function () { return [
            { type: dialog.MatDialogRef },
            { type: undefined, decorators: [{ type: core.Inject, args: [dialog.MAT_DIALOG_DATA,] }] }
        ]; };
        PrintTableDialogComponent.propDecorators = {
            printContentRef: [{ type: core.ViewChild, args: ['printContentRef', { static: true },] }]
        };
        return PrintTableDialogComponent;
    }());
    if (false) {
        /** @type {?} */
        PrintTableDialogComponent.prototype.printContentRef;
        /** @type {?} */
        PrintTableDialogComponent.prototype.dialogRef;
        /** @type {?} */
        PrintTableDialogComponent.prototype.printTable;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/models/resize-column.mode.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ResizeColumn = /** @class */ (function () {
        function ResizeColumn() {
            this.resizeHandler = null;
            this.widthUpdate = new rxjs.Subject();
        }
        return ResizeColumn;
    }());
    if (false) {
        /** @type {?} */
        ResizeColumn.prototype.startX;
        /** @type {?} */
        ResizeColumn.prototype.startWidth;
        /** @type {?} */
        ResizeColumn.prototype.isResizingRight;
        /** @type {?} */
        ResizeColumn.prototype.currentResizeIndex;
        /** @type {?} */
        ResizeColumn.prototype.resizeHandler;
        /** @type {?} */
        ResizeColumn.prototype.widthUpdate;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/utilies/html.helper.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} element
     * @return {?}
     */
    function requestFullscreen(element) {
        if (element.nativeElement.requestFullscreen) {
            element.nativeElement.requestFullscreen();
        }
        else if (element.nativeElement.webkitRequestFullscreen) { /* Safari */
            element.nativeElement.webkitRequestFullscreen();
        }
        else if (element.nativeElement.msRequestFullscreen) { /* IE11 */
            element.nativeElement.msRequestFullscreen();
        }
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dynamic-mat-table/dynamic-mat-table.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var tableAnimation = animations.trigger('tableAnimation', [
        animations.transition('void => *', [
            animations.query(':enter', animations.style({ transform: 'translateX(-50%)', opacity: 0 }), {
                //limit: 5,
                optional: true,
            }),
            animations.query(':enter', animations.stagger('0.01s', [
                animations.animate('0.5s ease', animations.style({ transform: 'translateX(0%)', opacity: 1 })),
            ]), {
                //limit: 5, 
                optional: true
            }),
        ]),
    ]);
    /** @type {?} */
    var expandAnimation = animations.trigger('detailExpand', [
        animations.state('collapsed', animations.style({ height: '0px', minHeight: '0' })),
        animations.state('expanded', animations.style({ height: '*' })),
        animations.transition('expanded <=> collapsed', animations.animate('100ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
    ]);
    /** @type {?} */
    var cellTooltipDefaults = {
        showDelay: 500,
        hideDelay: 400,
        touchendHideDelay: 1000,
        position: 'above',
    };
    /**
     * @template T
     */
    var DynamicMatTableComponent = /** @class */ (function (_super) {
        __extends(DynamicMatTableComponent, _super);
        function DynamicMatTableComponent(dialog, renderer, languagePack, tableService, cdr, overlayContainer) {
            var _this = _super.call(this, tableService, cdr) || this;
            _this.dialog = dialog;
            _this.renderer = renderer;
            _this.languagePack = languagePack;
            _this.tableService = tableService;
            _this.cdr = cdr;
            _this.overlayContainer = overlayContainer;
            _this.contextMenuPosition = { x: '0px', y: '0px' };
            _this.dragDropData = { dragColumnIndex: -1, dropColumnIndex: -1 };
            _this.printing = true;
            _this.printTemplate = null;
            _this.resizeColumn = new ResizeColumn();
            _this.indexTrackFn = (/**
             * @param {?} index
             * @return {?}
             */
            function (index) {
                return index;
            });
            _this.currentContextMenuSender = {};
            _this.overlayContainer.getContainerElement().addEventListener('contextmenu', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.preventDefault();
                return false;
            }));
            _this.eventsSubscription = _this.resizeColumn.widthUpdate.pipe(operators.delay(100)).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.columns[data.i].width = data.w;
                if (_this.tableSetting.columnSetting[data.i]) {
                    _this.tableSetting.columnSetting[data.i].width = data.w;
                }
                _this.refreshGrid();
            }));
            return _this;
        }
        Object.defineProperty(DynamicMatTableComponent.prototype, "setting", {
            get: /**
             * @return {?}
             */
            function () {
                return this.tableSetting;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (!isNullorUndefined(value)) {
                    value.columnSetting = value.columnSetting || this.tableSetting.columnSetting;
                    value.alternativeRowStyle = value.alternativeRowStyle || this.tableSetting.alternativeRowStyle;
                    value.columnSetting = value.columnSetting || this.tableSetting.columnSetting;
                    value.direction = value.direction || this.tableSetting.direction;
                    value.normalRowStyle = value.normalRowStyle || this.tableSetting.normalRowStyle;
                    value.visibaleActionMenu = value.visibaleActionMenu || this.tableSetting.visibaleActionMenu;
                    value.visibleTableMenu = value.visibleTableMenu || this.tableSetting.visibleTableMenu;
                    this.tableSetting = value;
                    this.setDisplayedColumns();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        DynamicMatTableComponent.prototype.trackColumn = /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        function (index, item) {
            return "" + item.index;
        };
        /**
         * @return {?}
         */
        DynamicMatTableComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.eventsSubscription) {
                this.eventsSubscription.unsubscribe();
            }
        };
        /**
         * @return {?}
         */
        DynamicMatTableComponent.prototype.refreshUI = /**
         * @return {?}
         */
        function () {
            var _a, _b;
            /** @type {?} */
            var scrollStrategy = this.viewport['_scrollStrategy'];
            (_a = scrollStrategy === null || scrollStrategy === void 0 ? void 0 : scrollStrategy.viewport) === null || _a === void 0 ? void 0 : _a.checkViewportSize();
            (_b = scrollStrategy === null || scrollStrategy === void 0 ? void 0 : scrollStrategy.viewport) === null || _b === void 0 ? void 0 : _b.scrollToOffset(0);
            this.cdr.detectChanges();
        };
        /**
         * @return {?}
         */
        DynamicMatTableComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var scrollStrategy = this.viewport['_scrollStrategy'];
            scrollStrategy.offsetChange.subscribe((/**
             * @param {?} offset
             * @return {?}
             */
            function (offset) {
                // console.log(offset);
            }));
            this.viewport.renderedRangeStream.subscribe((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                // in expanding row scrolling make not good apperance therefor close it.
                if (_this.expandedElement && _this.expandedElement.option && _this.expandedElement.option.expand) {
                    // console.log('clear', t); 
                    // this.expandedElement.option.expand = false;
                    // this.expandedElement = null;
                }
            }));
        };
        /**
         * @return {?}
         */
        DynamicMatTableComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.tvsDataSource.paginator = this.paginator;
            this.tvsDataSource.sort = this.sort;
            this.dataSource.subscribe((/**
             * @param {?} x
             * @return {?}
             */
            function (x) {
                //console.log(x);      
                _this.initSystemField(x);
                _this.tvsDataSource.data = x;
                // this.cdr.detectChanges();
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.refreshUI();
                }), 0);
            }));
            this.tvsDataSource.sort.sortChange.subscribe((/**
             * @param {?} sort
             * @return {?}
             */
            function (sort) {
                _this.pagination.pageIndex = 0;
                _this.onTableEvent.emit({ event: 'SortChanged', sender: sort });
            }));
            // this.dataSource.dataOfRange$.subscribe((data) => {
            //   // console.log('dataOfRange');
            // });
        };
        Object.defineProperty(DynamicMatTableComponent.prototype, "inverseOfTranslation", {
            get: /**
             * @return {?}
             */
            function () {
                if (!this.viewport || !this.viewport["_renderedContentOffset"]) {
                    return -0;
                }
                /** @type {?} */
                var offset = this.viewport["_renderedContentOffset"];
                return -offset;
            },
            enumerable: true,
            configurable: true
        });
        // TO DO
        // TO DO
        /**
         * @param {?} cellRef
         * @return {?}
         */
        DynamicMatTableComponent.prototype.ellipsis = 
        // TO DO
        /**
         * @param {?} cellRef
         * @return {?}
         */
        function (cellRef) {
            // console.log(cellRef.clientHeight);
            // console.log(cellRef.scrollHeight);
            if (cellRef.clientHeight > this.rowHeight) {
                cellRef.style.maxHeight = '48px';
            }
        };
        /**
         * @param {?} row
         * @return {?}
         */
        DynamicMatTableComponent.prototype.rowStyle = /**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            var _a;
            /** @type {?} */
            var style = ((_a = row === null || row === void 0 ? void 0 : row.option) === null || _a === void 0 ? void 0 : _a.style) || {};
            if (this.setting.alternativeRowStyle && row.id % 2 === 0) {
                // style is high priority
                style = __assign(__assign({}, this.setting.alternativeRowStyle), style);
            }
            if (this.setting.rowStyle) {
                style = __assign(__assign({}, this.setting.rowStyle), style);
            }
            return style;
        };
        /**
         * @param {?} option
         * @param {?} column
         * @return {?}
         */
        DynamicMatTableComponent.prototype.cellClass = /**
         * @param {?} option
         * @param {?} column
         * @return {?}
         */
        function (option, column) {
            /** @type {?} */
            var clas = null;
            if (option && column.name) {
                clas = option[column.name] ? option[column.name].style : null;
            }
            if (clas === null) {
                return column.cellClass;
            }
            else {
                return __assign(__assign({}, clas), column.cellClass);
            }
        };
        /**
         * @param {?} option
         * @param {?} column
         * @return {?}
         */
        DynamicMatTableComponent.prototype.cellStyle = /**
         * @param {?} option
         * @param {?} column
         * @return {?}
         */
        function (option, column) {
            /** @type {?} */
            var style = null;
            if (option && column.name) {
                style = option[column.name] ? option[column.name].style : null;
            }
            if (style === null) {
                return column.cellStyle;
            }
            else {
                return __assign(__assign({}, style), column.cellStyle);
            }
        };
        /**
         * @param {?} option
         * @param {?} cellName
         * @return {?}
         */
        DynamicMatTableComponent.prototype.cellIcon = /**
         * @param {?} option
         * @param {?} cellName
         * @return {?}
         */
        function (option, cellName) {
            if (option && cellName) {
                return option[cellName] ? option[cellName].icon : null;
            }
            else {
                return null;
            }
        };
        /**
         * @param {?} column
         * @param {?} filter
         * @return {?}
         */
        DynamicMatTableComponent.prototype.filter_onChanged = /**
         * @param {?} column
         * @param {?} filter
         * @return {?}
         */
        function (column, filter) {
            var _this = this;
            this.pending = true;
            this.tvsDataSource.setFilter(column.name, filter).subscribe((/**
             * @return {?}
             */
            function () {
                _this.pending = false;
            }));
        };
        /**
         * @param {?} event
         * @param {?} column
         * @param {?} row
         * @return {?}
         */
        DynamicMatTableComponent.prototype.onContextMenu = /**
         * @param {?} event
         * @param {?} column
         * @param {?} row
         * @return {?}
         */
        function (event, column, row) {
            var _a, _b;
            if (((_a = this.currentContextMenuSender) === null || _a === void 0 ? void 0 : _a.time) && (new Date().getTime() - this.currentContextMenuSender.time) < 500) {
                return;
            }
            this.contextMenu.closeMenu();
            if (((_b = this.contextMenuItems) === null || _b === void 0 ? void 0 : _b.length) === 0) {
                return;
            }
            event.preventDefault();
            this.contextMenuPosition.x = event.clientX + 'px';
            this.contextMenuPosition.y = event.clientY + 'px';
            this.currentContextMenuSender = { column: column, row: row, time: new Date().getTime() };
            this.contextMenu.menuData = this.currentContextMenuSender;
            this.contextMenu.menu.focusFirstItem('mouse');
            this.onRowEvent.emit({ event: 'BeforContextMenuOpen', sender: { row: row, column: column, contextMenu: this.contextMenuItems } });
            this.contextMenu.openMenu();
        };
        /**
         * @param {?} data
         * @return {?}
         */
        DynamicMatTableComponent.prototype.onContextMenuItemClick = /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this.contextMenu.menuData.item = data;
            this.onRowEvent.emit({ event: 'ContextMenuClick', sender: this.contextMenu.menuData });
        };
        /**
         * @param {?} e
         * @return {?}
         */
        DynamicMatTableComponent.prototype.tableMenuActionChange = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            var _this = this;
            if (e.type === 'TableSetting') {
                this.saveSetting(e.data, false);
            }
            else if (e.type === 'FullScreenMode') {
                requestFullscreen(this.tbl.elementRef);
            }
            else if (e.type === 'Download') {
                if (e.data === 'CSV') {
                    this.tableService.exportToCsv(this.columns, this.tvsDataSource.filteredData, this.rowSelectionModel);
                }
                else if (e.data === 'JSON') {
                    this.tableService.exportToJson(this.tvsDataSource.filteredData);
                }
            }
            else if (e.type === 'FilterClear') {
                this.tvsDataSource.clearFilter();
                this.headerFilterList.forEach((/**
                 * @param {?} hf
                 * @return {?}
                 */
                function (hf) { return hf.clearColumn_OnClick(); }));
            }
            else if (e.type === 'Print') {
                this.printConfig.displayedFields = this.columns
                    .filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return isNullorUndefined(c.printable) || c.printable === true; }))
                    .map((/**
                 * @param {?} o
                 * @return {?}
                 */
                function (o) { return o.name; }));
                this.printConfig.title = this.printConfig.title || this.tableName;
                this.printConfig.direction = this.tableSetting.direction || 'ltr';
                this.printConfig.columns = this.tableColumns;
                this.printConfig.data = this.tvsDataSource.filteredData;
                /** @type {?} */
                var params = this.tvsDataSource.toTranslate();
                this.printConfig.tablePrintParameters = [];
                params.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    _this.printConfig.tablePrintParameters.push(item);
                }));
                this.dialog.open(PrintTableDialogComponent, {
                    width: '90vw',
                    data: this.printConfig,
                });
            }
            else if (e.type === 'SaveSetting') {
                this.saveSetting(null, true);
            }
        };
        /**
         * @param {?} contextMenuItem
         * @param {?} row
         * @return {?}
         */
        DynamicMatTableComponent.prototype.rowMenuActionChange = /**
         * @param {?} contextMenuItem
         * @param {?} row
         * @return {?}
         */
        function (contextMenuItem, row) {
            console.log('contextMenuItem');
            this.onRowEvent.emit({ event: 'RowActionMenu', sender: { row: row, action: contextMenuItem } });
            // this.rowActionMenuChange.emit({actionItem: contextMenuItem, rowItem: row });
        };
        /**
         * @param {?} e
         * @return {?}
         */
        DynamicMatTableComponent.prototype.doRendering = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            this.pending = false;
            if (this.viewport.getViewportSize() === 0) {
                // console.log('zero');
            }
        };
        /**
         * @param {?} e
         * @return {?}
         */
        DynamicMatTableComponent.prototype.pagination_onChange = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            // console.log(e);
            this.pending = true;
            this.tvsDataSource.refreshFilterPredicate(); // pagination Bugfixed
            this.paginationChange.emit(e);
        };
        /**
         * @return {?}
         */
        DynamicMatTableComponent.prototype.reload_onClick = /**
         * @return {?}
         */
        function () {
            this.onTableEvent.emit({ sender: null, event: 'ReloadData' });
        };
        /////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////
        /**
         * @param {?} event
         * @param {?} index
         * @param {?} type
         * @return {?}
         */
        DynamicMatTableComponent.prototype.onResizeColumn = 
        /////////////////////////////////////////////////////////////////
        /**
         * @param {?} event
         * @param {?} index
         * @param {?} type
         * @return {?}
         */
        function (event, index, type) {
            // console.log(index,type);    
            this.resizeColumn.resizeHandler = type;
            this.resizeColumn.startX = event.pageX;
            // console.log(this.resizeColumn.resizeHandler, this.resizeColumn.startX);
            if (this.resizeColumn.resizeHandler === 'right') {
                this.resizeColumn.startWidth = event.target.parentElement.clientWidth;
                this.resizeColumn.currentResizeIndex = index;
            }
            else {
                if (event.target.parentElement.previousElementSibling === null) {
                    // for first column not resize
                    return;
                }
                else {
                    this.resizeColumn.startWidth =
                        event.target.parentElement.previousElementSibling.clientWidth;
                    this.resizeColumn.currentResizeIndex = index;
                }
            }
            event.preventDefault();
            this.mouseMove(index);
        };
        /**
         * @param {?} index
         * @return {?}
         */
        DynamicMatTableComponent.prototype.mouseMove = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            var _this = this;
            this.resizableMousemove = this.renderer.listen('document', 'mousemove', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (_this.resizeColumn.resizeHandler !== null && event.buttons) {
                    /** @type {?} */
                    var rtl = _this.direction === 'rtl' ? -1 : 1;
                    /** @type {?} */
                    var width = 0;
                    if (_this.resizeColumn.resizeHandler === 'right') {
                        /** @type {?} */
                        var dx = event.pageX - _this.resizeColumn.startX;
                        width = _this.resizeColumn.startWidth + rtl * dx;
                    }
                    else {
                        /** @type {?} */
                        var dx = _this.resizeColumn.startX - event.pageX;
                        width = _this.resizeColumn.startWidth - rtl * dx;
                    }
                    if (_this.resizeColumn.currentResizeIndex === index && width > _this.minWidth) {
                        _this.resizeColumn.widthUpdate.next({
                            i: index - (_this.resizeColumn.resizeHandler === 'left' ? 1 : 0),
                            w: width,
                        });
                    }
                }
            }));
            this.resizableMouseup = this.renderer.listen('document', 'mouseup', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (_this.resizeColumn.resizeHandler !== null) {
                    _this.resizeColumn.resizeHandler = null;
                    _this.resizeColumn.currentResizeIndex = -1;
                }
            }));
        };
        /**
         * @param {?} rowIndex
         * @param {?=} mode
         * @return {?}
         */
        DynamicMatTableComponent.prototype.expandRow = /**
         * @param {?} rowIndex
         * @param {?=} mode
         * @return {?}
         */
        function (rowIndex, mode) {
            if (mode === void 0) { mode = true; }
            if (rowIndex === null || rowIndex === undefined) {
                throw 'Row index is not defined.';
            }
            if (this.expandedElement === this.tvsDataSource.allData[rowIndex]) {
                this.expandedElement.option.expand = mode;
                this.expandedElement = this.expandedElement === this.tvsDataSource.allData[rowIndex] ? null : this.tvsDataSource.allData[rowIndex];
            }
            else {
                if (this.expandedElement && this.expandedElement !== this.tvsDataSource.allData[rowIndex]) {
                    this.expandedElement.option.expand = false;
                }
                this.expandedElement = null;
                if (mode === true) {
                    // this.viewport.scrollToIndex(rowIndex, 'smooth');      
                    // setTimeout( () => {
                    //   this.expandedElement = this.expandedElement === this.dataSource.allData[rowIndex] ? null : this.dataSource.allData[rowIndex];    
                    //   if (this.expandedElement.option === undefined || this.expandedElement.option === null) {
                    //     this.expandedElement.option = { expand: false};
                    //   }
                    //   this.expandedElement.option.expand = true;
                    //   this.refreshGrid();
                    // }, 300);
                    this.expandedElement = this.expandedElement === this.tvsDataSource.allData[rowIndex] ? null : this.tvsDataSource.allData[rowIndex];
                    if (this.expandedElement.option === undefined || this.expandedElement.option === null) {
                        this.expandedElement.option = { expand: false };
                    }
                    this.expandedElement.option.expand = true;
                }
            }
        };
        /**
         * @param {?} e
         * @param {?} row
         * @param {?} column
         * @return {?}
         */
        DynamicMatTableComponent.prototype.onRowSelection = /**
         * @param {?} e
         * @param {?} row
         * @param {?} column
         * @return {?}
         */
        function (e, row, column) {
            if (this.rowSelectionMode && this.rowSelectionMode !== 'none' && column.rowSelectionable !== false) {
                this.onRowSelectionChange(e, row);
            }
        };
        /**
         * @param {?} e
         * @param {?} row
         * @param {?} column
         * @return {?}
         */
        DynamicMatTableComponent.prototype.onCellClick = /**
         * @param {?} e
         * @param {?} row
         * @param {?} column
         * @return {?}
         */
        function (e, row, column) {
            this.onRowSelection(e, row, column);
            if (column.clickable !== false) {
                this.onRowEvent.emit({ event: 'CellClick', sender: { row: row, column: column } });
            }
        };
        /**
         * @param {?} e
         * @param {?} row
         * @return {?}
         */
        DynamicMatTableComponent.prototype.onRowDblClick = /**
         * @param {?} e
         * @param {?} row
         * @return {?}
         */
        function (e, row) {
            this.onRowEvent.emit({ event: e, sender: { row: row } });
        };
        /**
         * @param {?} e
         * @param {?} row
         * @return {?}
         */
        DynamicMatTableComponent.prototype.onRowClick = /**
         * @param {?} e
         * @param {?} row
         * @return {?}
         */
        function (e, row) {
            this.onRowEvent.emit({ event: 'RowClick', sender: { row: row } });
        };
        /************************************ Drag & Drop Column *******************************************/
        /**
         * ********************************* Drag & Drop Column ******************************************
         * @param {?} event
         * @return {?}
         */
        DynamicMatTableComponent.prototype.dragStarted = /**
         * ********************************* Drag & Drop Column ******************************************
         * @param {?} event
         * @return {?}
         */
        function (event) {
            // console.log(event);    
            // debugger  
            // this.dragDropData.dragColumnIndex = event.source.;
        };
        /**
         * @param {?} event
         * @return {?}
         */
        DynamicMatTableComponent.prototype.dropListDropped = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event) {
                this.dragDropData.dropColumnIndex = event.currentIndex;
                this.moveColumn(event.previousIndex, event.currentIndex);
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        DynamicMatTableComponent.prototype.drop = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            dragDrop.moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);
            // updates moved data and table, but not dynamic if more dropzones
            // this.dataSource.data = clonedeep(this.dataSource.data);
        };
        /************************************  *******************************************/
        /**
         * *********************************  ******************************************
         * @param {?} from
         * @param {?} to
         * @return {?}
         */
        DynamicMatTableComponent.prototype.copyProperty = /**
         * *********************************  ******************************************
         * @param {?} from
         * @param {?} to
         * @return {?}
         */
        function (from, to) {
            /** @type {?} */
            var keys = Object.keys(from);
            keys.forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                if (from[key] !== undefined && from[key] === null) {
                    to[key] = Array.isArray(from[key]) ? Object.assign([], from[key]) : Object.assign({}, from[key]);
                }
            }));
        };
        DynamicMatTableComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line: component-selector
                        selector: 'dynamic-mat-table',
                        template: "<cdk-virtual-scroll-viewport\r\n  #tbl  \r\n  [ngClass]=\"viewportClass\"\r\n  [tvsItemSize]=\"rowHeight || 48\"\r\n  [headerHeight]=\"headerHeight || 56\"\r\n  [footerHeight]=\"headerHeight || 56\"\r\n  [headerEnabled]=\"headerEnable || true\"\r\n  [footerEnabled]=\"footerEnable || false\"\r\n  [ngStyle]=\"{'background-color': backgroundColor || 'white'}\" \r\n  [class.printpreview]=\"printing\"\r\n  (requestRendering)=\"doRendering($event)\">\r\n\r\n  <mat-table\r\n    matSort \r\n    class=\"table\"    \r\n    multiTemplateDataRows\r\n    [cdkDropListDisabled]=\"false\"    \r\n    cdkDropList \r\n    cdkDropListOrientation=\"horizontal\"    \r\n    (cdkDragStarted)=\"dragStarted($event)\"\r\n    (cdkDropListDropped)=\"dropListDropped($event)\"        \r\n    [trackBy]=\"indexTrackFn\"\r\n    [dataSource]=\"tvsDataSource\">\r\n    <!-- Checkbox Column -->\r\n    <ng-container matColumnDef=\"row-checkbox\">      \r\n        <mat-header-cell *matHeaderCellDef class=\"row-checkbox\" style=\"z-index: 2;\">\r\n          <mat-checkbox style=\"z-index: 10;\"\r\n            (change)=\"$event ? masterToggle() : null\"\r\n            [checked]=\"rowSelectionModel.hasValue() && isAllSelected()\"\r\n            [indeterminate]=\"rowSelectionModel.hasValue() && !isAllSelected()\"         \r\n            *ngIf=\"rowSelectionMode === 'multi'\">\r\n          </mat-checkbox>\r\n          <mat-icon *ngIf=\"rowSelectionMode === 'single'\">indeterminate_check_box</mat-icon>\r\n        </mat-header-cell>\r\n        <ng-container>\r\n          <mat-cell *matCellDef=\"let row\" class=\"row-checkbox\">\r\n            <mat-checkbox\r\n              (click)=\"$event.stopPropagation()\"\r\n              (change)=\"onRowSelectionChange($event, row)\"\r\n              [checked]=\"rowSelectionModel?.isSelected(row)\">\r\n            </mat-checkbox>\r\n          </mat-cell>\r\n        </ng-container>\r\n    </ng-container> \r\n    <!-- Table Columns -->\r\n    <ng-container *ngFor=\"let column of columns; let i = index; trackBy: trackColumn\" [matColumnDef]=\"column.name\"\r\n      [sticky]=\"column.sticky === 'start' ? true : false\" [stickyEnd]=\"column.sticky === 'end' ? true : false\">      \r\n      <!-- ************************** Table Header ************************* -->      \r\n        <mat-header-cell *matHeaderCellDef                \r\n          cdkDrag \r\n          [cdkDragDisabled]=\"column?.draggable === false\"\r\n          cdkDragBoundary=\"mat-header-row\"\r\n          cdkDropListLockAxis=\"x\"        \r\n          [cdkDragData]=\"{name: column.name, columIndex: i}\"        \r\n          [style.maxWidth.px]=\"column.width\"\r\n          [style.minWidth.px]=\"column.width\"        \r\n          [class.active-resize]=\"resizeColumn.currentResizeIndex===i\" cdkDragBoundary=\"mat-header-row\">\r\n          <div class=\"left-resizer-handler\" (mousedown)=\"onResizeColumn($event, i, 'left')\"></div>\r\n          <header-filter [field]=\"column\" (filterChanged)=\"filter_onChanged(column, $event)\" [filters]=\"tvsDataSource.getFilter(column.name)\">\r\n            <mat-icon class=\"column-icon\" [ngStyle]=\"{ 'color': column?.iconColor }\">{{column?.icon}}</mat-icon>          \r\n            <mat-icon *ngIf=\"column?.draggable != false\" class=\"drag-indicator\" cdkDragHandle>drag_indicator</mat-icon>\r\n            <div mat-sort-header [matTooltip]=\"column.header\" matTooltipClass=\"cell-tooltip\" [disabled]=\"column.sortable === false\" class=\"header-caption\">{{ column.header }}</div>\r\n          </header-filter> \r\n          <div\r\n            class=\"right-resizer-handler\"\r\n            (mousedown)=\"onResizeColumn($event, i, 'right')\"\r\n          ></div>\r\n        </mat-header-cell>           \r\n      <!-- ************************** Table Cell ************************* -->\r\n      \r\n      <mat-cell *matCellDef=\"let row;\"                    \r\n                [style.maxWidth.px]=\"column.width\"\r\n                [style.minWidth.px]=\"column.width\"\r\n                [class]=\"row[column.cellClass]\"\r\n                (click)=\"onCellClick($event, row, column)\"                  \r\n                [ngClass]=\"cellClass(row?.option, column)\"\r\n                [ngStyle]=\"cellStyle(row?.option, column)\"\r\n                (contextmenu)=\"onContextMenu($event, column, row)\">          \r\n        <label *ngIf=\"!column.dynamicCellComponent\" [class.rtl-cell]=\"direction === 'rtl'\" [class.ltr-cell]=\"direction === 'ltr'\">{{row[column.name]}}</label>          \r\n        <ng-container *ngIf=\"column.dynamicCellComponent\" dynamicCell [component]=\"column.dynamicCellComponent\" [column]=\"column\" [row]=\"row\" [onRowEvent]=\"onRowEvent\">\r\n        </ng-container> \r\n      </mat-cell>\r\n    </ng-container> \r\n\r\n    <ng-container matColumnDef=\"progress\" > \r\n      <mat-header-cell\r\n        *matHeaderCellDef\r\n        [attr.colspan]=\"displayedColumns.length\">\r\n        <mat-progress-bar mode=\"indeterminate\" [class.show]=\"pending\">\r\n        </mat-progress-bar>\r\n      </mat-header-cell>\r\n    </ng-container>\r\n\r\n    <!-- Expanded Content Column - The detail row is made up of Dynamic Cell -->\r\n    <ng-container *ngIf=\"expandColumn.length > 0\" matColumnDef=\"expandedDetail\">\r\n      <td mat-cell *matCellDef=\"let row\" [attr.colspan]=\"displayedColumns.length\" class=\"expanded-detail-cell\">\r\n        <div class=\"expanded-detail\" [@detailExpand]=\"row == expandedElement ? 'expanded' : 'collapsed'\">\r\n          <ng-container dynamicCell [component]=\"expandComponent\" [row]=\"row\" [onRowEvent]=\"onRowEvent\">\r\n          </ng-container> \r\n        </div>\r\n      </td>\r\n    </ng-container>\r\n    <!-- Table Menu[ Sort, Visible, Export] -->\r\n    <ng-container matColumnDef=\"table-menu\" [stickyEnd]=\"true\" *ngIf=\"setting?.visibleTableMenu !== false\">\r\n      <mat-header-cell *matHeaderCellDef class=\"table-menu\">\r\n        <table-menu\r\n          [tableSetting]=\"tableSetting\"\r\n          (menuActionChange)=\"tableMenuActionChange($event)\"\r\n        ></table-menu> \r\n      </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let row\" class=\"table-menu\">\r\n        <row-menu *ngIf=\"rowContextMenuItems && rowContextMenuItems.length > 0\" [rowActionMenu]=\"row?.actionMenu\" [actionMenus]=\"rowContextMenuItems\" [tableSetting]=\"tableSetting\" (rowActionChange)=\"rowMenuActionChange($event, row)\"></row-menu>\r\n      </mat-cell>\r\n    </ng-container>\r\n    <!-- Row Table[Header, Data, Footer] -->    \r\n    <mat-row \r\n      *matRowDef=\"let row; columns: displayedColumns;\"      \r\n      (dblclick)=\"onRowDblClick($event, row)\"\r\n      (click)=\"onRowClick($event, row)\"\r\n      [style.height.px]=\"rowHeight\"\r\n      class=\"table-row\" \r\n      [ngClass]=\"row?.option?.class\"\r\n      [ngStyle]=\"rowStyle(row)\"      \r\n      [class.expanded-row]=\"expandedElement === row\"\r\n      [class.row-selection]=\"rowSelectionModel ? rowSelectionModel.isSelected(row) : false\"\r\n      (contextmenu)=\"onContextMenu($event, null, row)\">\r\n    </mat-row>\r\n    <ng-container *ngIf=\"expandColumn.length > 0\">      \r\n      <tr mat-row *matRowDef=\"let expandRow; columns: expandColumn\" class=\"detail-row\"></tr>\r\n    </ng-container>    \r\n    <mat-header-row class=\"header\" [@tableAnimation] *matHeaderRowDef=\"displayedColumns; sticky: sticky\" [style.top.px]=\"inverseOfTranslation\"></mat-header-row >\r\n    <mat-header-row class=\"progress\" *matHeaderRowDef=\"progressColumn; sticky: sticky\" [style.top.px]=\"inverseOfTranslation + headerHeight - 5\" ></mat-header-row>\r\n  </mat-table> \r\n</cdk-virtual-scroll-viewport>\r\n<mat-paginator\r\n  *ngIf=\"pagingMode !== 'none'\"\r\n  class=\"table-paginator\"\r\n  [length]=\"pagination?.length\"\r\n  [pageSize]=\"pagination?.pageSize\"\r\n  [pageIndex]=\"pagination?.pageIndex\"\r\n  (page)=\"pagination_onChange($event)\"\r\n  [pageSizeOptions]=\"pagination?.pageSizeOptions\">\r\n</mat-paginator>\r\n<ng-content></ng-content>\r\n \r\n<div class=\"no-records\" *ngIf=\"showNoData === true && (!tvsDataSource || tvsDataSource.data.length === 0)\">\r\n  <!-- <mat-icon>web</mat-icon>  -->\r\n  {{ languagePack?.tableLabels.NoData }}  \r\n  <br>\r\n  <button *ngIf=\"showReload\" mat-icon-button color=\"primary\" (click)=\"reload_onClick()\"><mat-icon>autorenew</mat-icon></button>\r\n</div>\r\n\r\n<!-- Context Menu -->\r\n<div style=\"visibility: hidden; position: fixed\"  \r\n  [style.left]=\"contextMenuPosition.x\"\r\n  [style.top]=\"contextMenuPosition.y\"\r\n  [matMenuTriggerFor]=\"contextMenu\">\r\n</div>\r\n<mat-menu #contextMenu=\"matMenu\">\r\n\t<ng-template matMenuContent let-item=\"item\">\t\t\r\n    <ng-container *ngFor=\"let menu of contextMenuItems\">\r\n      <button mat-button [class.ltr-menu]=\"tableSetting.direction === 'rtl'\" [color]=\"menu.color\" class=\"button-menu\" \r\n        [disabled]=\"menu.disabled\" (click)=\"onContextMenuItemClick(menu)\">\r\n         <mat-icon>{{menu.icon}}</mat-icon>\r\n        <span [class.text-align-right]=\"tableSetting.direction === 'rtl'\" class=\"text-align-left\">{{menu.text}}</span>\r\n      </button>\r\n      <mat-divider *ngIf=\"menu.divider === true\"></mat-divider>\r\n    </ng-container>    \r\n\t</ng-template>\r\n</mat-menu>",
                        animations: [tableAnimation, expandAnimation],
                        // changeDetection: ChangeDetectionStrategy.OnPush,
                        providers: [
                            { provide: tooltip.MAT_TOOLTIP_DEFAULT_OPTIONS, useValue: cellTooltipDefaults }
                        ],
                        styles: ["@media print{.printpreview{background-color:#fff;position:fixed;width:100%;height:auto;z-index:99999999;margin:0;padding:0;top:0;left:0;overflow:visible;display:block}}.disable-backdrop-click .cdk-overlay-backdrop.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing{pointer-events:none}:host{display:flex;flex-direction:column;table-layout:fixed;min-height:200px;position:relative;overflow:auto;transition:.3s cubic-bezier(.46,-.72,.46,1.54);background-color:#f3f3f3;border:2px #009688}mat-cell:first-of-type,mat-footer-cell:first-of-type,mat-header-cell:first-of-type:not(.row-checkbox){padding-left:0!important}.rtl-cell{padding-right:20px}.ltr-cell{padding-left:20px}.viewport{height:calc(100% - 0px)}.viewport-with-pagination{height:calc(100% - 48px)}.table-paginator{position:sticky;bottom:0;display:flex;max-height:48px;align-items:center;overflow:hidden;direction:ltr}mat-footer-row,mat-row{min-height:auto!important}mat-footer-row,mat-row,tr.mat-header-row{display:flex;border-width:0 0 1px;border-bottom-color:#d2d2d2;border-style:solid;align-items:center;box-sizing:border-box}mat-cell,mat-footer-cell,mat-header-cell{align-self:stretch;color:inherit;background-color:inherit}.mat-table .row-selection{background-color:#f7f5f5}.mat-table .mat-row:hover{background-color:#fafafa}.mat-header-row.progress{border:none;max-height:4px;min-height:4px;height:0;margin-top:-4px;background-color:transparent}.mat-header-row.progress .mat-header-cell{border:0;padding:0}.mat-header-row.progress mat-progress-bar{transition:height .3s,opacity .25s linear}.mat-header-row.progress mat-progress-bar:not(.show){height:0;opacity:0}.no-records{display:flex;align-items:center;top:50%;left:50%;margin:-42px 0 0 -25px;line-height:42px;position:absolute;z-index:1;pointer-events:none}.no-records button{pointer-events:initial}::ng-deep .dmf{min-width:100%}::ng-deep dynamic-mat-table cdk-virtual-scroll-viewport .cdk-virtual-scroll-content-wrapper .mat-table mat-row .mat-cell mat-form-field{max-width:100%}::ng-deep dynamic-mat-table cdk-virtual-scroll-viewport .cdk-virtual-scroll-content-wrapper .mat-table mat-row .mat-cell mat-form-field .mat-form-field-wrapper{padding-bottom:0!important}::ng-deep dynamic-mat-table cdk-virtual-scroll-viewport .cdk-virtual-scroll-content-wrapper .mat-table mat-row .mat-cell mat-form-field ::ng-deep .mat-form-field-underline{bottom:0!important}.ltr-menu span{float:left}.button-menu{width:100%;line-height:48px}.button-menu::ng-deep .mat-button-wrapper{display:flex}.button-menu::ng-deep .mat-button-wrapper span{display:inline-block;width:100%;text-align:left}.button-menu::ng-deep .mat-button-wrapper mat-icon{line-height:48px;height:48px;margin:0 5px}mat-button-wrapper .button-menu{display:inline-block!important}.text-align-left{text-align:left!important}.text-align-right{text-align:right!important}.mat-menu-panel{min-height:unset!important}cdk-virtual-scroll-viewport{min-height:100px;height:inherit;overflow:auto}.header-caption{font-weight:bolder;font-size:14px}.header{-webkit-user-select:none;-moz-user-select:none;user-select:none;background-color:#fff}.row-checkbox{display:contents}.row-checkbox mat-checkbox{padding:15px}.row-checkbox mat-icon{padding:15px!important}.table-menu{max-width:42px;min-width:initial;padding:0!important;background-color:inherit}:host .mat-header-row>.mat-header-cell:hover .column-icon{opacity:0;transform:translateY(5px);transition:.2s}mat-header-cell:hover .left-resizer-handler,mat-header-cell:hover .right-resizer-handler{height:calc(100% - 10px);transition:height .2s ease-out}.left-resizer-handler{display:inline-block;min-width:3px;height:0;border:solid #d2d2d2;position:sticky;cursor:col-resize;border-width:0 0 0 1px;left:0}.right-resizer-handler{display:inline-block;min-width:3px;height:0;border:solid #d2d2d2;position:sticky;cursor:col-resize;border-width:0 1px 0 0;right:0}.active-resize{background-color:#f5f5f566}.drag-indicator{position:absolute;color:rgba(0,0,0,.3);display:flex;opacity:0;transform:translateY(-5px);transition-duration:.4s;transition-property:opacity,transform;cursor:move}:host .mat-header-row>.mat-header-cell:hover .drag-indicator{opacity:1;pointer-events:fill;transform:translateY(0)}.drag-indicator:hover{color:#bfc0c0!important}.cdk-drag-preview{color:#000;min-height:55px;border:1px solid #d4d4d4;background-color:#f5f5f5;box-sizing:border-box;border-radius:4px;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.cdk-drag-placeholder{border:1px dotted #9c9c9c;background-color:#d3d3d3;content:none}.cdk-drag-animating,.cdk-drop-list-dragging{transition:transform 250ms cubic-bezier(0,0,.2,1)}.detail-row{height:0;display:inline!important;width:100%}.table-row:not(.expanded-row):hover{background:#f5f5f5}.table-row:not(.expanded-row):active{background:#efefef}.table-row mat-cell{border-bottom-width:0}.expanded-detail{overflow:hidden;display:flex;background-color:#fafafa}.expanded-detail-cell{display:block;border-width:0;padding:0!important;width:100%;z-index:2}::ng-deep .cell-tooltip{padding:8px;font-size:12px;min-width:100px;text-align:center;margin-right:-20px}"]
                    }] }
        ];
        /** @nocollapse */
        DynamicMatTableComponent.ctorParameters = function () { return [
            { type: dialog.MatDialog },
            { type: core.Renderer2 },
            { type: TableIntl },
            { type: TableService },
            { type: core.ChangeDetectorRef },
            { type: overlay.OverlayContainer }
        ]; };
        DynamicMatTableComponent.propDecorators = {
            tbl: [{ type: core.ViewChild, args: ['tbl', { static: true },] }],
            setting: [{ type: core.Input }],
            contextMenu: [{ type: core.ViewChild, args: [menu.MatMenuTrigger,] }],
            printRef: [{ type: core.ViewChild, args: ['printRef', { static: true },] }],
            printContentRef: [{ type: core.ViewChild, args: ['printContentRef', { static: true },] }],
            headerFilterList: [{ type: core.ContentChildren, args: [HeaderFilterComponent,] }]
        };
        return DynamicMatTableComponent;
    }(TableCoreDirective));
    if (false) {
        /** @type {?} */
        DynamicMatTableComponent.prototype.tbl;
        /** @type {?} */
        DynamicMatTableComponent.prototype.contextMenu;
        /** @type {?} */
        DynamicMatTableComponent.prototype.contextMenuPosition;
        /** @type {?} */
        DynamicMatTableComponent.prototype.printRef;
        /** @type {?} */
        DynamicMatTableComponent.prototype.printContentRef;
        /** @type {?} */
        DynamicMatTableComponent.prototype.headerFilterList;
        /**
         * @type {?}
         * @private
         */
        DynamicMatTableComponent.prototype.dragDropData;
        /**
         * @type {?}
         * @private
         */
        DynamicMatTableComponent.prototype.eventsSubscription;
        /** @type {?} */
        DynamicMatTableComponent.prototype.printing;
        /** @type {?} */
        DynamicMatTableComponent.prototype.printTemplate;
        /** @type {?} */
        DynamicMatTableComponent.prototype.resizeColumn;
        /** @type {?} */
        DynamicMatTableComponent.prototype.resizableMousemove;
        /** @type {?} */
        DynamicMatTableComponent.prototype.resizableMouseup;
        /** @type {?} */
        DynamicMatTableComponent.prototype.indexTrackFn;
        /** @type {?} */
        DynamicMatTableComponent.prototype.currentContextMenuSender;
        /** @type {?} */
        DynamicMatTableComponent.prototype.dialog;
        /**
         * @type {?}
         * @private
         */
        DynamicMatTableComponent.prototype.renderer;
        /** @type {?} */
        DynamicMatTableComponent.prototype.languagePack;
        /** @type {?} */
        DynamicMatTableComponent.prototype.tableService;
        /** @type {?} */
        DynamicMatTableComponent.prototype.cdr;
        /**
         * @type {?}
         * @private
         */
        DynamicMatTableComponent.prototype.overlayContainer;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/cores/dynamic-cell/dynamic-cell.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DynamicCellDirective = /** @class */ (function () {
        function DynamicCellDirective(compiler, cfr, vc, parent) {
            this.compiler = compiler;
            this.cfr = cfr;
            this.vc = vc;
            this.parent = parent;
            this.componentRef = null;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        DynamicCellDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (this.componentRef === null || this.componentRef === undefined) {
                this.initComponent();
            }
            // pass input parameters
            if (changes.column && changes.column.currentValue) {
                this.componentRef.instance.column = this.column;
            }
            if (changes.row && changes.row.currentValue) {
                ((/** @type {?} */ (this.componentRef.instance))).row = this.row;
            }
            if (changes.onRowEvent && changes.onRowEvent.currentValue) {
                ((/** @type {?} */ (this.componentRef.instance))).onRowEvent = this.onRowEvent;
            }
        };
        /**
         * @return {?}
         */
        DynamicCellDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () { };
        /**
         * @return {?}
         */
        DynamicCellDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.componentRef) {
                this.componentRef.destroy();
            }
        };
        /**
         * @return {?}
         */
        DynamicCellDirective.prototype.initComponent = /**
         * @return {?}
         */
        function () {
            try {
                /** @type {?} */
                var componentFactory = this.cfr.resolveComponentFactory(this.component);
                this.componentRef = this.vc.createComponent(componentFactory);
                this.updateInput();
            }
            catch (e) {
                // console.log(e);
            }
        };
        /**
         * @return {?}
         */
        DynamicCellDirective.prototype.updateInput = /**
         * @return {?}
         */
        function () {
            if (this.parent) {
                ((/** @type {?} */ (this.componentRef.instance))).parent = this.parent;
            }
            if (this.column) {
                this.componentRef.instance.column = this.column;
            }
            if (this.row) {
                ((/** @type {?} */ (this.componentRef.instance))).row = this.row;
            }
            if (this.onRowEvent) {
                ((/** @type {?} */ (this.componentRef.instance))).onRowEvent = this.onRowEvent;
            }
        };
        DynamicCellDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[dynamicCell]'
                    },] }
        ];
        /** @nocollapse */
        DynamicCellDirective.ctorParameters = function () { return [
            { type: core.Compiler },
            { type: core.ComponentFactoryResolver },
            { type: core.ViewContainerRef },
            { type: DynamicMatTableComponent }
        ]; };
        DynamicCellDirective.propDecorators = {
            component: [{ type: core.Input }],
            column: [{ type: core.Input }],
            row: [{ type: core.Input }],
            onRowEvent: [{ type: core.Input }]
        };
        return DynamicCellDirective;
    }());
    if (false) {
        /** @type {?} */
        DynamicCellDirective.prototype.component;
        /** @type {?} */
        DynamicCellDirective.prototype.column;
        /** @type {?} */
        DynamicCellDirective.prototype.row;
        /** @type {?} */
        DynamicCellDirective.prototype.onRowEvent;
        /** @type {?} */
        DynamicCellDirective.prototype.componentRef;
        /** @type {?} */
        DynamicCellDirective.prototype.compiler;
        /**
         * @type {?}
         * @private
         */
        DynamicCellDirective.prototype.cfr;
        /**
         * @type {?}
         * @private
         */
        DynamicCellDirective.prototype.vc;
        /**
         * @type {?}
         * @private
         */
        DynamicCellDirective.prototype.parent;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dynamic-mat-table/extensions/row-menu/row-menu.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     */
    var RowMenuComponent = /** @class */ (function () {
        function RowMenuComponent() {
            // @Output() rowActionChange: EventEmitter<ContextMenuItem> = new EventEmitter<ContextMenuItem>();
            this.rowActionChange = new core.EventEmitter();
            this.actionMenus = [];
            this.visibleActionMenus = [];
        }
        /**
         * @param {?} e
         * @return {?}
         */
        RowMenuComponent.prototype.menuOnClick = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            var _this = this;
            e.stopPropagation();
            e.preventDefault();
            this.visibleActionMenus = [];
            this.actionMenus.forEach((/**
             * @param {?} menu
             * @return {?}
             */
            function (menu) {
                /** @type {?} */
                var am = isNullorUndefined(_this.rowActionMenu) || isNullorUndefined(_this.rowActionMenu[menu.name]) ? menu : _this.rowActionMenu[menu.name];
                if (isNullorUndefined(am.visible) || am.visible) {
                    _this.visibleActionMenus.push({
                        name: menu.name,
                        text: am.text || menu.text,
                        disabled: am.disabled || menu.disabled,
                        icon: am.icon || menu.icon,
                        color: am.color || menu.color
                    });
                }
            }));
        };
        /**
         * @param {?} menu
         * @return {?}
         */
        RowMenuComponent.prototype.menuButton_OnClick = /**
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.rowActionChange.emit(menu);
            }));
        };
        RowMenuComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line: component-selector
                        selector: 'row-menu',
                        template: "<button class=\"clear\" mat-icon-button #menuTrigger=\"matMenuTrigger\" (click)=\"menuOnClick($event)\"\r\n[matMenuTriggerFor]=\"menu\" [dir]=\"tableSetting.direction === 'rtl' ? 'ltr' : 'rtl'\" >\r\n  <mat-icon>more_horiz</mat-icon>\r\n</button>\r\n\r\n<mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\" [dir]=\"tableSetting.direction === 'rtl' ? 'ltr' : 'rtl'\">\r\n  <ng-template matMenuContent>\r\n    <button mat-button [class.ltr-menu]=\"tableSetting.direction === 'rtl'\" [color]=\"menu.color\" class=\"button-menu\" \r\n      *ngFor=\"let menu of visibleActionMenus\" [disabled]=\"menu.disabled\" (click)=\"menuButton_OnClick(menu)\">\r\n       <mat-icon>{{menu.icon}}</mat-icon>\r\n      <span [class.text-align-right]=\"tableSetting.direction === 'rtl'\" class=\"text-align-left\">{{menu.text}}</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: ["@media print{.printpreview{background-color:#fff;position:fixed;width:100%;height:auto;z-index:99999999;margin:0;padding:0;top:0;left:0;overflow:visible;display:block}}.disable-backdrop-click .cdk-overlay-backdrop.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing{pointer-events:none}.ltr-menu span{float:left}.button-menu{width:100%;line-height:48px}.button-menu::ng-deep .mat-button-wrapper{display:flex}.button-menu::ng-deep .mat-button-wrapper span{display:inline-block;width:100%;text-align:left}.button-menu::ng-deep .mat-button-wrapper mat-icon{line-height:48px;height:48px;margin:0 5px}mat-button-wrapper .button-menu{display:inline-block!important}.text-align-left{text-align:left!important}.text-align-right{text-align:right!important}.mat-menu-panel{min-height:unset!important}:host{display:flex;align-items:center;justify-content:space-between}"]
                    }] }
        ];
        /** @nocollapse */
        RowMenuComponent.ctorParameters = function () { return []; };
        RowMenuComponent.propDecorators = {
            rowActionChange: [{ type: core.Output }],
            actionMenus: [{ type: core.Input }],
            tableSetting: [{ type: core.Input }],
            rowActionMenu: [{ type: core.Input }]
        };
        return RowMenuComponent;
    }());
    if (false) {
        /** @type {?} */
        RowMenuComponent.prototype.rowActionChange;
        /** @type {?} */
        RowMenuComponent.prototype.actionMenus;
        /** @type {?} */
        RowMenuComponent.prototype.tableSetting;
        /** @type {?} */
        RowMenuComponent.prototype.rowActionMenu;
        /** @type {?} */
        RowMenuComponent.prototype.visibleActionMenus;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dynamic-mat-table/extensions/row-menu/row-menu.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var components = [RowMenuComponent];
    var RowMenuModule = /** @class */ (function () {
        function RowMenuModule() {
        }
        RowMenuModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [components],
                        exports: components,
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            button.MatButtonModule,
                            icon.MatIconModule,
                            menu.MatMenuModule
                        ],
                    },] }
        ];
        return RowMenuModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dynamic-mat-table/extensions/table-menu/table-menu.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TableMenuComponent = /** @class */ (function () {
        function TableMenuComponent(languagePack, tableService) {
            this.languagePack = languagePack;
            this.tableService = tableService;
            this.menuActionChange = new core.EventEmitter();
            this.currentColumn = null;
            this.reverseDirection = null;
        }
        Object.defineProperty(TableMenuComponent.prototype, "tableSetting", {
            get: /**
             * @return {?}
             */
            function () {
                return this.currentTableSetting;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.originalTableSetting = value;
                this.reverseDirection = value.direction === 'rtl' ? 'ltr' : 'rtl';
                this.currentTableSetting = clone(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TableMenuComponent.prototype.screenMode_OnClick = /**
         * @return {?}
         */
        function () {
            this.menuActionChange.emit({
                type: 'FullScreenMode',
                data: this.currentTableSetting,
            });
        };
        /***** Column Setting ******/
        /**
         * ** Column Setting *****
         * @param {?} event
         * @return {?}
         */
        TableMenuComponent.prototype.columnMenuDropped = /**
         * ** Column Setting *****
         * @param {?} event
         * @return {?}
         */
        function (event) {
            dragDrop.moveItemInArray(this.currentTableSetting.columnSetting, event.item.data.columnIndex, event.currentIndex);
        };
        /**
         * @param {?} columnIndex
         * @return {?}
         */
        TableMenuComponent.prototype.toggleSelectedColumn = /**
         * @param {?} columnIndex
         * @return {?}
         */
        function (columnIndex) {
            /** @type {?} */
            var colFound = this.currentTableSetting.columnSetting.find((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return col.index === columnIndex; }));
            colFound.display = colFound.display === 'visible' ? 'hiden' : 'visible';
        };
        /**
         * @param {?} e
         * @return {?}
         */
        TableMenuComponent.prototype.apply_OnClick = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            var _this = this;
            e.stopPropagation();
            e.preventDefault();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.menuActionChange.emit({
                    type: 'TableSetting',
                    data: _this.currentTableSetting,
                });
                _this.tableService.saveColumnInfo(_this.currentTableSetting.columnSetting);
            }));
        };
        /**
         * @param {?} i
         * @return {?}
         */
        TableMenuComponent.prototype.setting_onClick = /**
         * @param {?} i
         * @return {?}
         */
        function (i) {
            this.currentColumn = i;
        };
        /**
         * @return {?}
         */
        TableMenuComponent.prototype.cancel_OnClick = /**
         * @return {?}
         */
        function () {
            this.currentTableSetting = deepClone(this.originalTableSetting);
        };
        /**
         * @param {?} visible
         * @return {?}
         */
        TableMenuComponent.prototype.isVisible = /**
         * @param {?} visible
         * @return {?}
         */
        function (visible) {
            return isNullorUndefined(visible) ? true : visible;
        };
        /*****  Save ********/
        /**
         * **  Save *******
         * @return {?}
         */
        TableMenuComponent.prototype.saveSetting_OnClick = /**
         * **  Save *******
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.menuActionChange.emit({ type: 'SaveSetting' });
            }));
        };
        /*****  Filter ********/
        /**
         * **  Filter *******
         * @return {?}
         */
        TableMenuComponent.prototype.clearFilter_OnClick = /**
         * **  Filter *******
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.menuActionChange.emit({ type: 'FilterClear' });
            }));
        };
        /******* Save File ***********/
        /**
         * **** Save File **********
         * @param {?} type
         * @return {?}
         */
        TableMenuComponent.prototype.download_OnClick = /**
         * **** Save File **********
         * @param {?} type
         * @return {?}
         */
        function (type) {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.menuActionChange.emit({ type: 'Download', data: type });
            }));
        };
        /**
         * @param {?} menu
         * @return {?}
         */
        TableMenuComponent.prototype.print_OnClick = /**
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            var _this = this;
            menu._overlayRef._host.parentElement.click();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.menuActionChange.emit({ type: 'Print', data: null });
            }));
        };
        TableMenuComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line: component-selector
                        selector: 'table-menu',
                        template: "<button\r\n  class=\"clear\"\r\n  mat-icon-button\r\n  #menuTrigger=\"matMenuTrigger\"\r\n  [matMenuTriggerFor]=\"menu\"\r\n  [dir]=\"reverseDirection\">\r\n  <mat-icon class=\"main-menu\">more_vert</mat-icon>\r\n</button>\r\n\r\n<mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\" [dir]=\"reverseDirection\">\r\n  <button   \r\n    mat-menu-item\r\n    (click)=\"screenMode_OnClick()\"\r\n    [class.ltr-menu]=\"currentTableSetting.direction !== 'rtl'\">\r\n    <mat-icon>fullscreen</mat-icon>\r\n    <span>{{ languagePack.menuLabels.fullScreen }}</span>\r\n  </button>\r\n  <button\r\n    mat-menu-item\r\n    color=\"primary\"\r\n    [matMenuTriggerFor]=\"convertMenu\"\r\n    [class.ltr-menu]=\"currentTableSetting.direction !== 'rtl'\">\r\n    <mat-icon>save</mat-icon>\r\n    <span>{{ languagePack.menuLabels.saveData }}</span>\r\n  </button>\r\n  <button\r\n    mat-menu-item\r\n    color=\"primary\"\r\n    [matMenuTriggerFor]=\"columnMenu\"\r\n    [class.ltr-menu]=\"currentTableSetting.direction !== 'rtl'\">\r\n    <mat-icon>view_column</mat-icon>\r\n    <span>{{ languagePack.menuLabels.columnSetting }}</span>\r\n  </button>\r\n  <button\r\n    mat-menu-item\r\n    (click)=\"saveSetting_OnClick()\"\r\n    [class.ltr-menu]=\"currentTableSetting.direction !== 'rtl'\">\r\n    <mat-icon>grading</mat-icon>\r\n    <span>{{ languagePack.menuLabels.saveTableSetting }}</span>\r\n  </button>\r\n  <button\r\n    mat-menu-item\r\n    (click)=\"clearFilter_OnClick()\"\r\n    [class.ltr-menu]=\"currentTableSetting.direction !== 'rtl'\">\r\n    <mat-icon>clear</mat-icon>\r\n    <span>{{ languagePack.menuLabels.clearFilter }}</span>\r\n  </button>\r\n</mat-menu>\r\n\r\n<!-- Convert Sub Menu -->\r\n\r\n<mat-menu #convertMenu=\"matMenu\">\r\n  <button mat-menu-item (click)=\"download_OnClick('JSON')\" [class.ltr-menu]=\"currentTableSetting.direction !== 'rtl'\">\r\n    <span>{{ languagePack.menuLabels.jsonFile }}</span>\r\n  </button>\r\n  <button mat-menu-item (click)=\"download_OnClick('CSV')\" [class.ltr-menu]=\"currentTableSetting.direction !== 'rtl'\">\r\n    <span>{{ languagePack.menuLabels.csvFile }}</span>\r\n  </button>\r\n  <button mat-menu-item (click)=\"print_OnClick(menuTrigger)\" [class.ltr-menu]=\"currentTableSetting.direction !== 'rtl'\">\r\n    <span>{{ languagePack.menuLabels.printTable }}</span>\r\n  </button>\r\n</mat-menu>\r\n\r\n<!-- Column Setting Sub Menu -->\r\n\r\n<mat-menu #columnMenu=\"matMenu\">\r\n  <ng-container\r\n    *ngIf=\"currentTableSetting?.columnSetting?.length > 0; else noColumns\">\r\n    <div\r\n      class=\"va-mat-table-dragable-container\"\r\n      cdkDropList\r\n      dkDropListLockAxis=\"y\"\r\n      cdkDropListOrientation=\"vertical\"\r\n      dir=\"ltr\">\r\n      <div\r\n        *ngFor=\"let column of currentTableSetting.columnSetting; let i = index\"\r\n        (click)=\"$event.stopPropagation(); $event.preventDefault()\"\r\n        class=\"dragable-row\"\r\n        cdkDrag\r\n        [cdkDragData]=\"{ columnIndex: i, columnTitle: column.header }\"\r\n        (cdkDragDropped)=\"columnMenuDropped($event)\">        \r\n        <mat-icon cdkDragHandle>drag_indicator</mat-icon>\r\n        <mat-checkbox\r\n          [disabled]=\"column?.display === 'prevent-hidden'\"\r\n          [checked]=\"column?.display === 'visible'\"\r\n          (click)=\"$event.stopPropagation()\"\r\n          (change)=\"toggleSelectedColumn(column.index)\">\r\n          {{ column.header }}\r\n        </mat-checkbox> \r\n        <mat-icon class=\"column-setting-button\" (click)=\"setting_onClick(i)\" #menuTrigger=\"matMenuTrigger\"  [matMenuTriggerFor]=\"columnSettingMenu\">settings</mat-icon>\r\n        <!-- <button\r\n          mat-icon-button\r\n          class=\"column-setting-button\"\r\n          (click)=\"setting_onClick(i)\">\r\n          <mat-icon (click)=\"setting_onClick(i)\" #menuTrigger=\"matMenuTrigger\"  [matMenuTriggerFor]=\"columnSettingMenu\">settings</mat-icon>\r\n        </button> -->\r\n\r\n        <div class=\"va-mat-table-drag-preview\" *cdkDragPreview>\r\n          <mat-icon>drag_indicator</mat-icon>\r\n          <mat-checkbox [checked]=\"column?.display === 'visible'\">\r\n            {{ column.header }}\r\n          </mat-checkbox>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div style=\"border-top: solid 1px #e7e7e7\">\r\n      <button\r\n        mat-menu-item\r\n        color=\"primary\"\r\n        class=\"done-setting\"\r\n        (click)=\"apply_OnClick($event)\">\r\n        <mat-icon color=\"primary\">done</mat-icon>\r\n      </button>\r\n      <button\r\n        mat-menu-item\r\n        color=\"primary\"\r\n        class=\"done-setting\"\r\n        (click)=\"cancel_OnClick()\">\r\n        <mat-icon color=\"primary\">clear</mat-icon>\r\n      </button>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-template #noColumns>\r\n    <div mat-menu-item>\r\n      {{ languagePack.menuLabels.thereIsNoColumn }}\r\n    </div>\r\n  </ng-template>\r\n</mat-menu>\r\n\r\n<mat-menu\r\n  #columnSettingMenu=\"matMenu\"\r\n  [overlapTrigger]=\"false\"\r\n  style=\"padding: 10px !important\">\r\n  <div\r\n    *ngIf=\"currentColumn !== null\"\r\n    (click)=\"$event.stopPropagation(); $event.preventDefault()\"\r\n    class=\"column-setting\">\r\n    <ng-container\r\n      *ngIf=\"isVisible(currentTableSetting?.visibaleActionMenu?.columnSettingFilter)\">\r\n      <div class=\"column-setting-header column-setting-header-first\">\r\n        <mat-icon color=\"primary\">filter_alt</mat-icon>{{ languagePack.menuLabels.filterMode }}\r\n      </div>\r\n      <mat-radio-group class=\"radio\" [(ngModel)]=\"currentTableSetting.columnSetting[currentColumn].filter\">\r\n        <mat-radio-button value='client-side' (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.filterLocalMode }}</mat-radio-button>\r\n        <mat-radio-button value='server-side' (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.filterServerMode }}</mat-radio-button>\r\n      </mat-radio-group>\r\n    </ng-container>\r\n\r\n    <ng-container\r\n      *ngIf=\"isVisible(currentTableSetting?.visibaleActionMenu?.columnSettingSort)\">\r\n      <div class=\"column-setting-header\">\r\n        <mat-icon color=\"primary\">sort</mat-icon>{{ languagePack.menuLabels.sortMode }}\r\n      </div>\r\n      <mat-radio-group class=\"radio\" [(ngModel)]=\"currentTableSetting.columnSetting[currentColumn].sort\">\r\n        <mat-radio-button value='client-side' (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.sortLocalMode }}</mat-radio-button>\r\n        <mat-radio-button value='server-side' (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.sortServerMode }}</mat-radio-button>\r\n      </mat-radio-group>\r\n    </ng-container>\r\n\r\n    <ng-container \r\n      *ngIf=\"isVisible(currentTableSetting?.visibaleActionMenu?.columnSettingFilter)\">\r\n      <div class=\"column-setting-header\">\r\n        <mat-icon color=\"primary\">print</mat-icon>{{ languagePack.menuLabels.printMode }}\r\n      </div>\r\n      <mat-radio-group class=\"radio\" [(ngModel)]=\"currentTableSetting.columnSetting[currentColumn].printable\">\r\n        <mat-radio-button [value]=\"true\" (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.printYesMode }}</mat-radio-button>\r\n        <mat-radio-button [value]=\"false\" (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.printNoMode }}</mat-radio-button>\r\n      </mat-radio-group>\r\n    </ng-container>\r\n\r\n    <ng-container\r\n      *ngIf=\"isVisible(currentTableSetting?.visibaleActionMenu?.columnSettingPin)\">\r\n      <div class=\"column-setting-header\">\r\n        <mat-icon color=\"primary\">push_pin</mat-icon>{{ languagePack.menuLabels.pinMode }}\r\n      </div>\r\n      <mat-radio-group class=\"radio\" [(ngModel)]=\"currentTableSetting.columnSetting[currentColumn].sticky\">\r\n        <mat-radio-button value='none' (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.pinNoneMode }}</mat-radio-button>\r\n        <mat-radio-button value='start' (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.pinStartMode }}</mat-radio-button>\r\n        <mat-radio-button value='end' (click)=\"$event.stopPropagation()\">{{ languagePack.menuLabels.pinEndMode }}</mat-radio-button>\r\n      </mat-radio-group>\r\n    </ng-container>\r\n  </div>\r\n</mat-menu>\r\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: [":host{display:flex;align-items:center;justify-content:space-between}.ltr-menu span{float:left}.main-menu{width:38px!important;line-height:24px!important}.va-mat-button-no-input{border:none;background-color:transparent;outline:0}.va-mat-table-dragable-container{min-width:200px;padding:8px 0;-webkit-user-select:none;-moz-user-select:none;user-select:none}.va-mat-table-dragable-container:dir(rtl){background-color:green!important}.dragable-row mat-checkbox{width:100%;line-height:28px;display:inline-flex}.va-mat-table-dragable-container .dragable-row{background-color:#fff;display:flex;width:100%;height:30px;font-size:14px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.column-setting-button{cursor:pointer!important;font-size:24px;margin-right:5px}.va-mat-table-dragable-container .dragable-row mat-icon{line-height:30px;opacity:.15;transition:opacity .5s;color:#616161;cursor:-webkit-grab;cursor:grab;background-color:#fff}.va-mat-table-dragable-container .dragable-row:hover mat-icon{opacity:1}.va-mat-table-drag-preview{direction:ltr;background-color:#ececec;padding:4px 8px 4px 4px!important;cursor:-webkit-grabbing!important;cursor:grabbing!important;margin-top:-4px;margin-left:-4px;font-size:14px;border-radius:5px}.va-mat-table-drag-preview mat-checkbox,.va-mat-table-drag-preview mat-icon{vertical-align:top}.va-mat-table-drag-preview mat-icon{padding-left:4px;color:#616161}.cdk-drop-list-dragging .cdk-drag{transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag-animating{transition:transform .3s cubic-bezier(0,0,.2,1)}.done-setting{width:50%!important;display:inline-flex;text-align:center;height:42px}.done-setting mat-icon{line-height:38px!important;opacity:.6;transition:opacity .5s;color:#616161;width:100%;text-align:center;margin:0}.done-setting mat-icon:hover{opacity:1}.column-setting{font-family:Roboto,\"Helvetica Neue\",sans-serif;padding:10px}.column-setting .radio{width:100%;display:flex;font-size:12px;margin-top:-2px}.column-setting .radio mat-radio-button{padding:5px;width:50%}.column-setting .radio mat-radio-button:last-child{margin-right:10px}.column-setting .column-setting-header{line-height:30px;padding:5px 5px 0;font-size:14px;border-top:1px solid #f3f3f3;margin-top:5px}.column-setting .column-setting-header mat-icon{opacity:.7;font-size:22px;line-height:30px;float:right;color:#616161}.column-setting-header:first-child{border-top:none!important;padding:0 5px!important;margin-top:-5px!important}.first-menu-item{width:100px;display:inline-block;text-align:left}::ng-deep [dir=rtl] .mat-checkbox-inner-container{margin-left:auto!important;margin-right:5px!important}.mat-menu-item{display:inline-flex}.mat-menu-item span{width:100%}.mat-menu-item mat-icon{line-height:48px!important}"]
                    }] }
        ];
        /** @nocollapse */
        TableMenuComponent.ctorParameters = function () { return [
            { type: TableIntl },
            { type: TableService }
        ]; };
        TableMenuComponent.propDecorators = {
            menuActionChange: [{ type: core.Output }],
            tableSetting: [{ type: core.Input }]
        };
        return TableMenuComponent;
    }());
    if (false) {
        /** @type {?} */
        TableMenuComponent.prototype.menuActionChange;
        /** @type {?} */
        TableMenuComponent.prototype.currentColumn;
        /** @type {?} */
        TableMenuComponent.prototype.reverseDirection;
        /** @type {?} */
        TableMenuComponent.prototype.originalTableSetting;
        /** @type {?} */
        TableMenuComponent.prototype.currentTableSetting;
        /** @type {?} */
        TableMenuComponent.prototype.languagePack;
        /** @type {?} */
        TableMenuComponent.prototype.tableService;
    }
    /**
     * @record
     */
    function TableMenuActionChange() { }
    if (false) {
        /** @type {?} */
        TableMenuActionChange.prototype.type;
        /** @type {?|undefined} */
        TableMenuActionChange.prototype.data;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dynamic-mat-table/extensions/table-menu/table-menu.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var components$1 = [TableMenuComponent];
    var TableMenuModule = /** @class */ (function () {
        function TableMenuModule() {
        }
        TableMenuModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [components$1],
                        exports: components$1,
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            button.MatButtonModule,
                            checkbox.MatCheckboxModule,
                            icon.MatIconModule,
                            dragDrop.DragDropModule,
                            menu.MatMenuModule,
                            radio.MatRadioModule,
                        ],
                    },] }
        ];
        return TableMenuModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dynamic-mat-table/extensions/filter/filter-event.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilterEventDirective = /** @class */ (function () {
        function FilterEventDirective() {
        }
        /**
         * @param {?} e
         * @return {?}
         */
        FilterEventDirective.prototype.onClick = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
            e.preventDefault();
            return false;
        };
        FilterEventDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[filter-event]'
                    },] }
        ];
        FilterEventDirective.propDecorators = {
            onClick: [{ type: core.HostListener, args: ['click', ['$event'],] }]
        };
        return FilterEventDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dynamic-mat-table/extensions/filter/header-filter.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var components$2 = [HeaderFilterComponent, FilterEventDirective];
    var HeaderFilterModule = /** @class */ (function () {
        function HeaderFilterModule() {
        }
        HeaderFilterModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: components$2,
                        exports: components$2,
                        imports: [
                            common.CommonModule,
                            formField.MatFormFieldModule,
                            icon.MatIconModule,
                            input.MatInputModule,
                            menu.MatMenuModule,
                            select.MatSelectModule,
                            forms.ReactiveFormsModule,
                            button.MatButtonModule,
                            forms.FormsModule
                        ],
                    },] }
        ];
        return HeaderFilterModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/cores/fixed-size-table-virtual-scroll-strategy.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function TSVStrategyConfigs() { }
    if (false) {
        /** @type {?} */
        TSVStrategyConfigs.prototype.rowHeight;
        /** @type {?} */
        TSVStrategyConfigs.prototype.headerHeight;
        /** @type {?} */
        TSVStrategyConfigs.prototype.footerHeight;
        /** @type {?} */
        TSVStrategyConfigs.prototype.bufferMultiplier;
    }
    var FixedSizeTableVirtualScrollStrategy = /** @class */ (function () {
        function FixedSizeTableVirtualScrollStrategy() {
            this.length = 0;
            this.indexChange = new rxjs.Subject();
            this.stickyChange = new rxjs.Subject();
            this.scrollStrategyMode = 'fixed-size';
            this.renderedRangeStream = new rxjs.BehaviorSubject({ start: 0, end: 0 });
            this.offsetChange = new rxjs.BehaviorSubject(0);
            this.scrolledIndexChange = this.indexChange.pipe(operators.distinctUntilChanged());
        }
        Object.defineProperty(FixedSizeTableVirtualScrollStrategy.prototype, "dataLength", {
            get: /**
             * @return {?}
             */
            function () {
                return this.length;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.length = value;
                this.onDataLengthChanged();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FixedSizeTableVirtualScrollStrategy.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.eventsSubscription.unsubscribe();
        };
        /**
         * @param {?} viewport
         * @return {?}
         */
        FixedSizeTableVirtualScrollStrategy.prototype.attach = /**
         * @param {?} viewport
         * @return {?}
         */
        function (viewport) {
            this.viewport = viewport;
            this.eventsSubscription = this.viewport.renderedRangeStream.subscribe(this.renderedRangeStream);
            this.onDataLengthChanged();
        };
        /**
         * @return {?}
         */
        FixedSizeTableVirtualScrollStrategy.prototype.detach = /**
         * @return {?}
         */
        function () {
            this.indexChange.complete();
            this.stickyChange.complete();
            this.renderedRangeStream.complete();
        };
        /**
         * @return {?}
         */
        FixedSizeTableVirtualScrollStrategy.prototype.onContentScrolled = /**
         * @return {?}
         */
        function () {
            this.updateContent();
        };
        /**
         * @return {?}
         */
        FixedSizeTableVirtualScrollStrategy.prototype.onDataLengthChanged = /**
         * @return {?}
         */
        function () {
            if (this.viewport) {
                this.viewport.setTotalContentSize(this.dataLength * this.rowHeight + this.headerHeight + this.footerHeight);
            }
            this.updateContent();
        };
        /**
         * @return {?}
         */
        FixedSizeTableVirtualScrollStrategy.prototype.onContentRendered = /**
         * @return {?}
         */
        function () {
            // no-op
        };
        /**
         * @return {?}
         */
        FixedSizeTableVirtualScrollStrategy.prototype.onRenderedOffsetChanged = /**
         * @return {?}
         */
        function () {
            // no-op
        };
        /**
         * @param {?} index
         * @param {?} behavior
         * @return {?}
         */
        FixedSizeTableVirtualScrollStrategy.prototype.scrollToIndex = /**
         * @param {?} index
         * @param {?} behavior
         * @return {?}
         */
        function (index, behavior) {
            // if (this.viewport) {
            //   this.viewport.scrollToOffset( this.rowHeight * index , behavior);
            // }    
            if (!this.viewport || !this.rowHeight) {
                return;
            }
            this.viewport.scrollToOffset((index - 1) * this.rowHeight + this.headerHeight);
        };
        /**
         * @param {?} configs
         * @return {?}
         */
        FixedSizeTableVirtualScrollStrategy.prototype.setConfig = /**
         * @param {?} configs
         * @return {?}
         */
        function (configs) {
            var rowHeight = configs.rowHeight, headerHeight = configs.headerHeight, footerHeight = configs.footerHeight, bufferMultiplier = configs.bufferMultiplier;
            if (this.rowHeight === rowHeight
                && this.headerHeight === headerHeight
                && this.footerHeight === footerHeight
                && this.bufferMultiplier === bufferMultiplier) {
                return;
            }
            this.rowHeight = rowHeight;
            this.headerHeight = headerHeight;
            this.footerHeight = footerHeight;
            this.bufferMultiplier = bufferMultiplier;
            this.onDataLengthChanged();
        };
        // bug fixed some time viewport is zero height (i dont know why!)
        // bug fixed some time viewport is zero height (i dont know why!)
        /**
         * @return {?}
         */
        FixedSizeTableVirtualScrollStrategy.prototype.getViewportSize = 
        // bug fixed some time viewport is zero height (i dont know why!)
        /**
         * @return {?}
         */
        function () {
            if (this.viewport.getViewportSize() === 0) {
                return this.viewport.elementRef.nativeElement.clientHeight + 52;
            }
            else {
                return this.viewport.getViewportSize();
            }
        };
        /**
         * @private
         * @return {?}
         */
        FixedSizeTableVirtualScrollStrategy.prototype.updateContent = /**
         * @private
         * @return {?}
         */
        function () {
            if (!this.viewport || !this.rowHeight) {
                return;
            }
            /** @type {?} */
            var start = 0;
            /** @type {?} */
            var end = this.dataLength;
            if (this.scrollStrategyMode === 'none' && this.viewport.getRenderedRange().start === start && this.viewport.getRenderedRange().end === end) {
                return;
            }
            /** @type {?} */
            var scrollOffset = this.viewport.measureScrollOffset();
            /** @type {?} */
            var amount = Math.ceil(this.getViewportSize() / this.rowHeight);
            /** @type {?} */
            var offset = Math.max(scrollOffset - this.headerHeight, 0);
            /** @type {?} */
            var buffer = Math.ceil(amount * this.bufferMultiplier);
            /** @type {?} */
            var skip = Math.round(offset / this.rowHeight);
            /** @type {?} */
            var index = Math.max(0, skip);
            if (this.scrollStrategyMode === 'fixed-size') {
                start = Math.max(0, index - buffer);
                end = Math.min(this.dataLength, index + amount + buffer);
            }
            /** @type {?} */
            var renderedOffset = start * this.rowHeight;
            this.viewport.setRenderedContentOffset(renderedOffset);
            this.viewport.setRenderedRange({ start: start, end: end });
            this.indexChange.next(index);
            this.stickyChange.next(renderedOffset);
            this.offsetChange.next(offset);
        };
        FixedSizeTableVirtualScrollStrategy.decorators = [
            { type: core.Injectable }
        ];
        return FixedSizeTableVirtualScrollStrategy;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        FixedSizeTableVirtualScrollStrategy.prototype.eventsSubscription;
        /**
         * @type {?}
         * @private
         */
        FixedSizeTableVirtualScrollStrategy.prototype.length;
        /**
         * @type {?}
         * @private
         */
        FixedSizeTableVirtualScrollStrategy.prototype.rowHeight;
        /**
         * @type {?}
         * @private
         */
        FixedSizeTableVirtualScrollStrategy.prototype.headerHeight;
        /**
         * @type {?}
         * @private
         */
        FixedSizeTableVirtualScrollStrategy.prototype.footerHeight;
        /**
         * @type {?}
         * @private
         */
        FixedSizeTableVirtualScrollStrategy.prototype.bufferMultiplier;
        /**
         * @type {?}
         * @private
         */
        FixedSizeTableVirtualScrollStrategy.prototype.indexChange;
        /** @type {?} */
        FixedSizeTableVirtualScrollStrategy.prototype.stickyChange;
        /** @type {?} */
        FixedSizeTableVirtualScrollStrategy.prototype.scrollStrategyMode;
        /** @type {?} */
        FixedSizeTableVirtualScrollStrategy.prototype.viewport;
        /** @type {?} */
        FixedSizeTableVirtualScrollStrategy.prototype.renderedRangeStream;
        /** @type {?} */
        FixedSizeTableVirtualScrollStrategy.prototype.offsetChange;
        /** @type {?} */
        FixedSizeTableVirtualScrollStrategy.prototype.scrolledIndexChange;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/cores/table-item-size.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} tableDir
     * @return {?}
     */
    function _tableVirtualScrollDirectiveStrategyFactory(tableDir) {
        return tableDir.scrollStrategy;
    }
    /** @type {?} */
    var stickyHeaderSelector = '.mat-header-row .mat-table-sticky';
    /** @type {?} */
    var stickyFooterSelector = '.mat-footer-row .mat-table-sticky';
    /** @type {?} */
    var defaults = {
        rowHeight: 48,
        headerHeight: 56,
        headerEnabled: true,
        footerHeight: 48,
        footerEnabled: false,
        bufferMultiplier: 0.7
    };
    var TableItemSizeDirective = /** @class */ (function () {
        function TableItemSizeDirective(zone) {
            this.zone = zone;
            this.alive = true;
            // tslint:disable-next-line:no-input-rename
            this.rowHeight = defaults.rowHeight;
            this.headerEnabled = defaults.headerEnabled;
            this.headerHeight = defaults.headerHeight;
            this.footerEnabled = defaults.footerEnabled;
            this.footerHeight = defaults.footerHeight;
            this.bufferMultiplier = defaults.bufferMultiplier;
            // @Output() requestRendering: EventEmitter<any> = new EventEmitter();
            this.scrollStrategy = new FixedSizeTableVirtualScrollStrategy();
            this.dataSourceChanges = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        TableItemSizeDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.alive = false;
            this.dataSourceChanges.complete();
        };
        /**
         * @private
         * @return {?}
         */
        TableItemSizeDirective.prototype.isAlive = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            return (/**
             * @return {?}
             */
            function () { return _this.alive; });
        };
        /**
         * @private
         * @return {?}
         */
        TableItemSizeDirective.prototype.isStickyEnabled = /**
         * @private
         * @return {?}
         */
        function () {
            return !!this.scrollStrategy.viewport && ((/** @type {?} */ (((/** @type {?} */ (this.table)))._headerRowDefs)))
                .map((/**
             * @param {?} def
             * @return {?}
             */
            function (def) { return def.sticky; }))
                .reduce((/**
             * @param {?} prevState
             * @param {?} state
             * @return {?}
             */
            function (prevState, state) { return prevState && state; }), true);
        };
        /**
         * @return {?}
         */
        TableItemSizeDirective.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var switchDataSourceOrigin = ((/** @type {?} */ (this.table)))._switchDataSource;
            ((/** @type {?} */ (this.table)))._switchDataSource = (/**
             * @param {?} dataSource
             * @return {?}
             */
            function (dataSource) {
                switchDataSourceOrigin.call(_this.table, dataSource);
                _this.connectDataSource(dataSource);
            });
            this.connectDataSource(this.table.dataSource);
            this.scrollStrategy.stickyChange
                .pipe(operators.filter((/**
             * @return {?}
             */
            function () { return _this.isStickyEnabled(); })), operators.tap((/**
             * @return {?}
             */
            function () {
                if (!_this.stickyPositions) {
                    _this.initStickyPositions();
                }
            })), operators.takeWhile(this.isAlive()))
                .subscribe((/**
             * @param {?} stickyOffset
             * @return {?}
             */
            function (stickyOffset) {
                _this.setSticky(stickyOffset);
            }));
        };
        /**
         * @param {?} dataSource
         * @return {?}
         */
        TableItemSizeDirective.prototype.connectDataSource = /**
         * @param {?} dataSource
         * @return {?}
         */
        function (dataSource) {
            var _this = this;
            this.dataSourceChanges.next();
            if (dataSource instanceof TableVirtualScrollDataSource) {
                dataSource
                    .dataToRender$
                    .pipe(operators.distinctUntilChanged(), operators.takeUntil(this.dataSourceChanges), operators.takeWhile(this.isAlive()), operators.tap((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) { return _this.scrollStrategy.dataLength = data.length; })), operators.switchMap((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    return _this.scrollStrategy
                        .renderedRangeStream
                        .pipe(operators.map((/**
                     * @param {?} __0
                     * @return {?}
                     */
                    function (_a) {
                        var start = _a.start, end = _a.end;
                        // this.requestRendering.emit({from: start, to: end});
                        return typeof start !== 'number' || typeof end !== 'number' ? data : data.slice(start, end);
                    })));
                })))
                    .subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    _this.zone.run((/**
                     * @return {?}
                     */
                    function () {
                        dataSource.dataOfRange$.next(data);
                    }));
                }));
            }
            else {
                throw new Error('[tvsItemSize] requires TableVirtualScrollDataSource be set as [dataSource] of [mat-table]');
            }
        };
        /**
         * @return {?}
         */
        TableItemSizeDirective.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var config = {
                rowHeight: +this.rowHeight || defaults.rowHeight,
                headerHeight: this.headerEnabled ? +this.headerHeight || defaults.headerHeight : 0,
                footerHeight: this.footerEnabled ? +this.footerHeight || defaults.footerHeight : 0,
                bufferMultiplier: +this.bufferMultiplier || defaults.bufferMultiplier
            };
            this.scrollStrategy.setConfig(config);
        };
        // setSticky(offset) {
        //   // fixed bug when sticky true for header and one column. column scroll front of header. becuse of z-index
        //   let topOffset = -offset;
        //   this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll('mat-header-row.mat-table-sticky')
        //     .forEach((el: HTMLElement) => {
        //       el.style.top = `${topOffset}px`;
        //       topOffset += el.offsetHeight;
        //       if (el.style.zIndex !== null ) {
        //         el.style.zIndex = '1000';
        //       }
        //     });
        // }
        // setSticky(offset) {
        //   // fixed bug when sticky true for header and one column. column scroll front of header. becuse of z-index
        //   let topOffset = -offset;
        //   this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll('mat-header-row.mat-table-sticky')
        //     .forEach((el: HTMLElement) => {
        //       el.style.top = `${topOffset}px`;
        //       topOffset += el.offsetHeight;
        //       if (el.style.zIndex !== null ) {
        //         el.style.zIndex = '1000';
        //       }
        //     });
        // }
        /**
         * @param {?} offset
         * @return {?}
         */
        TableItemSizeDirective.prototype.setSticky = 
        // setSticky(offset) {
        //   // fixed bug when sticky true for header and one column. column scroll front of header. becuse of z-index
        //   let topOffset = -offset;
        //   this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll('mat-header-row.mat-table-sticky')
        //     .forEach((el: HTMLElement) => {
        //       el.style.top = `${topOffset}px`;
        //       topOffset += el.offsetHeight;
        //       if (el.style.zIndex !== null ) {
        //         el.style.zIndex = '1000';
        //       }
        //     });
        // }
        /**
         * @param {?} offset
         * @return {?}
         */
        function (offset) {
            var _this = this;
            this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll(stickyHeaderSelector)
                .forEach((/**
             * @param {?} el
             * @return {?}
             */
            function (el) {
                /** @type {?} */
                var parent = el.parentElement;
                /** @type {?} */
                var baseOffset = 0;
                if (_this.stickyPositions.has(parent)) {
                    baseOffset = _this.stickyPositions.get(parent);
                }
                el.style.top = baseOffset - offset + "px";
            }));
            this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll(stickyFooterSelector)
                .forEach((/**
             * @param {?} el
             * @return {?}
             */
            function (el) {
                /** @type {?} */
                var parent = el.parentElement;
                /** @type {?} */
                var baseOffset = 0;
                if (_this.stickyPositions.has(parent)) {
                    baseOffset = _this.stickyPositions.get(parent);
                }
                el.style.bottom = -baseOffset + offset + "px";
            }));
        };
        /**
         * @private
         * @return {?}
         */
        TableItemSizeDirective.prototype.initStickyPositions = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.stickyPositions = new Map();
            this.scrollStrategy.viewport.elementRef.nativeElement.querySelectorAll(stickyHeaderSelector)
                .forEach((/**
             * @param {?} el
             * @return {?}
             */
            function (el) {
                /** @type {?} */
                var parent = el.parentElement;
                if (!_this.stickyPositions.has(parent)) {
                    _this.stickyPositions.set(parent, parent.offsetTop);
                }
            }));
        };
        TableItemSizeDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: 'cdk-virtual-scroll-viewport[tvsItemSize]',
                        providers: [{
                                provide: scrolling.VIRTUAL_SCROLL_STRATEGY,
                                useFactory: _tableVirtualScrollDirectiveStrategyFactory,
                                deps: [core.forwardRef((/**
                                     * @return {?}
                                     */
                                    function () { return TableItemSizeDirective; }))]
                            }]
                    },] }
        ];
        /** @nocollapse */
        TableItemSizeDirective.ctorParameters = function () { return [
            { type: core.NgZone }
        ]; };
        TableItemSizeDirective.propDecorators = {
            rowHeight: [{ type: core.Input, args: ['tvsItemSize',] }],
            headerEnabled: [{ type: core.Input }],
            headerHeight: [{ type: core.Input }],
            footerEnabled: [{ type: core.Input }],
            footerHeight: [{ type: core.Input }],
            bufferMultiplier: [{ type: core.Input }],
            table: [{ type: core.ContentChild, args: [table.MatTable, { static: true },] }]
        };
        return TableItemSizeDirective;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        TableItemSizeDirective.prototype.alive;
        /** @type {?} */
        TableItemSizeDirective.prototype.rowHeight;
        /** @type {?} */
        TableItemSizeDirective.prototype.headerEnabled;
        /** @type {?} */
        TableItemSizeDirective.prototype.headerHeight;
        /** @type {?} */
        TableItemSizeDirective.prototype.footerEnabled;
        /** @type {?} */
        TableItemSizeDirective.prototype.footerHeight;
        /** @type {?} */
        TableItemSizeDirective.prototype.bufferMultiplier;
        /** @type {?} */
        TableItemSizeDirective.prototype.table;
        /** @type {?} */
        TableItemSizeDirective.prototype.scrollStrategy;
        /** @type {?} */
        TableItemSizeDirective.prototype.dataSourceChanges;
        /**
         * @type {?}
         * @private
         */
        TableItemSizeDirective.prototype.stickyPositions;
        /**
         * @type {?}
         * @private
         */
        TableItemSizeDirective.prototype.zone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/cores/table-virtual-scroll.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TableVirtualScrollModule = /** @class */ (function () {
        function TableVirtualScrollModule() {
        }
        TableVirtualScrollModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            TableItemSizeDirective
                        ],
                        imports: [],
                        exports: [TableItemSizeDirective]
                    },] }
        ];
        return TableVirtualScrollModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dynamic-mat-table/extensions/toolbar/toolbar.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ToolbarComponent = /** @class */ (function () {
        function ToolbarComponent(_el) {
            this._el = _el;
            this.itemList = [];
            this.color = null;
            this.direction = 'ltr';
            this.actionClick = new core.EventEmitter();
            this.normalItemList = [];
            this.floatItemList = [];
        }
        /**
         * @param {?} e
         * @return {?}
         */
        ToolbarComponent.prototype.onKeyup = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        ToolbarComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.itemList && this.itemList) {
                this.normalItemList = this.itemList.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.float === undefined || item.float == false; }));
                this.floatItemList = this.itemList.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return (item === null || item === void 0 ? void 0 : item.float) == true; }));
            }
        };
        /**
         * @return {?}
         */
        ToolbarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () { };
        /**
         * @param {?} item
         * @return {?}
         */
        ToolbarComponent.prototype.item_onClick = /**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            this.actionClick.emit(item);
        };
        ToolbarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'dm-toolbar',
                        template: "<div class=\"toolbar\">\n  <div *ngFor=\"let item of normalItemList\" class=\"item\">\n    <a *ngIf=\"item?.splitter\" class=\"splitter\"></a>\n    <div  \n      matRipple\n      [matRippleColor]=\"color\"\n      class=\"toolbar-item\"\n      (click)=\"item_onClick(item)\"    \n      [matTooltip]=\"item?.tooltip\" \n      matTooltipClass=\"custom-tooltip\">  \n      <mat-icon *ngIf=\"item.matIcon\" [style.color]=\"item?.matIconColor\">{{\n        item.matIcon\n      }}</mat-icon>\n    </div>\n  </div>\n  <div [class.float-right]=\"direction === 'ltr'\" [class.float-left]=\"direction === 'rtl'\">\n    <div *ngFor=\"let item of floatItemList\">\n      <a *ngIf=\"item?.splitter\" class=\"splitter\"></a>\n      <div  \n        matRipple\n        [matRippleColor]=\"color\"\n        class=\"toolbar-item\"\n        (click)=\"item_onClick(item)\"    \n        [matTooltip]=\"item?.tooltip\" \n        matTooltipClass=\"custom-tooltip\">  \n        <mat-icon *ngIf=\"item.matIcon\" [style.color]=\"item?.matIconColor\">\n          {{item.matIcon}}</mat-icon>\n      </div>\n    </div>\n  </div>\n</div> \n<!-- {{ _el?.nativeElement?.scrollWidth}} \n{{ _el?.nativeElement?.offsetWidth}}  -->",
                        styles: [":host{background-image:linear-gradient(#f5f5f5,#e4e3e3,#fafafa);min-height:42px;border-radius:8px;border:1px solid #adadad;box-sizing:border-box;overflow:hidden}.toolbar{display:flex;align-items:center;flex-direction:row;align-self:stretch;height:calc(100% - 8px);margin-top:3px}.item{height:100%}.toolbar-item{width:34px;height:100%;border-radius:8px;background-color:#ffffffa6;border:1px solid #b0b0b0;margin-right:8px;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:pointer}.toolbar-item:hover{background-color:#fff!important}.toolbar-item mat-icon{font-size:32px;height:100%;width:100%;text-align:center}.splitter{background-color:#b0b0b0;min-height:100%;min-width:2px;margin-right:8px;float:left;-webkit-user-select:none;-moz-user-select:none;user-select:none}::ng-deep .custom-tooltip{background-color:#fff!important;color:#000!important;border:1px solid #adadad;margin-top:-1px!important;margin-left:5px!important;text-align:center!important;font-family:IRANSans;font-weight:700;font-size:12px;min-width:100px}.float-right{margin-left:auto;display:flex;height:100%}.float-right .toolbar-item{margin-right:4px}.float-left{margin-right:auto;display:flex;height:100%}.float-left .toolbar-item{margin-left:4px}"]
                    }] }
        ];
        /** @nocollapse */
        ToolbarComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        ToolbarComponent.propDecorators = {
            itemList: [{ type: core.Input }],
            color: [{ type: core.Input }],
            direction: [{ type: core.Input }],
            actionClick: [{ type: core.Output }],
            onKeyup: [{ type: core.HostListener, args: ['document:keyup', ['$event'],] }]
        };
        return ToolbarComponent;
    }());
    if (false) {
        /** @type {?} */
        ToolbarComponent.prototype.itemList;
        /** @type {?} */
        ToolbarComponent.prototype.color;
        /** @type {?} */
        ToolbarComponent.prototype.direction;
        /** @type {?} */
        ToolbarComponent.prototype.actionClick;
        /** @type {?} */
        ToolbarComponent.prototype.normalItemList;
        /** @type {?} */
        ToolbarComponent.prototype.floatItemList;
        /** @type {?} */
        ToolbarComponent.prototype._el;
    }
    /**
     * @record
     */
    function ToolbarItem() { }
    if (false) {
        /** @type {?} */
        ToolbarItem.prototype.id;
        /** @type {?|undefined} */
        ToolbarItem.prototype.name;
        /** @type {?|undefined} */
        ToolbarItem.prototype.tooltip;
        /** @type {?|undefined} */
        ToolbarItem.prototype.matIcon;
        /** @type {?|undefined} */
        ToolbarItem.prototype.matIconColor;
        /** @type {?|undefined} */
        ToolbarItem.prototype.svgIcon;
        /** @type {?|undefined} */
        ToolbarItem.prototype.splitter;
        /** @type {?|undefined} */
        ToolbarItem.prototype.disable;
        /** @type {?|undefined} */
        ToolbarItem.prototype.float;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dynamic-mat-table/dynamic-mat-table.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} compilerFactory
     * @return {?}
     */
    function createCompiler(compilerFactory) {
        return compilerFactory.createCompiler();
    }
    /**
     * @param {?} tableIntl
     * @return {?}
     */
    function paginatorLabels(tableIntl) {
        /** @type {?} */
        var paginatorIntl = new paginator.MatPaginatorIntl();
        // paginatorIntl.itemsPerPageLabel = 'آیتم در هر صفحه:';
        // paginatorIntl.nextPageLabel = 'صفحه بعد';
        // paginatorIntl.previousPageLabel = 'صفحه قبل';
        paginatorIntl.getRangeLabel = paginatorIntl.getRangeLabel;
        return paginatorIntl || null;
    }
    /** @type {?} */
    var ExtentionsModule = [HeaderFilterModule, RowMenuModule];
    var ɵ0 = {};
    var DynamicMatTableModule = /** @class */ (function () {
        function DynamicMatTableModule() {
        }
        DynamicMatTableModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            table.MatTableModule,
                            scrolling.ScrollingModule,
                            TableVirtualScrollModule,
                            checkbox.MatCheckboxModule,
                            formField.MatFormFieldModule,
                            input.MatInputModule,
                            sort.MatSortModule,
                            progressBar.MatProgressBarModule,
                            icon.MatIconModule,
                            dragDrop.DragDropModule,
                            TableMenuModule,
                            paginator.MatPaginatorModule,
                            dialog.MatDialogModule,
                            button.MatButtonModule,
                            menu.MatMenuModule,
                            divider.MatDividerModule,
                            tooltip.MatTooltipModule,
                            core$1.MatRippleModule,
                            ExtentionsModule,
                        ],
                        exports: [DynamicMatTableComponent, ToolbarComponent],
                        providers: [
                            // bugfixed in library compiler not load and must create library
                            { provide: core.COMPILER_OPTIONS, useValue: ɵ0, multi: true },
                            { provide: core.CompilerFactory, useClass: platformBrowserDynamic.JitCompilerFactory, deps: [core.COMPILER_OPTIONS] },
                            { provide: core.Compiler, useFactory: createCompiler, deps: [core.CompilerFactory] },
                            TableIntl,
                            {
                                provide: paginator.MatPaginatorIntl,
                                useFactory: paginatorLabels,
                                deps: [TableIntl],
                            },
                        ],
                        declarations: [
                            DynamicMatTableComponent,
                            PrintTableDialogComponent,
                            ToolbarComponent,
                            TableCoreDirective,
                            DynamicCellDirective
                        ],
                        entryComponents: [PrintTableDialogComponent],
                    },] }
        ];
        return DynamicMatTableModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/models/language-pack.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function LanguagePack() { }
    if (false) {
        /** @type {?} */
        LanguagePack.prototype.tableLabels;
        /** @type {?} */
        LanguagePack.prototype.filterLabels;
        /** @type {?} */
        LanguagePack.prototype.paginatorLabels;
        /** @type {?} */
        LanguagePack.prototype.menuLabels;
    }
    /**
     * @record
     */
    function TableLabels() { }
    if (false) {
        /** @type {?} */
        TableLabels.prototype.NoData;
    }
    /**
     * @record
     */
    function PaginatorLabels() { }
    if (false) {
        /** @type {?} */
        PaginatorLabels.prototype.itemsPerPageLabel;
        /** @type {?} */
        PaginatorLabels.prototype.nextPageLabel;
        /** @type {?} */
        PaginatorLabels.prototype.previousPageLabel;
        /** @type {?} */
        PaginatorLabels.prototype.firstPageLabel;
        /** @type {?} */
        PaginatorLabels.prototype.lastPageLabel;
        /** @type {?} */
        PaginatorLabels.prototype.getRangeLabel;
    }
    /**
     * @record
     */
    function FilterLabels() { }
    if (false) {
        /** @type {?} */
        FilterLabels.prototype.Clear;
        /** @type {?} */
        FilterLabels.prototype.Search;
        /** @type {?} */
        FilterLabels.prototype.And;
        /** @type {?} */
        FilterLabels.prototype.Or;
        /** @type {?} */
        FilterLabels.prototype.Text;
        /** @type {?} */
        FilterLabels.prototype.TextContains;
        /** @type {?} */
        FilterLabels.prototype.TextEquals;
        /** @type {?} */
        FilterLabels.prototype.TextStartsWith;
        /** @type {?} */
        FilterLabels.prototype.TextEndsWith;
        /** @type {?} */
        FilterLabels.prototype.TextEmpty;
        /** @type {?} */
        FilterLabels.prototype.TextNotEmpty;
        /** @type {?} */
        FilterLabels.prototype.Number;
        /** @type {?} */
        FilterLabels.prototype.NumberEquals;
        /** @type {?} */
        FilterLabels.prototype.NumberNotEquals;
        /** @type {?} */
        FilterLabels.prototype.NumberGreaterThan;
        /** @type {?} */
        FilterLabels.prototype.NumberLessThan;
        /** @type {?} */
        FilterLabels.prototype.NumberEmpty;
        /** @type {?} */
        FilterLabels.prototype.NumberNotEmpty;
        /** @type {?} */
        FilterLabels.prototype.CategoryContains;
        /** @type {?} */
        FilterLabels.prototype.CategoryNotContains;
    }
    /**
     * @record
     */
    function MenuLabels() { }
    if (false) {
        /** @type {?} */
        MenuLabels.prototype.saveData;
        /** @type {?} */
        MenuLabels.prototype.columnSetting;
        /** @type {?} */
        MenuLabels.prototype.saveTableSetting;
        /** @type {?} */
        MenuLabels.prototype.fullScreen;
        /** @type {?} */
        MenuLabels.prototype.clearFilter;
        /** @type {?} */
        MenuLabels.prototype.jsonFile;
        /** @type {?} */
        MenuLabels.prototype.csvFile;
        /** @type {?} */
        MenuLabels.prototype.printTable;
        /** @type {?} */
        MenuLabels.prototype.filterMode;
        /** @type {?} */
        MenuLabels.prototype.filterLocalMode;
        /** @type {?} */
        MenuLabels.prototype.filterServerMode;
        /** @type {?} */
        MenuLabels.prototype.sortMode;
        /** @type {?} */
        MenuLabels.prototype.sortLocalMode;
        /** @type {?} */
        MenuLabels.prototype.sortServerMode;
        /** @type {?} */
        MenuLabels.prototype.printMode;
        /** @type {?} */
        MenuLabels.prototype.printYesMode;
        /** @type {?} */
        MenuLabels.prototype.printNoMode;
        /** @type {?} */
        MenuLabels.prototype.pinMode;
        /** @type {?} */
        MenuLabels.prototype.pinNoneMode;
        /** @type {?} */
        MenuLabels.prototype.pinStartMode;
        /** @type {?} */
        MenuLabels.prototype.pinEndMode;
        /** @type {?} */
        MenuLabels.prototype.thereIsNoColumn;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/models/context-menu.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function ContextMenuItem() { }
    if (false) {
        /** @type {?} */
        ContextMenuItem.prototype.name;
        /** @type {?} */
        ContextMenuItem.prototype.text;
        /** @type {?} */
        ContextMenuItem.prototype.color;
        /** @type {?|undefined} */
        ContextMenuItem.prototype.icon;
        /** @type {?|undefined} */
        ContextMenuItem.prototype.disabled;
        /** @type {?|undefined} */
        ContextMenuItem.prototype.visible;
        /** @type {?|undefined} */
        ContextMenuItem.prototype.divider;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/models/table-row.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function TableRow() { }
    if (false) {
        /** @type {?|undefined} */
        TableRow.prototype.id;
        /** @type {?|undefined} */
        TableRow.prototype.rowActionMenu;
        /** @type {?|undefined} */
        TableRow.prototype.option;
    }
    /**
     * @record
     */
    function IRowEvent() { }
    if (false) {
        /** @type {?} */
        IRowEvent.prototype.event;
        /** @type {?} */
        IRowEvent.prototype.sender;
    }
    /**
     * @record
     */
    function ITableEvent() { }
    if (false) {
        /** @type {?} */
        ITableEvent.prototype.event;
        /** @type {?} */
        ITableEvent.prototype.sender;
    }
    /**
     * @record
     * @template T
     */
    function IRowActionMenuEvent() { }
    if (false) {
        /** @type {?} */
        IRowActionMenuEvent.prototype.actionItem;
        /** @type {?} */
        IRowActionMenuEvent.prototype.rowItem;
    }
    /**
     * @record
     */
    function RowOption() { }
    if (false) {
        /** @type {?|undefined} */
        RowOption.prototype.style;
        /** @type {?|undefined} */
        RowOption.prototype.class;
        /** @type {?|undefined} */
        RowOption.prototype.selected;
        /** @type {?|undefined} */
        RowOption.prototype.expand;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/models/table-field.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     * @template R
     */
    function TableField() { }
    if (false) {
        /** @type {?|undefined} */
        TableField.prototype.classNames;
        /** @type {?|undefined} */
        TableField.prototype.rowClass;
        /** @type {?|undefined} */
        TableField.prototype.customSortFunction;
        /** @type {?|undefined} */
        TableField.prototype.customFilterFunction;
        /** @type {?|undefined} */
        TableField.prototype.toPrint;
        /** @type {?|undefined} */
        TableField.prototype.toExport;
    }
    /**
     * @record
     */
    function AbstractField() { }
    if (false) {
        /** @type {?|undefined} */
        AbstractField.prototype.index;
        /** @type {?} */
        AbstractField.prototype.name;
        /** @type {?|undefined} */
        AbstractField.prototype.type;
        /** @type {?|undefined} */
        AbstractField.prototype.width;
        /** @type {?|undefined} */
        AbstractField.prototype.header;
        /** @type {?|undefined} */
        AbstractField.prototype.isKey;
        /** @type {?|undefined} */
        AbstractField.prototype.inlineEdit;
        /** @type {?|undefined} */
        AbstractField.prototype.display;
        /** @type {?|undefined} */
        AbstractField.prototype.sticky;
        /** @type {?|undefined} */
        AbstractField.prototype.filter;
        /** @type {?|undefined} */
        AbstractField.prototype.sort;
        /** @type {?|undefined} */
        AbstractField.prototype.cellClass;
        /** @type {?|undefined} */
        AbstractField.prototype.cellStyle;
        /** @type {?|undefined} */
        AbstractField.prototype.icon;
        /** @type {?|undefined} */
        AbstractField.prototype.iconColor;
        /** @type {?|undefined} */
        AbstractField.prototype.dynamicCellComponent;
        /** @type {?|undefined} */
        AbstractField.prototype.draggable;
        /** @type {?|undefined} */
        AbstractField.prototype.filterable;
        /** @type {?|undefined} */
        AbstractField.prototype.sortable;
        /** @type {?|undefined} */
        AbstractField.prototype.clickable;
        /** @type {?|undefined} */
        AbstractField.prototype.printable;
        /** @type {?|undefined} */
        AbstractField.prototype.exportable;
        /** @type {?|undefined} */
        AbstractField.prototype.enableContextMenu;
        /** @type {?|undefined} */
        AbstractField.prototype.rowSelectionable;
        /** @type {?|undefined} */
        AbstractField.prototype.option;
        /** @type {?|undefined} */
        AbstractField.prototype.categoryData;
        /** @type {?|undefined} */
        AbstractField.prototype.toString;
        /** @type {?|undefined} */
        AbstractField.prototype.customSort;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/models/print-config.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function PrintConfig() { }
    if (false) {
        /** @type {?|undefined} */
        PrintConfig.prototype.displayedFields;
        /** @type {?|undefined} */
        PrintConfig.prototype.title;
        /** @type {?|undefined} */
        PrintConfig.prototype.userPrintParameters;
        /** @type {?|undefined} */
        PrintConfig.prototype.tablePrintParameters;
        /** @type {?|undefined} */
        PrintConfig.prototype.showParameters;
        /** @type {?|undefined} */
        PrintConfig.prototype.data;
        /** @type {?|undefined} */
        PrintConfig.prototype.columns;
        /** @type {?|undefined} */
        PrintConfig.prototype.direction;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/models/table-pagination.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function TablePagination() { }
    if (false) {
        /** @type {?|undefined} */
        TablePagination.prototype.length;
        /** @type {?|undefined} */
        TablePagination.prototype.pageIndex;
        /** @type {?|undefined} */
        TablePagination.prototype.pageSize;
        /** @type {?|undefined} */
        TablePagination.prototype.pageSizeOptions;
        /** @type {?|undefined} */
        TablePagination.prototype.showFirstLastButtons;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/models/table-setting.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function TableSetting() { }
    if (false) {
        /** @type {?|undefined} */
        TableSetting.prototype.direction;
        /** @type {?|undefined} */
        TableSetting.prototype.columnSetting;
        /** @type {?|undefined} */
        TableSetting.prototype.visibaleActionMenu;
        /** @type {?|undefined} */
        TableSetting.prototype.visibleTableMenu;
        /** @type {?|undefined} */
        TableSetting.prototype.alternativeRowStyle;
        /** @type {?|undefined} */
        TableSetting.prototype.normalRowStyle;
        /** @type {?|undefined} */
        TableSetting.prototype.scrollStrategy;
        /** @type {?|undefined} */
        TableSetting.prototype.rowStyle;
        /** @type {?|undefined} */
        TableSetting.prototype.enableContextMenu;
    }
    /**
     * @record
     */
    function VisibleActionMenu() { }
    if (false) {
        /** @type {?|undefined} */
        VisibleActionMenu.prototype.json;
        /** @type {?|undefined} */
        VisibleActionMenu.prototype.csv;
        /** @type {?|undefined} */
        VisibleActionMenu.prototype.print;
        /** @type {?|undefined} */
        VisibleActionMenu.prototype.columnSettingPin;
        /** @type {?|undefined} */
        VisibleActionMenu.prototype.columnSettingOrder;
        /** @type {?|undefined} */
        VisibleActionMenu.prototype.columnSettingFilter;
        /** @type {?|undefined} */
        VisibleActionMenu.prototype.columnSettingSort;
        /** @type {?|undefined} */
        VisibleActionMenu.prototype.columnSettingPrint;
        /** @type {?|undefined} */
        VisibleActionMenu.prototype.saveTableSetting;
        /** @type {?|undefined} */
        VisibleActionMenu.prototype.clearFilter;
    }

    exports.DynamicCellDirective = DynamicCellDirective;
    exports.DynamicMatTableComponent = DynamicMatTableComponent;
    exports.DynamicMatTableModule = DynamicMatTableModule;
    exports.TableIntl = TableIntl;
    exports.TableService = TableService;
    exports.TableVirtualScrollDataSource = TableVirtualScrollDataSource;
    exports.ToolbarComponent = ToolbarComponent;
    exports.cellTooltipDefaults = cellTooltipDefaults;
    exports.clone = clone;
    exports.copy = copy;
    exports.createCompiler = createCompiler;
    exports.deepClone = deepClone;
    exports.expandAnimation = expandAnimation;
    exports.getObjectProp = getObjectProp;
    exports.isNullorUndefined = isNullorUndefined;
    exports.paginatorLabels = paginatorLabels;
    exports.tableAnimation = tableAnimation;
    exports.textify = textify;
    exports.titleCase = titleCase;
    exports.ɵa = TableCoreDirective;
    exports.ɵb = HeaderFilterComponent;
    exports.ɵc = TableVirtualScrollModule;
    exports.ɵd = _tableVirtualScrollDirectiveStrategyFactory;
    exports.ɵe = TableItemSizeDirective;
    exports.ɵf = TableMenuModule;
    exports.ɵg = TableMenuComponent;
    exports.ɵh = HeaderFilterModule;
    exports.ɵi = FilterEventDirective;
    exports.ɵj = RowMenuModule;
    exports.ɵk = RowMenuComponent;
    exports.ɵl = PrintTableDialogComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=dynamic-mat-table.umd.js.map
