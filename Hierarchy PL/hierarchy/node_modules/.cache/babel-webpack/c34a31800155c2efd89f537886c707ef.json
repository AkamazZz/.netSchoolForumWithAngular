{"ast":null,"code":"import _asyncToGenerator from \"C:/Hierarchy/Hierarchy PL/hierarchy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component, Input, ViewChild } from '@angular/core';\nimport { StudentsResult } from 'models/students-result.model';\nimport { Students } from 'models/students.model';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\n\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nlet ShowStudentsComponent = class ShowStudentsComponent {\n  constructor(service, ModalService) {\n    this.service = service;\n    this.ModalService = ModalService;\n    this.IsSimpleList = true;\n    this.IsTopList = false;\n    this.StudentGpa = [];\n    this.StudentList = new StudentsResult();\n    this.StudentListWithoutFilter = new StudentsResult();\n    this.SortElements = ['student_id', 'student_name', 'student_surname', 'faculty_name', 'speciality_name', 'group_name'];\n\n    this.sortTop = (a, b) => {\n      return 1;\n    };\n\n    this.ActivateAddStudentComp = false;\n    this.ActivateEditStudentComp = false;\n    this.student = new Students();\n    this.GPA_filter = \"\";\n    this.student_id_filter = \"\";\n    this.student_name_filter = \"\";\n    this.student_surname_filter = \"\";\n    this.student_faculty_filter = \"\";\n    this.student_speciality_filter = \"\";\n    this.student_group_filter = \"\";\n  }\n\n  ngAfterViewInit() {\n    this.GpaSource.paginator = this.paginator;\n  }\n\n  ngOnInit() {\n    if (localStorage.length > 0) {\n      this.IsSimpleList = localStorage.getItem('IsSimpleList') == \"true\";\n      this.IsTopList = localStorage.getItem('IsTopList') == \"true\";\n    }\n\n    this.refreshStudentList();\n  }\n\n  refreshStudentList() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.IsSimpleList) {\n        yield _this.service.getStudentList().then(data => {\n          if (data.success) {\n            _this.StudentList = data;\n          } else {\n            alert(data.userMessage);\n          }\n        });\n      } else if (_this.IsTopList) {\n        yield _this.service.GetTopStudents().then(data => {\n          if (data.success) {\n            _this.StudentList.result_set_dictionary = data.result_set_dictionary;\n\n            _this.getEntries();\n\n            _this.filtersLoaded = Promise.resolve(true);\n          } else {\n            alert(data.userMessage);\n          }\n        });\n      }\n    })();\n  }\n\n  getEntries() {\n    for (let [key, value] of Object.entries(this.StudentList.result_set_dictionary)) {\n      this.service.InfoById(Number(key)).subscribe(d => {\n        let student = {\n          student_id: Number(key),\n          student_name: d.result_set.student_name,\n          student_surname: d.result_set.student_surname,\n          GPA: Number(value)\n        };\n        this.StudentGpa.push(student);\n      });\n    }\n\n    this.GpaSource = new MatTableDataSource(this.StudentGpa);\n  }\n\n  infoById(id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.service.InfoById(id).subscribe(data => {\n        _this2.StudentList.result_set.push(data.result_set);\n      });\n    })();\n  }\n\n  filter() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      var student_id_filter = _this3.student_id_filter;\n      var student_name_filter = _this3.student_name_filter;\n      var student_surname_filter = _this3.student_surname_filter;\n      var student_faculty_filter = _this3.student_faculty_filter;\n      var student_speciality_filter = _this3.student_speciality_filter;\n      var student_group_filter = _this3.student_group_filter;\n      _this3.StudentList.result_set = yield _this3.StudentListWithoutFilter.result_set.filter(function (sort) {\n        return sort.student_id.toString().toLowerCase().includes(student_id_filter.toString().trim().toLowerCase()) && sort.student_name.toString().toLowerCase().includes(student_name_filter.toString().trim().toLowerCase()) && sort.student_surname.toString().toLowerCase().includes(student_surname_filter.toString().trim().toLowerCase()) && sort.faculty_id.toString().toLowerCase().includes(student_faculty_filter.toString().trim().toLowerCase()) && sort.speciality_id.toString().toLowerCase().includes(student_speciality_filter.toString().trim().toLowerCase()) && sort.faculty_id.toString().toLowerCase().includes(student_faculty_filter.toString().trim().toLowerCase()) && sort.group_id.toString().toLowerCase().includes(student_group_filter.toString().trim().toLowerCase());\n      });\n    })();\n  }\n\n  sort_result(property, isAscending) {}\n\n  show_add() {\n    this.ModalTitle = \"Apply a new student\";\n    this.ActivateAddStudentComp = true;\n    this.Modal.show();\n  }\n\n  close() {\n    this.Modal.hide();\n    this.refreshStudentList();\n    this.ActivateAddStudentComp = false;\n    this.ActivateEditStudentComp = false;\n  }\n\n  delete_student(student) {\n    if (confirm('Are you sure?')) {\n      let result = new StudentsResult();\n      this.service.DeleteStudent(student.student_id).then(data => {\n        result.success = data.success;\n        result.userMessage = data.userMessage;\n\n        if (result.success) {\n          alert('You have successfully deleted student');\n        }\n\n        this.refreshStudentList();\n        this.student = new Students();\n      }).catch(error => {\n        alert(error.error.userMessage + 'Student does not exist');\n      });\n    }\n  }\n\n  show_edit(item) {\n    this.student = item;\n    this.ModalTitle = \"Edit student\";\n    this.ActivateEditStudentComp = true;\n    this.Modal.show();\n  }\n\n  topStudents() {\n    this.IsSimpleList = false;\n    this.IsTopList = true;\n    localStorage.setItem(\"IsSimpleList\", JSON.stringify(this.IsSimpleList));\n    localStorage.setItem(\"IsTopList\", JSON.stringify(this.IsTopList));\n    this.refreshStudentList();\n  }\n\n  simpleStudentInformation() {\n    this.IsSimpleList = true;\n    this.IsTopList = false;\n    localStorage.setItem(\"IsSimpleList\", JSON.stringify(this.IsSimpleList));\n    localStorage.setItem(\"IsTopList\", JSON.stringify(this.IsTopList));\n    this.refreshStudentList();\n  }\n\n};\n\n__decorate([ViewChild(MatPaginator)], ShowStudentsComponent.prototype, \"paginator\", void 0);\n\n__decorate([ViewChild('Modal', {\n  static: true\n})], ShowStudentsComponent.prototype, \"Modal\", void 0);\n\n__decorate([Input()], ShowStudentsComponent.prototype, \"isChanged\", void 0);\n\nShowStudentsComponent = __decorate([Component({\n  selector: 'app-show-students',\n  templateUrl: './show-students.component.html',\n  styleUrls: ['./show-students.component.css'],\n  animations: [trigger(\"flyInOut\", [state(\"in\", style({\n    transform: \"translateX(0)\"\n  })), transition(\"void => *\", [animate(300, keyframes([style({\n    opacity: 0\n  }), style({\n    opacity: 1\n  })]))]), transition(\"* => void\", [animate(300, keyframes([style({\n    opacity: 1\n  }), style({\n    opacity: 0\n  })]))])])]\n})], ShowStudentsComponent);\nexport { ShowStudentsComponent };","map":{"version":3,"sources":["C:\\Hierarchy\\Hierarchy PL\\hierarchy\\src\\app\\students\\show-students\\show-students.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, NgIterable, OnInit , ViewChild} from '@angular/core';\nimport { StudentsResult } from 'models/students-result.model';\nimport { Students } from 'models/students.model';\nimport { SharedService } from 'src/app/shared.service';\nimport {BsModalRef, ModalDirective} from 'ngx-bootstrap/modal';\nimport { MDBModalService, ModalContainerComponent } from 'angular-bootstrap-md';\nimport { Variable } from '@angular/compiler/src/render3/r3_ast';\nimport {trigger, state, style, transition, animate, keyframes} from '@angular/animations';\nimport { KeyValue, KeyValuePipe } from '@angular/common';\nimport { StudentGpa } from 'models/studentgpa.model';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatTableDataSource} from '@angular/material/table';\n\n\n\nfunction delay(ms: number){\n  return new Promise( resolve => setTimeout(resolve,ms ));\n}\n@Component({\n  selector: 'app-show-students',\n  templateUrl: './show-students.component.html',\n  styleUrls: ['./show-students.component.css'],\n  animations: [\n    trigger(\"flyInOut\", [\n      state(\"in\", style({ transform: \"translateX(0)\" })),\n      transition(\"void => *\", [\n        animate(\n          300,\n          keyframes([\n            style({ opacity: 0}),\n            style({ opacity: 1}),\n          ])\n        )\n      ]),\n      transition(\"* => void\", [\n        animate(\n          300,\n          keyframes([\n            style({ opacity: 1}),\n            style({ opacity: 0}),\n          ])\n        )\n      ])\n    ])\n  ]\n})\n\nexport class ShowStudentsComponent implements OnInit {\n  \n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n\n  ngAfterViewInit() {\n    this.GpaSource.paginator = this.paginator;\n  }\n  @ViewChild('Modal', {static: true}) Modal: ModalDirective;\n\n  @Input() isChanged: Boolean;\n  constructor(private service:SharedService, private ModalService: MDBModalService) {\n   }\n   IsSimpleList: Boolean = true;\n   IsTopList: Boolean = false;\n  StudentGpa: StudentGpa[]=[];\n  GpaSource: any;\n\n\n  StudentList:StudentsResult = new StudentsResult();\n  StudentListWithoutFilter: StudentsResult = new StudentsResult();\n  SortElements = ['student_id', 'student_name', 'student_surname', 'faculty_name', 'speciality_name', 'group_name'];\n  ngOnInit(): void {\n    if(localStorage.length>0){\n    this.IsSimpleList = localStorage.getItem('IsSimpleList') == \"true\";\n    this.IsTopList = localStorage.getItem('IsTopList') == \"true\"\n    }\n    this.refreshStudentList();\n  }\n\n  ModalTitle: string;\n async refreshStudentList(){\n\nif(this.IsSimpleList){\nawait this.service.getStudentList().then((data) => {\n      \n      if (data.success) {\n       this.StudentList=data;    \n      } else{\n        alert(data.userMessage);\n      }\n  });\n}\nelse if (this.IsTopList){\n  await this.service.GetTopStudents().then((data) => {\n      \n    if (data.success) {\n     this.StudentList.result_set_dictionary=data.result_set_dictionary;\n     this.getEntries();\n     this.filtersLoaded = Promise.resolve(true);\n\n    } else {\n      alert(data.userMessage);\n    }\n});\n\n\n}\n}\n\nfiltersLoaded: Promise<boolean>;\n\ngetEntries(){\n  for(let [key,value] of Object.entries(this.StudentList.result_set_dictionary)){\n    this.service.InfoById(Number(key)).subscribe((d) =>{\n      let student: StudentGpa = {\n        student_id: Number(key),\n        student_name: d.result_set.student_name,\n        student_surname: d.result_set.student_surname,\n        GPA: Number(value)\n      }\n     this.StudentGpa.push(student);\n\n      })\n   \n    }\n  this.GpaSource  = new MatTableDataSource<StudentGpa>(this.StudentGpa);\n}\nasync infoById(id:number){\n    this.service.InfoById(id).subscribe((data) =>{\n      this.StudentList.result_set.push(data.result_set); })\n\n}\nsortTop = (a:any,b:any) =>{\n  return 1;\n}\nActivateAddStudentComp:Boolean=false;\nActivateEditStudentComp:Boolean=false;\nstudent:Students = new Students();\nmodalRef:BsModalRef;\nGPA_filter:string = \"\";\nstudent_id_filter:string=\"\";\nstudent_name_filter:string=\"\";\nstudent_surname_filter:string=\"\";\nstudent_faculty_filter:string=\"\";\nstudent_speciality_filter:string=\"\";\nstudent_group_filter:string=\"\";\n\nasync filter(){\n  var student_id_filter = this.student_id_filter;\n  var student_name_filter = this.student_name_filter;\n  var student_surname_filter = this.student_surname_filter;\n  var student_faculty_filter = this.student_faculty_filter;\n  var student_speciality_filter = this.student_speciality_filter;\n  var student_group_filter = this.student_group_filter;\n  this.StudentList.result_set =  await this.StudentListWithoutFilter.result_set.filter(function (sort){\n      return sort.student_id.toString().toLowerCase().includes(\n      student_id_filter.toString().trim().toLowerCase())\n       &&\n      sort.student_name.toString().toLowerCase().includes(\n        student_name_filter.toString().trim().toLowerCase()) &&\n\n      sort.student_surname.toString().toLowerCase().includes(\n        student_surname_filter.toString().trim().toLowerCase())&&\n\n      sort.faculty_id.toString().toLowerCase().includes(\n        student_faculty_filter.toString().trim().toLowerCase())&&\n\n      sort.speciality_id.toString().toLowerCase().includes(\n        student_speciality_filter.toString().trim().toLowerCase())&&\n\n      sort.faculty_id.toString().toLowerCase().includes(\n        student_faculty_filter.toString().trim().toLowerCase()) &&\n\n        sort.group_id.toString().toLowerCase().includes(\n          student_group_filter.toString().trim().toLowerCase())\n  });\n}\nsort_result(property: any, isAscending : Boolean){\n  \n}\nshow_add(){\n  this.ModalTitle=\"Apply a new student\";\n  this.ActivateAddStudentComp=true;\n  this.Modal.show();\n}\nclose(){\n  this.Modal.hide();\n   this.refreshStudentList();\n      this.ActivateAddStudentComp=false;\n      this.ActivateEditStudentComp = false;\n    \n   \n}\ndelete_student(student: Students){\n  if(confirm('Are you sure?')){\n    let result = new StudentsResult();\n    this.service\n    .DeleteStudent(student.student_id)\n    .then((data) => {\n      result.success = data.success;\n      result.userMessage = data.userMessage;\n      if (result.success) {\n        alert('You have successfully deleted student');\n      } \n      this.refreshStudentList();\n      this.student = new Students();\n    })\n    .catch((error) => {\n      alert(\n        error.error.userMessage +\n          'Student does not exist'\n      );\n    });\n  }\n}\nshow_edit(item:Students){\n  this.student = item;\n  this.ModalTitle=\"Edit student\";\n  this.ActivateEditStudentComp = true;\n  this.Modal.show();\n\n}\n\ntopStudents(){\n  this.IsSimpleList = false;\n  this.IsTopList = true;\n  localStorage.setItem(\"IsSimpleList\", JSON.stringify(this.IsSimpleList));\n  localStorage.setItem(\"IsTopList\", JSON.stringify(this.IsTopList));\n  this.refreshStudentList();\n}\nsimpleStudentInformation(){\n  this.IsSimpleList = true;\n  this.IsTopList = false;\n  localStorage.setItem(\"IsSimpleList\", JSON.stringify(this.IsSimpleList));\n  localStorage.setItem(\"IsTopList\", JSON.stringify(this.IsTopList));\n  this.refreshStudentList();\n  \n}\n}\n\n\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}